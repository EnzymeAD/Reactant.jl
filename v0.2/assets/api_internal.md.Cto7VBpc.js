import{_ as p,C as d,c as r,o,j as i,al as a,a as n,G as t,w as l}from"./chunks/framework.DFT8MGIE.js";const Ze=JSON.parse('{"title":"Internal API","description":"","frontmatter":{},"headers":[],"relativePath":"api/internal.md","filePath":"api/internal.md","lastUpdated":null}'),h={name:"api/internal.md"},u={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},B={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},D={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.231ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2754 1000","aria-hidden":"true"},x={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},Q={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},Z={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},ee={class:"jldocstring custom-block"},ie={class:"jldocstring custom-block"},se={class:"jldocstring custom-block"},te={class:"jldocstring custom-block"},ne={class:"jldocstring custom-block"},ae={class:"jldocstring custom-block"},le={class:"jldocstring custom-block"},re={class:"jldocstring custom-block"},oe={class:"jldocstring custom-block"},pe={class:"jldocstring custom-block"},de={class:"jldocstring custom-block"},he={class:"jldocstring custom-block"},ue={class:"jldocstring custom-block"},ke={class:"jldocstring custom-block"},ye={class:"jldocstring custom-block"},ce={class:"jldocstring custom-block"},Ee={class:"jldocstring custom-block"},me={class:"jldocstring custom-block"},ge={class:"jldocstring custom-block"},fe={class:"jldocstring custom-block"},Ce={class:"jldocstring custom-block"},be={class:"jldocstring custom-block"},ve={class:"jldocstring custom-block"},Te={class:"jldocstring custom-block"},_e={class:"jldocstring custom-block"},Fe={class:"jldocstring custom-block"},Ae={class:"jldocstring custom-block"},je={class:"jldocstring custom-block"},ze={class:"jldocstring custom-block"},Re={class:"jldocstring custom-block"},Se={class:"jldocstring custom-block"},we={class:"jldocstring custom-block"},Ie={class:"jldocstring custom-block"},Be={class:"jldocstring custom-block"},De={class:"jldocstring custom-block"},xe={class:"jldocstring custom-block"},Pe={class:"jldocstring custom-block"};function Me(We,e,Ve,Ne,Le,Qe){const s=d("Badge");return o(),r("div",null,[e[322]||(e[322]=i("h1",{id:"Internal-API",tabindex:"-1"},[n("Internal API "),i("a",{class:"header-anchor",href:"#Internal-API","aria-label":'Permalink to "Internal API {#Internal-API}"'},"​")],-1)),e[323]||(e[323]=i("div",{class:"danger custom-block"},[i("p",{class:"custom-block-title"},"Private"),i("p",null,"These functions are not part of the public API and are subject to change at any time.")],-1)),i("details",u,[i("summary",null,[e[0]||(e[0]=i("a",{id:"Reactant.REDUB_ARGUMENTS_NAME",href:"#Reactant.REDUB_ARGUMENTS_NAME"},[i("span",{class:"jlbinding"},"Reactant.REDUB_ARGUMENTS_NAME")],-1)),e[1]||(e[1]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[3]||(e[3]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reactant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REDUB_ARGUMENTS_NAME</span></span></code></pre></div><p>The variable name bound to <code>call_with_reactant</code>&#39;s tuple of arguments in its <code>@generated</code> method definition.</p><p>This binding can be used to manually reference/destructure <code>call_with_reactants</code> arguments</p><p>This is required because user arguments could have a name which clashes with whatever name we choose for our argument. Thus we gensym to create it.</p><p>This originates from <a href="https://github.com/JuliaLabs/Cassette.jl/blob/c29b237c1ec0deda3a1037ec519eebe216952bfe/src/overdub.jl#L154" target="_blank" rel="noreferrer">https://github.com/JuliaLabs/Cassette.jl/blob/c29b237c1ec0deda3a1037ec519eebe216952bfe/src/overdub.jl#L154</a></p>',5)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[2]||(e[2]=[i("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ccd6fb985b86be4f2d739a238ba4029e1ae0da35/src/utils.jl#L35-L47",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",k,[i("summary",null,[e[4]||(e[4]=i("a",{id:"Reactant.Compiler.codegen_unflatten!",href:"#Reactant.Compiler.codegen_unflatten!"},[i("span",{class:"jlbinding"},"Reactant.Compiler.codegen_unflatten!")],-1)),e[5]||(e[5]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[7]||(e[7]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen_unflatten!</span></span></code></pre></div><p>Generate Julia code to wrap the XLA buffers back into the output result datatypes. The name is due to its similarity to the <code>unflatten</code> function in <code>jax.tree_util.register_pytree_node</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[6]||(e[6]=[i("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ccd6fb985b86be4f2d739a238ba4029e1ae0da35/src/Compiler.jl#L3008-L3013",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[e[8]||(e[8]=i("a",{id:"Reactant.Compiler.codegen_flatten!",href:"#Reactant.Compiler.codegen_flatten!"},[i("span",{class:"jlbinding"},"Reactant.Compiler.codegen_flatten!")],-1)),e[9]||(e[9]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[11]||(e[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen_flatten!</span></span></code></pre></div><p>Generate Julia code to extract the XLA buffers from input arguments. The name is due to its similarity to the <code>flatten</code> function in <code>jax.tree_util.register_pytree_node</code>.</p><p><strong>Arguments</strong></p><ul><li><code>linear_args</code>: A list of arguments to be flattened.</li></ul><p><strong>Returns</strong></p><ul><li><p><code>flatten_names</code>: A list of <code>Symbol</code>s representing the names of the flattened arguments.</p></li><li><p><code>flatten_code</code>: A list of <code>Expr</code>s to extract the XLA buffers from the input arguments.</p></li></ul><p><strong>Note</strong></p><p>The <em>linearized arguments</em> do not directly refer to the are the arguments that have been flattened into a single list.</p>',8)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[10]||(e[10]=[i("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ccd6fb985b86be4f2d739a238ba4029e1ae0da35/src/Compiler.jl#L2695-L2713",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[e[12]||(e[12]=i("a",{id:"Reactant.Compiler.codegen_xla_call",href:"#Reactant.Compiler.codegen_xla_call"},[i("span",{class:"jlbinding"},"Reactant.Compiler.codegen_xla_call")],-1)),e[13]||(e[13]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[15]||(e[15]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen_xla_call</span></span></code></pre></div><p>Generate Julia code to call the XLA executable.</p><p><strong>Arguments</strong></p><ul><li><p><code>flatten_names</code>: A list of <code>Symbol</code>s representing the names of the flattened linear arguments.</p></li><li><p><code>nresults</code>: The number of results to expect.</p></li><li><p><code>is_pure</code>: Whether the function being compiled is pure (i.e., has no side effects)</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[14]||(e[14]=[i("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ccd6fb985b86be4f2d739a238ba4029e1ae0da35/src/Compiler.jl#L3272-L3282",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[e[16]||(e[16]=i("a",{id:"Reactant.synchronize",href:"#Reactant.synchronize"},[i("span",{class:"jlbinding"},"Reactant.synchronize")],-1)),e[17]||(e[17]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[19]||(e[19]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{ConcretePJRTArray,ConcretePJRTNumber}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{ConcreteIFRTArray,ConcreteIFRTNumber}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Blocks until the computation is complete. Returns <code>nothing</code>. Does nothing if the input is not supported by Reactant. For tuples, synchronizes each element of the tuple.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This function is internal and is not part of the public API. Prefer <code>@compile</code> with <code>sync=true</code> to compile functions that block until the computation is complete instead of calling this function.</p></div>`,3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[18]||(e[18]=[i("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ccd6fb985b86be4f2d739a238ba4029e1ae0da35/src/ConcreteRArray.jl#L152-L163",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e[324]||(e[324]=a('<h2 id="Other-Docstrings" tabindex="-1">Other Docstrings <a class="header-anchor" href="#Other-Docstrings" aria-label="Permalink to &quot;Other Docstrings {#Other-Docstrings}&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Private</p><p>These docstrings are present here to prevent missing docstring warnings. For official Enzyme documentation checkout <a href="https://enzymead.github.io/Enzyme.jl/stable/" target="_blank" rel="noreferrer">https://enzymead.github.io/Enzyme.jl/stable/</a>.</p></div>',2)),i("details",m,[i("summary",null,[e[20]||(e[20]=i("a",{id:"EnzymeCore.Forward",href:"#EnzymeCore.Forward"},[i("span",{class:"jlbinding"},"EnzymeCore.Forward")],-1)),e[21]||(e[21]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[23]||(e[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Forward</span></span></code></pre></div><p>Default instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ForwardMode"><code>ForwardMode</code></a> that doesn&#39;t return the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[22]||(e[22]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L512-L516",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[e[24]||(e[24]=i("a",{id:"EnzymeCore.ForwardWithPrimal",href:"#EnzymeCore.ForwardWithPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.ForwardWithPrimal")],-1)),e[25]||(e[25]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[27]||(e[27]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardWithPrimal</span></span></code></pre></div><p>Default instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ForwardMode"><code>ForwardMode</code></a> that also returns the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[26]||(e[26]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L519-L523",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[e[28]||(e[28]=i("a",{id:"EnzymeCore.Reverse",href:"#EnzymeCore.Reverse"},[i("span",{class:"jlbinding"},"EnzymeCore.Reverse")],-1)),e[29]||(e[29]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[31]||(e[31]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reverse</span></span></code></pre></div><p>Default instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a> that doesn&#39;t return the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[30]||(e[30]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L326-L330",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[e[32]||(e[32]=i("a",{id:"EnzymeCore.ReverseHolomorphic",href:"#EnzymeCore.ReverseHolomorphic"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseHolomorphic")],-1)),e[33]||(e[33]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[35]||(e[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseHolomorphic</span></span></code></pre></div><p>Holomorphic instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a> that doesn&#39;t return the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[34]||(e[34]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L340-L344",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[e[36]||(e[36]=i("a",{id:"EnzymeCore.ReverseHolomorphicWithPrimal",href:"#EnzymeCore.ReverseHolomorphicWithPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseHolomorphicWithPrimal")],-1)),e[37]||(e[37]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[39]||(e[39]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseHolomorphicWithPrimal</span></span></code></pre></div><p>Holomorphic instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a> that also returns the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[38]||(e[38]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L347-L351",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[e[40]||(e[40]=i("a",{id:"EnzymeCore.ReverseSplitNoPrimal",href:"#EnzymeCore.ReverseSplitNoPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseSplitNoPrimal")],-1)),e[41]||(e[41]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[43]||(e[43]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseSplitNoPrimal</span></span></code></pre></div><p>Default instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a> that doesn&#39;t return the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[42]||(e[42]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L431-L435",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[e[44]||(e[44]=i("a",{id:"EnzymeCore.ReverseSplitWithPrimal",href:"#EnzymeCore.ReverseSplitWithPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseSplitWithPrimal")],-1)),e[45]||(e[45]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[47]||(e[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseSplitWithPrimal</span></span></code></pre></div><p>Default instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a> that also returns the primal</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[46]||(e[46]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L438-L442",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_,[i("summary",null,[e[48]||(e[48]=i("a",{id:"EnzymeCore.ReverseWithPrimal",href:"#EnzymeCore.ReverseWithPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseWithPrimal")],-1)),e[49]||(e[49]=n()),t(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[51]||(e[51]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseWithPrimal</span></span></code></pre></div><p>Default instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a> that also returns the primal.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[50]||(e[50]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L333-L337",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[e[52]||(e[52]=i("a",{id:"EnzymeCore.ABI",href:"#EnzymeCore.ABI"},[i("span",{class:"jlbinding"},"EnzymeCore.ABI")],-1)),e[53]||(e[53]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[55]||(e[55]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ABI</span></span></code></pre></div><p>Abstract type for what ABI will be used.</p><p><strong>Subtypes</strong></p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.FFIABI"><code>FFIABI</code></a> (the default)</p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.InlineABI"><code>InlineABI</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.NonGenABI"><code>NonGenABI</code></a></p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[54]||(e[54]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L209-L219",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[e[56]||(e[56]=i("a",{id:"EnzymeCore.Active",href:"#EnzymeCore.Active"},[i("span",{class:"jlbinding"},"EnzymeCore.Active")],-1)),e[57]||(e[57]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[59]||(e[59]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Mark a function argument <code>x</code> of <a href="./@ref Enzyme.autodiff"><code>autodiff</code></a> as active, Enzyme will auto-differentiate in respect <code>Active</code> arguments.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Enzyme gradients with respect to integer values are zero. <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Active"><code>Active</code></a> will automatically convert plain integers to floating point values, but cannot do so for integer values in tuples and structs.</p></div>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[58]||(e[58]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L36-L47",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",j,[i("summary",null,[e[60]||(e[60]=i("a",{id:"EnzymeCore.Annotation",href:"#EnzymeCore.Annotation"},[i("span",{class:"jlbinding"},"EnzymeCore.Annotation")],-1)),e[61]||(e[61]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[63]||(e[63]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Annotation{T}</span></span></code></pre></div><p>Abstract type for <a href="./@ref Enzyme.autodiff"><code>autodiff</code></a> function argument wrappers like <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Const"><code>Const</code></a>, <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Active"><code>Active</code></a> and <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Duplicated"><code>Duplicated</code></a>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[62]||(e[62]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L14-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",z,[i("summary",null,[e[64]||(e[64]=i("a",{id:"EnzymeCore.BatchDuplicated",href:"#EnzymeCore.BatchDuplicated"},[i("span",{class:"jlbinding"},"EnzymeCore.BatchDuplicated")],-1)),e[65]||(e[65]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[67]||(e[67]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatchDuplicated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ∂f_∂xs)</span></span></code></pre></div><p>Like <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Duplicated"><code>Duplicated</code></a>, except contains several shadows to compute derivatives for all at once. Argument <code>∂f_∂xs</code> should be a tuple of the several values of type <code>x</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[66]||(e[66]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L126-L131",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",R,[i("summary",null,[e[68]||(e[68]=i("a",{id:"EnzymeCore.BatchDuplicatedNoNeed",href:"#EnzymeCore.BatchDuplicatedNoNeed"},[i("span",{class:"jlbinding"},"EnzymeCore.BatchDuplicatedNoNeed")],-1)),e[69]||(e[69]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[71]||(e[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatchDuplicatedNoNeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ∂f_∂xs)</span></span></code></pre></div><p>Like <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.DuplicatedNoNeed"><code>DuplicatedNoNeed</code></a>, except contains several shadows to compute derivatives for all at once. Argument <code>∂f_∂xs</code> should be a tuple of the several values of type <code>x</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[70]||(e[70]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L154-L159",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",S,[i("summary",null,[e[72]||(e[72]=i("a",{id:"EnzymeCore.BatchMixedDuplicated",href:"#EnzymeCore.BatchMixedDuplicated"},[i("span",{class:"jlbinding"},"EnzymeCore.BatchMixedDuplicated")],-1)),e[73]||(e[73]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[75]||(e[75]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatchMixedDuplicated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ∂f_∂xs)</span></span></code></pre></div><p>Like <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.MixedDuplicated"><code>MixedDuplicated</code></a>, except contains several shadows to compute derivatives for all at once. Only used within custom rules.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[74]||(e[74]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L195-L200",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[e[76]||(e[76]=i("a",{id:"EnzymeCore.Const",href:"#EnzymeCore.Const"},[i("span",{class:"jlbinding"},"EnzymeCore.Const")],-1)),e[77]||(e[77]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[79]||(e[79]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Mark a function argument <code>x</code> of <a href="./@ref Enzyme.autodiff"><code>autodiff</code></a> as constant, Enzyme will not auto-differentiate in respect <code>Const</code> arguments.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[78]||(e[78]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L23-L28",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",I,[i("summary",null,[e[80]||(e[80]=i("a",{id:"EnzymeCore.Duplicated",href:"#EnzymeCore.Duplicated"},[i("span",{class:"jlbinding"},"EnzymeCore.Duplicated")],-1)),e[81]||(e[81]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[97]||(e[97]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Duplicated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ∂f_∂x)</span></span></code></pre></div>',1)),i("p",null,[e[84]||(e[84]=n("Mark a function argument ",-1)),e[85]||(e[85]=i("code",null,"x",-1)),e[86]||(e[86]=n(" of ",-1)),e[87]||(e[87]=i("a",{href:"./@ref Enzyme.autodiff"},[i("code",null,"autodiff")],-1)),e[88]||(e[88]=n(" as duplicated, Enzyme will auto-differentiate in respect to such arguments, with ",-1)),e[89]||(e[89]=i("code",null,"dx",-1)),e[90]||(e[90]=n(" acting as an accumulator for gradients (so ",-1)),i("mjx-container",B,[(o(),r("svg",D,[...e[82]||(e[82]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1116,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(1616,0)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2182,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g></g></g>',1)])])),e[83]||(e[83]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"∂"),i("mi",null,"f"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",null,"/")]),i("mi",null,"∂"),i("mi",null,"x")])],-1))]),e[91]||(e[91]=n(" will be ",-1)),e[92]||(e[92]=i("em",null,"added to",-1)),e[93]||(e[93]=n(") ",-1)),e[94]||(e[94]=i("code",null,"∂f_∂x",-1)),e[95]||(e[95]=n(".",-1))]),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[96]||(e[96]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L57-L64",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[e[98]||(e[98]=i("a",{id:"EnzymeCore.DuplicatedNoNeed",href:"#EnzymeCore.DuplicatedNoNeed"},[i("span",{class:"jlbinding"},"EnzymeCore.DuplicatedNoNeed")],-1)),e[99]||(e[99]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[101]||(e[101]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DuplicatedNoNeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ∂f_∂x)</span></span></code></pre></div><p>Like <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Duplicated"><code>Duplicated</code></a>, except also specifies that Enzyme may avoid computing the original result and only compute the derivative values. This creates opportunities for improved performance.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square_byref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out, v)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    out[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Enzyme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">autodiff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Reverse, square_byref, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DuplicatedNoNeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out, dout), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dout[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span></span></code></pre></div><p>For example, marking the out variable as <code>DuplicatedNoNeed</code> instead of <code>Duplicated</code> allows Enzyme to avoid computing <code>v * v</code> (while still computing its derivative).</p><p>This should only be used if <code>x</code> is a write-only variable. Otherwise, if the differentiated function stores values in <code>x</code> and reads them back in subsequent computations, using <code>DuplicatedNoNeed</code> may result in incorrect derivatives. In particular, <code>DuplicatedNoNeed</code> should not be used for preallocated workspace, even if the user might not care about its final value, as marking a variable as NoNeed means that reads from the variable are now undefined.</p>`,5)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[100]||(e[100]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L79-L111",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[e[102]||(e[102]=i("a",{id:"EnzymeCore.FFIABI",href:"#EnzymeCore.FFIABI"},[i("span",{class:"jlbinding"},"EnzymeCore.FFIABI")],-1)),e[103]||(e[103]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[105]||(e[105]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFIABI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABI</span></span></code></pre></div><p>Foreign function call <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ABI"><code>ABI</code></a>. JIT the differentiated function, then inttoptr call the address.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[104]||(e[104]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L222-L226",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",M,[i("summary",null,[e[106]||(e[106]=i("a",{id:"EnzymeCore.ForwardMode",href:"#EnzymeCore.ForwardMode"},[i("span",{class:"jlbinding"},"EnzymeCore.ForwardMode")],-1)),e[107]||(e[107]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[109]||(e[109]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardMode{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ReturnPrimal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ABI,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ErrIfFuncWritten,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RuntimeActivity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    StrongZero</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Mode{ABI,ErrIfFuncWritten,RuntimeActivity,StrongZero}</span></span></code></pre></div><p>Subtype of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Mode"><code>Mode</code></a> for forward mode differentiation.</p><p><strong>Type parameters</strong></p><ul><li><p><code>ReturnPrimal</code>: whether to return the primal return value from the augmented-forward.</p></li><li><p>other parameters: see <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Mode"><code>Mode</code></a></p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The type parameters of <code>ForwardMode</code> are not part of the public API and can change without notice. Please use one of the following concrete instantiations instead:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Forward"><code>Forward</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ForwardWithPrimal"><code>ForwardWithPrimal</code></a></p></li></ul><p>You can modify them with the following helper functions:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.WithPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>WithPrimal</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.NoPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>NoPrimal</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_err_if_func_written"><code>set_err_if_func_written</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_err_if_func_written"><code>clear_err_if_func_written</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_runtime_activity"><code>set_runtime_activity</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_runtime_activity"><code>clear_runtime_activity</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_abi"><code>set_abi</code></a></p></li></ul></div>`,5)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[108]||(e[108]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L482-L508",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",W,[i("summary",null,[e[110]||(e[110]=i("a",{id:"EnzymeCore.InlineABI",href:"#EnzymeCore.InlineABI"},[i("span",{class:"jlbinding"},"EnzymeCore.InlineABI")],-1)),e[111]||(e[111]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[113]||(e[113]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InlineABI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABI</span></span></code></pre></div><p>Inlining function call <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ABI"><code>ABI</code></a>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[112]||(e[112]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L229-L233",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",V,[i("summary",null,[e[114]||(e[114]=i("a",{id:"EnzymeCore.MixedDuplicated",href:"#EnzymeCore.MixedDuplicated"},[i("span",{class:"jlbinding"},"EnzymeCore.MixedDuplicated")],-1)),e[115]||(e[115]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[117]||(e[117]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MixedDuplicated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ∂f_∂x)</span></span></code></pre></div><p>Like <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Duplicated"><code>Duplicated</code></a>, except x may contain both active [immutable] and duplicated [mutable] data which is differentiable. Only used within custom rules.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[116]||(e[116]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L183-L188",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",N,[i("summary",null,[e[118]||(e[118]=i("a",{id:"EnzymeCore.Mode",href:"#EnzymeCore.Mode"},[i("span",{class:"jlbinding"},"EnzymeCore.Mode")],-1)),e[119]||(e[119]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[121]||(e[121]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mode{ABI,ErrIfFuncWritten,RuntimeActivity,StrongZero}</span></span></code></pre></div><p>Abstract type for which differentiation mode will be used.</p><p><strong>Subtypes</strong></p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ForwardMode"><code>ForwardMode</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a></p></li></ul><p><strong>Type parameters</strong></p><ul><li><p><code>ABI</code>: what runtime <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ABI"><code>ABI</code></a> to use</p></li><li><p><code>ErrIfFuncWritten</code>: whether to error when the function differentiated is a closure and written to.</p></li><li><p><code>RuntimeActivity</code>: whether to enable runtime activity (default off). Runtime Activity is required is the differentiability of all mutable variables cannot be determined statically. For a deeper explanation see the <a href="./@ref faq-runtime-activity">FAQ</a></p></li><li><p><code>StrongZero</code>: whether to enforce that propagating a zero derivative input always ends up in zero derivative outputs. This is required to avoid nan&#39;s if one of the arguments may be infinite or nan. For a deeper explanation see the <a href="./@ref faq-strong-zero">FAQ</a></p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The type parameters of <code>Mode</code> are not part of the public API and can change without notice. You can modify them with the following helper functions:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.WithPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>WithPrimal</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.NoPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>NoPrimal</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_err_if_func_written"><code>set_err_if_func_written</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_err_if_func_written"><code>clear_err_if_func_written</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_runtime_activity"><code>set_runtime_activity</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_runtime_activity"><code>clear_runtime_activity</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_strong_zero"><code>set_strong_zero</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_strong_zero"><code>clear_strong_zero</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_abi"><code>set_abi</code></a></p></li></ul></div>',7)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[120]||(e[120]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L245-L271",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",L,[i("summary",null,[e[122]||(e[122]=i("a",{id:"EnzymeCore.NonGenABI",href:"#EnzymeCore.NonGenABI"},[i("span",{class:"jlbinding"},"EnzymeCore.NonGenABI")],-1)),e[123]||(e[123]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[125]||(e[125]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NonGenABI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABI</span></span></code></pre></div><p>Non-generated function <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ABI"><code>ABI</code></a>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[124]||(e[124]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L236-L240",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Q,[i("summary",null,[e[126]||(e[126]=i("a",{id:"EnzymeCore.ReverseMode",href:"#EnzymeCore.ReverseMode"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseMode")],-1)),e[127]||(e[127]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[129]||(e[129]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseMode{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ReturnPrimal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RuntimeActivity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    StrongZero,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ABI,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Holomorphic,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ErrIfFuncWritten</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Mode{ABI,ErrIfFuncWritten,RuntimeActivity,StrongZero}</span></span></code></pre></div><p>Subtype of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Mode"><code>Mode</code></a> for reverse mode differentiation.</p><p><strong>Type parameters</strong></p><ul><li><p><code>ReturnPrimal</code>: whether to return the primal return value from the augmented-forward pass.</p></li><li><p><code>Holomorphic</code>: Whether the complex result function is holomorphic and we should compute <code>d/dz</code></p></li><li><p>other parameters: see <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Mode"><code>Mode</code></a></p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The type parameters of <code>ReverseMode</code> are not part of the public API and can change without notice. Please use one of the following concrete instantiations instead:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Reverse"><code>Reverse</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseWithPrimal"><code>ReverseWithPrimal</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseHolomorphic"><code>ReverseHolomorphic</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseHolomorphicWithPrimal"><code>ReverseHolomorphicWithPrimal</code></a></p></li></ul><p>You can modify them with the following helper functions:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.WithPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>WithPrimal</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.NoPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>NoPrimal</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_err_if_func_written"><code>set_err_if_func_written</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_err_if_func_written"><code>clear_err_if_func_written</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_runtime_activity"><code>set_runtime_activity</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_runtime_activity"><code>clear_runtime_activity</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_strong_zero"><code>set_strong_zero</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_strong_zero"><code>clear_strong_zero</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_abi"><code>set_abi</code></a></p></li></ul></div>`,5)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[128]||(e[128]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L292-L323",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",O,[i("summary",null,[e[130]||(e[130]=i("a",{id:"EnzymeCore.ReverseModeSplit",href:"#EnzymeCore.ReverseModeSplit"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseModeSplit")],-1)),e[131]||(e[131]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[133]||(e[133]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReverseModeSplit{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ReturnPrimal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ReturnShadow,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RuntimeActivity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    StrongZero,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ModifiedBetween,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ABI,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ErrFuncIfWritten</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Mode{ABI,ErrIfFuncWritten,RuntimeActivity,StrongZero}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    WithPrimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Enzyme.Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Subtype of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Mode"><code>Mode</code></a> for split reverse mode differentiation, to use in <a href="./@ref"><code>autodiff_thunk</code></a> and variants.</p><p><strong>Type parameters</strong></p><ul><li><p><code>ReturnShadow</code>: whether to return the shadow return value from the augmented-forward.</p></li><li><p><code>Width</code>: batch size (pick <code>0</code> to derive it automatically)</p></li><li><p><code>ModifiedBetween</code>: <code>Tuple</code> of each argument&#39;s &quot;modified between&quot; state (pick <code>true</code> to derive it automatically).</p></li><li><p>other parameters: see <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a></p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The type parameters of <code>ReverseModeSplit</code> are not part of the public API and can change without notice. Please use one of the following concrete instantiations instead:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseSplitNoPrimal"><code>ReverseSplitNoPrimal</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseSplitWithPrimal"><code>ReverseSplitWithPrimal</code></a></p></li></ul><p>You can modify them with the following helper functions:</p><ul><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.WithPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>WithPrimal</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.NoPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"><code>NoPrimal</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_err_if_func_written"><code>set_err_if_func_written</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_err_if_func_written"><code>clear_err_if_func_written</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_runtime_activity"><code>set_runtime_activity</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_runtime_activity"><code>clear_runtime_activity</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_strong_zero"><code>set_strong_zero</code></a> / <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.clear_strong_zero"><code>clear_strong_zero</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.set_abi"><code>set_abi</code></a></p></li><li><p><a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseSplitModified-Union{Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{MBO}, Tuple{MB}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MBO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}, Val{MB}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MB, MBO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"><code>ReverseSplitModified</code></a>, <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseSplitWidth-Union{Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{WidthO}, Tuple{MB}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, WidthO, MB, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}, Val{Width}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MB, WidthO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"><code>ReverseSplitWidth</code></a></p></li></ul></div>`,5)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[132]||(e[132]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L394-L428",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Z,[i("summary",null,[e[134]||(e[134]=i("a",{id:"EnzymeCore.Combined-Union{Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}}, Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{ModifiedBetween}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}",href:"#EnzymeCore.Combined-Union{Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}}, Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{ModifiedBetween}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"},[i("span",{class:"jlbinding"},"EnzymeCore.Combined")],-1)),e[135]||(e[135]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[137]||(e[137]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Combined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReverseMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Turn a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a> object into a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a> object while preserving as many of the settings as possible.</p><p>This function acts as the identity on a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a>.</p><p>See also <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Split-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{ModifiedBetween}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}, Val{ModifiedBetween}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}, Val{ModifiedBetween}, Val{ShadowInit}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"><code>Split</code></a>.</p>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[136]||(e[136]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L753-L761",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",H,[i("summary",null,[e[138]||(e[138]=i("a",{id:"EnzymeCore.NoPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}",href:"#EnzymeCore.NoPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"},[i("span",{class:"jlbinding"},"EnzymeCore.NoPrimal")],-1)),e[139]||(e[139]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[141]||(e[141]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoPrimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode which excludes the primal value.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[140]||(e[140]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L378-L382",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",U,[i("summary",null,[e[142]||(e[142]=i("a",{id:"EnzymeCore.ReverseSplitModified-Union{Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{MBO}, Tuple{MB}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MBO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}, Val{MB}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MB, MBO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}",href:"#EnzymeCore.ReverseSplitModified-Union{Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{MBO}, Tuple{MB}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MBO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}, Val{MB}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MB, MBO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseSplitModified")],-1)),e[143]||(e[143]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[145]||(e[145]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReverseSplitModified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReverseModeSplit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{MB}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a> mode where <code>ModifiedBetween</code> is set to <code>MB</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[144]||(e[144]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L445-L449",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",q,[i("summary",null,[e[146]||(e[146]=i("a",{id:"EnzymeCore.ReverseSplitWidth-Union{Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{WidthO}, Tuple{MB}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, WidthO, MB, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}, Val{Width}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MB, WidthO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}",href:"#EnzymeCore.ReverseSplitWidth-Union{Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{WidthO}, Tuple{MB}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, WidthO, MB, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}, Val{Width}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, MB, WidthO, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"},[i("span",{class:"jlbinding"},"EnzymeCore.ReverseSplitWidth")],-1)),e[147]||(e[147]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[149]||(e[149]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReverseSplitWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReverseModeSplit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{W}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new instance of <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a> mode where <code>Width</code> is set to <code>W</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[148]||(e[148]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L452-L456",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",G,[i("summary",null,[e[150]||(e[150]=i("a",{id:"EnzymeCore.Split-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{ModifiedBetween}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}, Val{ModifiedBetween}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}, Val{ModifiedBetween}, Val{ShadowInit}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}",href:"#EnzymeCore.Split-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{ModifiedBetween}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}, Val{ModifiedBetween}}, Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}, Val{ReturnShadow}, Val{Width}, Val{ModifiedBetween}, Val{ShadowInit}}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"},[i("span",{class:"jlbinding"},"EnzymeCore.Split")],-1)),e[151]||(e[151]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[153]||(e[153]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReverseMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{ReturnShadow}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{Width}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{ModifiedBetween}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{ShadowInit}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Turn a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseMode"><code>ReverseMode</code></a> object into a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a> object while preserving as many of the settings as possible. The rest of the settings can be configured with optional positional arguments of <code>Val</code> type.</p><p>This function acts as the identity on a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ReverseModeSplit"><code>ReverseModeSplit</code></a>.</p><p>See also <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Combined-Union{Tuple{EnzymeCore.ReverseModeSplit{ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}}, Tuple{ShadowInit}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{ModifiedBetween}, Tuple{Width}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnShadow}, Tuple{ReturnPrimal}} where {ReturnPrimal, ReturnShadow, RuntimeActivity, StrongZero, Width, ModifiedBetween, ABI, Holomorphic, ErrIfFuncWritten, ShadowInit}"><code>Combined</code></a>.</p>`,4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[152]||(e[152]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L699-L710",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",J,[i("summary",null,[e[154]||(e[154]=i("a",{id:"EnzymeCore.WithPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}",href:"#EnzymeCore.WithPrimal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}}, Tuple{ErrIfFuncWritten}, Tuple{Holomorphic}, Tuple{ABI}, Tuple{StrongZero}, Tuple{RuntimeActivity}, Tuple{ReturnPrimal}} where {ReturnPrimal, RuntimeActivity, StrongZero, ABI, Holomorphic, ErrIfFuncWritten}"},[i("span",{class:"jlbinding"},"EnzymeCore.WithPrimal")],-1)),e[155]||(e[155]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[157]||(e[157]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WithPrimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode which includes the primal value.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[156]||(e[156]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L371-L375",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",X,[i("summary",null,[e[158]||(e[158]=i("a",{id:"EnzymeCore.clear_err_if_func_written",href:"#EnzymeCore.clear_err_if_func_written"},[i("span",{class:"jlbinding"},"EnzymeCore.clear_err_if_func_written")],-1)),e[159]||(e[159]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[161]||(e[161]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear_err_if_func_written</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode which doesn&#39;t throw an error for attempts to write into an unannotated function object.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[160]||(e[160]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L651-L655",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Y,[i("summary",null,[e[162]||(e[162]=i("a",{id:"EnzymeCore.clear_runtime_activity",href:"#EnzymeCore.clear_runtime_activity"},[i("span",{class:"jlbinding"},"EnzymeCore.clear_runtime_activity")],-1)),e[163]||(e[163]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[165]||(e[165]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear_runtime_activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode where runtime activity analysis is deactivated. See <a href="./@ref">Enzyme.Mode</a> for more information on runtime activity.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[164]||(e[164]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L668-L672",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",$,[i("summary",null,[e[166]||(e[166]=i("a",{id:"EnzymeCore.clear_strong_zero",href:"#EnzymeCore.clear_strong_zero"},[i("span",{class:"jlbinding"},"EnzymeCore.clear_strong_zero")],-1)),e[167]||(e[167]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[169]||(e[169]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear_strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode where strong_zero is deactivated. See <a href="./@ref">Enzyme.Mode</a> for more information on strong zero.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[168]||(e[168]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L685-L689",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",K,[i("summary",null,[e[170]||(e[170]=i("a",{id:"EnzymeCore.compiler_job_from_backend",href:"#EnzymeCore.compiler_job_from_backend"},[i("span",{class:"jlbinding"},"EnzymeCore.compiler_job_from_backend")],-1)),e[171]||(e[171]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[173]||(e[173]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compiler_job_from_backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KernelAbstractions.Backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUCompiler.CompilerJob</span></span></code></pre></div><p>Returns a GPUCompiler CompilerJob from a backend as specified by the first argument to the function.</p><p>For example, in CUDA one would do:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EnzymeCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compiler_job_from_backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CUDABackend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@nospecialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@nospecialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPUCompiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F, TT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPUCompiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompilerJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mi, CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compiler_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[172]||(e[172]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L592-L605",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ee,[i("summary",null,[e[174]||(e[174]=i("a",{id:"EnzymeCore.ignore_derivatives-Tuple{T} where T",href:"#EnzymeCore.ignore_derivatives-Tuple{T} where T"},[i("span",{class:"jlbinding"},"EnzymeCore.ignore_derivatives")],-1)),e[175]||(e[175]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[177]||(e[177]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ignore_derivatives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Behaves like the <code>identity</code> function, but disconnects the &quot;shadow&quot; associated with <code>x</code>. This has the effect of preventing any derivatives from being propagated through <code>x</code>.</p><div class="tip custom-block"><p class="custom-block-title">Enzyme 0.13.74</p><p>Support for <code>ignore_derivatives</code> was added in Enzyme 0.13.74.</p></div>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[176]||(e[176]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L623-L632",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ie,[i("summary",null,[e[178]||(e[178]=i("a",{id:"EnzymeCore.make_zero",href:"#EnzymeCore.make_zero"},[i("span",{class:"jlbinding"},"EnzymeCore.make_zero")],-1)),e[179]||(e[179]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[181]||(e[181]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, seen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, prev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{copy_if_inactive}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Recursively make a zero&#39;d copy of the value <code>prev</code> of type <code>T</code>. The argument <code>copy_if_inactive</code> specifies what to do if the type <code>T</code> is guaranteed to be inactive, use the primal (the default) or still copy the value.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[180]||(e[180]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L553-L558",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",se,[i("summary",null,[e[182]||(e[182]=i("a",{id:"EnzymeCore.make_zero!",href:"#EnzymeCore.make_zero!"},[i("span",{class:"jlbinding"},"EnzymeCore.make_zero!")],-1)),e[183]||(e[183]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[185]||(e[185]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_zero!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, seen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdSet{Any}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Nothing</span></span></code></pre></div><p>Recursively set a variables differentiable fields to zero.</p><div class="tip custom-block"><p class="custom-block-title">Warn</p><p>Only applicable for mutable types <code>T</code>.</p></div>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[184]||(e[184]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L561-L568",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",te,[i("summary",null,[e[186]||(e[186]=i("a",{id:"EnzymeCore.make_zero-Union{Tuple{copy_if_inactive}, Tuple{T}, Tuple{T, Val{copy_if_inactive}}} where {T, copy_if_inactive}",href:"#EnzymeCore.make_zero-Union{Tuple{copy_if_inactive}, Tuple{T}, Tuple{T, Val{copy_if_inactive}}} where {T, copy_if_inactive}"},[i("span",{class:"jlbinding"},"EnzymeCore.make_zero")],-1)),e[187]||(e[187]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[189]||(e[189]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Helper function to recursively make zero.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[188]||(e[188]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L581-L585",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ne,[i("summary",null,[e[190]||(e[190]=i("a",{id:"EnzymeCore.needs_primal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal}}, Tuple{ReturnPrimal}} where ReturnPrimal",href:"#EnzymeCore.needs_primal-Union{Tuple{EnzymeCore.ReverseMode{ReturnPrimal}}, Tuple{ReturnPrimal}} where ReturnPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.needs_primal")],-1)),e[191]||(e[191]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[193]||(e[193]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{Mode}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns <code>true</code> if the mode needs the primal value, otherwise <code>false</code>.</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[192]||(e[192]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L385-L390",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ae,[i("summary",null,[e[194]||(e[194]=i("a",{id:"EnzymeCore.remake_zero!",href:"#EnzymeCore.remake_zero!"},[i("span",{class:"jlbinding"},"EnzymeCore.remake_zero!")],-1)),e[195]||(e[195]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[197]||(e[197]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remake_zero!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, seen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdSet{Any}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Nothing</span></span></code></pre></div><p>Recursively set a variables differentiable fields to zero.</p><div class="tip custom-block"><p class="custom-block-title">Warn</p><p>This assumes that the input value was previously generated by make_zero. Otherwise, this may not zero the immutable fields of a struct.</p></div>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[196]||(e[196]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L571-L578",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",le,[i("summary",null,[e[198]||(e[198]=i("a",{id:"EnzymeCore.runtime_activity-Union{Tuple{EnzymeCore.Mode{<:Any, <:Any, RuntimeActivity}}, Tuple{RuntimeActivity}} where RuntimeActivity",href:"#EnzymeCore.runtime_activity-Union{Tuple{EnzymeCore.Mode{<:Any, <:Any, RuntimeActivity}}, Tuple{RuntimeActivity}} where RuntimeActivity"},[i("span",{class:"jlbinding"},"EnzymeCore.runtime_activity")],-1)),e[199]||(e[199]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[201]||(e[201]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runtime_activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Mode}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns whether the given mode has runtime activity set. For a deeper explanation of what strong zero is see the <a href="./@ref faq-runtime-activity">FAQ</a></p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[200]||(e[200]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L274-L279",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",re,[i("summary",null,[e[202]||(e[202]=i("a",{id:"EnzymeCore.set_abi",href:"#EnzymeCore.set_abi"},[i("span",{class:"jlbinding"},"EnzymeCore.set_abi")],-1)),e[203]||(e[203]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[205]||(e[205]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_abi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{ABI}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode with its <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.ABI"><code>ABI</code></a> set to the chosen type.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[204]||(e[204]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L692-L696",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",oe,[i("summary",null,[e[206]||(e[206]=i("a",{id:"EnzymeCore.set_err_if_func_written",href:"#EnzymeCore.set_err_if_func_written"},[i("span",{class:"jlbinding"},"EnzymeCore.set_err_if_func_written")],-1)),e[207]||(e[207]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[209]||(e[209]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_err_if_func_written</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode which throws an error for any attempt to write into an unannotated function object.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[208]||(e[208]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L644-L648",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",pe,[i("summary",null,[e[210]||(e[210]=i("a",{id:"EnzymeCore.set_runtime_activity",href:"#EnzymeCore.set_runtime_activity"},[i("span",{class:"jlbinding"},"EnzymeCore.set_runtime_activity")],-1)),e[211]||(e[211]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[213]||(e[213]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_runtime_activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_runtime_activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, activity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_runtime_activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{FwdConfig,RevConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_runtime_activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, prev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode where runtime activity analysis is activated / set to the desired value. See the <a href="./@ref faq-runtime-activity">FAQ</a> for more information.</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[212]||(e[212]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L658-L665",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",de,[i("summary",null,[e[214]||(e[214]=i("a",{id:"EnzymeCore.set_strong_zero",href:"#EnzymeCore.set_strong_zero"},[i("span",{class:"jlbinding"},"EnzymeCore.set_strong_zero")],-1)),e[215]||(e[215]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[217]||(e[217]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, activity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{FwdConfig,RevConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, prev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a new mode where strong zero is activated / set to the desired value. See the <a href="./@ref faq-strong-zero">FAQ</a> for more information.</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[216]||(e[216]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L675-L682",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",he,[i("summary",null,[e[218]||(e[218]=i("a",{id:"EnzymeCore.strong_zero-Union{Tuple{EnzymeCore.Mode{<:Any, <:Any, <:Any, StrongZero}}, Tuple{StrongZero}} where StrongZero",href:"#EnzymeCore.strong_zero-Union{Tuple{EnzymeCore.Mode{<:Any, <:Any, <:Any, StrongZero}}, Tuple{StrongZero}} where StrongZero"},[i("span",{class:"jlbinding"},"EnzymeCore.strong_zero")],-1)),e[219]||(e[219]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[221]||(e[221]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">strong_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Mode}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns whether the given mode has strong zero set. For a deeper explanation of what strong zero is see the <a href="./@ref faq-strong-zero">FAQ</a></p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[220]||(e[220]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L283-L288",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ue,[i("summary",null,[e[222]||(e[222]=i("a",{id:"EnzymeCore.within_autodiff-Tuple{}",href:"#EnzymeCore.within_autodiff-Tuple{}"},[i("span",{class:"jlbinding"},"EnzymeCore.within_autodiff")],-1)),e[223]||(e[223]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[225]||(e[225]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within_autodiff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns true if within autodiff, otherwise false.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[224]||(e[224]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/EnzymeCore.jl#L614-L618",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ke,[i("summary",null,[e[226]||(e[226]=i("a",{id:"EnzymeCore.EnzymeRules.AugmentedReturn",href:"#EnzymeCore.EnzymeRules.AugmentedReturn"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.AugmentedReturn")],-1)),e[227]||(e[227]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[229]||(e[229]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AugmentedReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(primal, shadow, tape)</span></span></code></pre></div><p>Augment the primal return value of a function with its shadow, as well as any additional information needed to correctly compute the reverse pass, stored in <code>tape</code>.</p><p>Unless specified by the config that a variable is not overwritten, rules must assume any arrays/data structures/etc are overwritten between the forward and the reverse pass. Any floats or variables passed by value are always preserved as is (as are the arrays themselves, just not necessarily the values in the array).</p><p>See also <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.EnzymeRules.augmented_primal"><code>augmented_primal</code></a>.</p>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[228]||(e[228]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L134-L145",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ye,[i("summary",null,[e[230]||(e[230]=i("a",{id:"EnzymeCore.EnzymeRules.FwdConfig",href:"#EnzymeCore.EnzymeRules.FwdConfig"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.FwdConfig")],-1)),e[231]||(e[231]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[233]||(e[233]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FwdConfig{NeedsPrimal, NeedsShadow, Width, RuntimeActivity, StrongZero}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FwdConfigWidth{Width} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FwdConfig{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Width}</span></span></code></pre></div><p>Configuration type to dispatch on in custom forward rules (see <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.EnzymeRules.forward"><code>forward</code></a>.</p><ul><li><p><code>NeedsPrimal</code> and <code>NeedsShadow</code>: boolean values specifying whether the primal and shadow (resp.) should be returned.</p></li><li><p><code>Width</code>: an integer that specifies the number of adjoints/shadows simultaneously being propagated.</p></li><li><p><code>RuntimeActivity</code>: whether runtime activity is enabled. See the <a href="./@ref faq-runtime-activity">FAQ</a> for more information.</p></li><li><p><code>StrongZero</code>: whether strong zero is enabled. See the <a href="./@ref faq-strong-zero">FAQ</a> for more information.</p></li></ul><p>Getters for the type parameters are provided by <code>needs_primal</code>, <code>needs_shadow</code>, <code>width</code> <code>runtime_activity</code>, and <code>strong_zero</code>.</p>`,4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[232]||(e[232]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L25-L36",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ce,[i("summary",null,[e[234]||(e[234]=i("a",{id:"EnzymeCore.EnzymeRules.RevConfig",href:"#EnzymeCore.EnzymeRules.RevConfig"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.RevConfig")],-1)),e[235]||(e[235]=n()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[237]||(e[237]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RevConfig{NeedsPrimal, NeedsShadow, Width, Overwritten, RuntimeActivity, StrongZero}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RevConfigWidth{Width} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RevConfig{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Width}</span></span></code></pre></div><p>Configuration type to dispatch on in custom reverse rules (see <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.EnzymeRules.augmented_primal"><code>augmented_primal</code></a> and <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.EnzymeRules.reverse"><code>reverse</code></a>).</p><ul><li><p><code>NeedsPrimal</code> and <code>NeedsShadow</code>: boolean values specifying whether the primal and shadow (resp.) should be returned.</p></li><li><p><code>Width</code>: an integer that specifies the number of adjoints/shadows simultaneously being propagated.</p></li><li><p><code>Overwritten</code>: a tuple of booleans of whether each argument (including the function itself) is modified between the forward and reverse pass (true if potentially modified between).</p></li><li><p><code>RuntimeActivity</code>: whether runtime activity is enabled. See the <a href="./@ref faq-runtime-activity">FAQ</a> for more information.</p></li><li><p><code>StrongZero</code>: whether strong zero is enabled. See the <a href="./@ref faq-strong-zero">FAQ</a> for more information.</p></li></ul><p>Getters for the type parameters are provided by <code>needs_primal</code>, <code>needs_shadow</code>, <code>width</code>, <code>overwritten</code>, <code>runtime_activity</code>, and <code>strong_zero</code>.</p>`,4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[236]||(e[236]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L78-L91",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ee,[i("summary",null,[e[238]||(e[238]=i("a",{id:"EnzymeCore.EnzymeRules._constrain_and_name-Tuple{Expr}",href:"#EnzymeCore.EnzymeRules._constrain_and_name-Tuple{Expr}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules._constrain_and_name")],-1)),e[239]||(e[239]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[241]||(e[241]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_constrain_and_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _)</span></span></code></pre></div><p>Internal function.</p><p>Turn both <code>a</code> and <code>::constraint</code> into <code>a::Annotation{&lt;:constraint}</code> etc</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[240]||(e[240]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L60-L66",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",me,[i("summary",null,[e[242]||(e[242]=i("a",{id:"EnzymeCore.EnzymeRules._just_name-Tuple{Expr}",href:"#EnzymeCore.EnzymeRules._just_name-Tuple{Expr}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules._just_name")],-1)),e[243]||(e[243]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[245]||(e[245]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_just_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _)</span></span></code></pre></div><p>Internal function.</p><p>Extract <code>a</code> from <code>a::constraint</code>.</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[244]||(e[244]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L77-L83",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ge,[i("summary",null,[e[246]||(e[246]=i("a",{id:"EnzymeCore.EnzymeRules._normalize_scalarrules_macro_input-Tuple{Any, Any, Any}",href:"#EnzymeCore.EnzymeRules._normalize_scalarrules_macro_input-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules._normalize_scalarrules_macro_input")],-1)),e[247]||(e[247]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[249]||(e[249]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_normalize_scalarrules_macro_input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(call, maybe_setup, partials)</span></span></code></pre></div><p>Internal function.</p><p>returns (in order) the correctly escaped:</p><ul><li><p><code>call</code> with out any type constraints</p></li><li><p><code>setup_stmts</code>: the content of <code>@setup</code> or <code>[]</code> if that is not provided,</p></li><li><p><code>inputs</code>: with all args having the constraints removed from call, or defaulting to <code>Number</code></p></li><li><p><code>partials</code>: which are all <code>Expr{:tuple,...}</code></p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[248]||(e[248]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L111-L122",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",fe,[i("summary",null,[e[250]||(e[250]=i("a",{id:"EnzymeCore.EnzymeRules._unconstrain-Tuple{Symbol}",href:"#EnzymeCore.EnzymeRules._unconstrain-Tuple{Symbol}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules._unconstrain")],-1)),e[251]||(e[251]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[253]||(e[253]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_unconstrain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span></code></pre></div><p>Internal function.</p><p>Turn both <code>a</code> and <code>a::S</code> into <code>a</code></p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[252]||(e[252]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L45-L51",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ce,[i("summary",null,[e[254]||(e[254]=i("a",{id:"EnzymeCore.EnzymeRules.augmented_primal",href:"#EnzymeCore.EnzymeRules.augmented_primal"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.augmented_primal")],-1)),e[255]||(e[255]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[257]||(e[257]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">augmented_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation{typeof(f)}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Annotation}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Must return an <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.EnzymeRules.AugmentedReturn"><code>AugmentedReturn</code></a> type.</p><ul><li><p>The primal must be the same type of the original return if <code>needs_primal(config)</code>, otherwise nothing.</p></li><li><p>The shadow must be nothing if needs_shadow(config) is false. If width is 1, the shadow should be the same type of the original return. If the width is greater than 1, the shadow should be NTuple{original return, width}.</p></li><li><p>The tape can be any type (including Nothing) and is preserved for the reverse call.</p></li></ul>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[256]||(e[256]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L168-L176",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",be,[i("summary",null,[e[258]||(e[258]=i("a",{id:"EnzymeCore.EnzymeRules.forward",href:"#EnzymeCore.EnzymeRules.forward"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.forward")],-1)),e[259]||(e[259]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[261]||(e[261]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fwdconfig, func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation{typeof(f)}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Annotation}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate the forward derivative. The first argument is a <a href="/Reactant.jl/v0.2/api/internal#EnzymeCore.Duplicated">`FwdConfig](/api/internal#EnzymeCore.EnzymeRules.FwdConfig) object describing parameters of the differentiation. The second argument `func` is the callable for which the rule applies to. Either wrapped in a [`Const`](/api/internal#EnzymeCore.Const)), or a [`Duplicated`</a> if it is a closure. The third argument is the return type annotation, and all other arguments are the annotated function arguments.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[260]||(e[260]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L14-L22",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ve,[i("summary",null,[e[262]||(e[262]=i("a",{id:"EnzymeCore.EnzymeRules.inactive",href:"#EnzymeCore.EnzymeRules.inactive"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.inactive")],-1)),e[263]||(e[263]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[265]||(e[265]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f), args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Mark a particular function as always being inactive in both its return result and the function call itself.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[264]||(e[264]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L279-L283",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Te,[i("summary",null,[e[266]||(e[266]=i("a",{id:"EnzymeCore.EnzymeRules.inactive_noinl",href:"#EnzymeCore.EnzymeRules.inactive_noinl"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.inactive_noinl")],-1)),e[267]||(e[267]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[269]||(e[269]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inactive_noinl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f), args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Mark a particular function as always being inactive in both its return result and the function call itself, but do not prevent inlining of the function.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[268]||(e[268]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L293-L298",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_e,[i("summary",null,[e[270]||(e[270]=i("a",{id:"EnzymeCore.EnzymeRules.inactive_type-Tuple{Type}",href:"#EnzymeCore.EnzymeRules.inactive_type-Tuple{Type}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.inactive_type")],-1)),e[271]||(e[271]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[273]||(e[273]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inactive_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{Ty}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Mark a particular type <code>Ty</code> as always being inactive.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[272]||(e[272]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L323-L327",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Fe,[i("summary",null,[e[274]||(e[274]=i("a",{id:"EnzymeCore.EnzymeRules.multiply_fwd_into",href:"#EnzymeCore.EnzymeRules.multiply_fwd_into"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.multiply_fwd_into")],-1)),e[275]||(e[275]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[277]||(e[277]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiply_fwd_into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev, partial, dx)</span></span></code></pre></div><p>Internal function.</p><p>Multiply a partial derivative (df/dx) by its shadow input (dx) to form <code>df</code>.</p><p>Specifically, perform prev + partial * dx, returning the result or re-using prev&#39;s memory, where applicable.</p>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[276]||(e[276]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L89-L97",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ae,[i("summary",null,[e[278]||(e[278]=i("a",{id:"EnzymeCore.EnzymeRules.multiply_rev_into",href:"#EnzymeCore.EnzymeRules.multiply_rev_into"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.multiply_rev_into")],-1)),e[279]||(e[279]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[281]||(e[281]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiply_rev_into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev, partial, df)</span></span></code></pre></div><p>Internal function.</p><p>Multiply a partial derivative (df/dx) by its shadow input (df) to form <code>dx</code>.</p><p>Specifically, perform prev + conj(partial * conj(dx)), returning the result or re-using prev&#39;s memory, where applicable.</p>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[280]||(e[280]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L100-L108",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",je,[i("summary",null,[e[282]||(e[282]=i("a",{id:'EnzymeCore.EnzymeRules.needs_shadow-Union{Tuple{EnzymeCore.EnzymeRules.FwdConfigWidth{Width, var"#s9", NeedsShadow} where {var"#s9", Width}}, Tuple{NeedsShadow}} where NeedsShadow',href:'#EnzymeCore.EnzymeRules.needs_shadow-Union{Tuple{EnzymeCore.EnzymeRules.FwdConfigWidth{Width, var"#s9", NeedsShadow} where {var"#s9", Width}}, Tuple{NeedsShadow}} where NeedsShadow'},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.needs_shadow")],-1)),e[283]||(e[283]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[285]||(e[285]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FwdConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:FwdConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:RevConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Whether a custom rule should return the shadow (derivative) of the function result.</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[284]||(e[284]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L51-L58",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ze,[i("summary",null,[e[286]||(e[286]=i("a",{id:"EnzymeCore.EnzymeRules.noalias",href:"#EnzymeCore.EnzymeRules.noalias"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.noalias")],-1)),e[287]||(e[287]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[289]||(e[289]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">noalias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f), args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Mark a particular function as always being a fresh allocation which does not alias any other accessible memory.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[288]||(e[288]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L308-L313",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Re,[i("summary",null,[e[290]||(e[290]=i("a",{id:'EnzymeCore.EnzymeRules.overwritten-Union{Tuple{EnzymeCore.EnzymeRules.RevConfigWidth{<:Any, var"#s7", var"#s3", Overwritten} where {var"#s7", var"#s3"}}, Tuple{Overwritten}} where Overwritten',href:'#EnzymeCore.EnzymeRules.overwritten-Union{Tuple{EnzymeCore.EnzymeRules.RevConfigWidth{<:Any, var"#s7", var"#s3", Overwritten} where {var"#s7", var"#s3"}}, Tuple{Overwritten}} where Overwritten'},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.overwritten")],-1)),e[291]||(e[291]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[293]||(e[293]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overwritten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overwritten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:RevConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A tuple of booleans for each argument (including the function itself), indicating if it is modified between the forward and reverse pass (<code>true</code> if potentially modified between).</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[292]||(e[292]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L102-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Se,[i("summary",null,[e[294]||(e[294]=i("a",{id:"EnzymeCore.EnzymeRules.primal_type-Union{Tuple{RT}, Tuple{EnzymeCore.EnzymeRules.FwdConfig, Type{<:Annotation{RT}}}} where RT",href:"#EnzymeCore.EnzymeRules.primal_type-Union{Tuple{RT}, Tuple{EnzymeCore.EnzymeRules.FwdConfig, Type{<:Annotation{RT}}}} where RT"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.primal_type")],-1)),e[295]||(e[295]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[297]||(e[297]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">primal_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FwdConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Annotation{RT}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">primal_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Annotation{RT}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the exepcted primal return type given a reverse mode config and return activity</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[296]||(e[296]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L116-L121",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",we,[i("summary",null,[e[298]||(e[298]=i("a",{id:"EnzymeCore.EnzymeRules.reverse",href:"#EnzymeCore.EnzymeRules.reverse"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.reverse")],-1)),e[299]||(e[299]=n()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[301]||(e[301]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation{typeof(f)}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tape, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation{typeof(f)}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), tape, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Annotation...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Takes gradient of derivative, activity annotation, and tape. If there is an active return dret is passed as Active{T} with the derivative of the active return val. Otherwise dret is passed as Type{Duplicated{T}}, etc.</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[300]||(e[300]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L179-L185",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ie,[i("summary",null,[e[302]||(e[302]=i("a",{id:"EnzymeCore.EnzymeRules.shadow_type-Union{Tuple{RT}, Tuple{EnzymeCore.EnzymeRules.FwdConfig, Type{<:Annotation{RT}}}} where RT",href:"#EnzymeCore.EnzymeRules.shadow_type-Union{Tuple{RT}, Tuple{EnzymeCore.EnzymeRules.FwdConfig, Type{<:Annotation{RT}}}} where RT"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.shadow_type")],-1)),e[303]||(e[303]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[305]||(e[305]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shadow_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FwdConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Annotation{RT}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shadow_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:Annotation{RT}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the exepcted shadow return type given a reverse mode config and return activity</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[304]||(e[304]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L125-L130",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Be,[i("summary",null,[e[306]||(e[306]=i("a",{id:"EnzymeCore.EnzymeRules.uses_symbol-Tuple{Any, Symbol}",href:"#EnzymeCore.EnzymeRules.uses_symbol-Tuple{Any, Symbol}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.uses_symbol")],-1)),e[307]||(e[307]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[309]||(e[309]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uses_symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Internal function.</p><p>Checks if <code>a</code> contains a use of the symbol <code>b</code>.</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[308]||(e[308]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L20-L26",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",De,[i("summary",null,[e[310]||(e[310]=i("a",{id:"EnzymeCore.EnzymeRules.width-Union{Tuple{EnzymeCore.EnzymeRules.FwdConfigWidth{Width}}, Tuple{Width}} where Width",href:"#EnzymeCore.EnzymeRules.width-Union{Tuple{EnzymeCore.EnzymeRules.FwdConfigWidth{Width}}, Tuple{Width}} where Width"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.width")],-1)),e[311]||(e[311]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[313]||(e[313]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FwdConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:FwdConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:RevConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get the size of a batch</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[312]||(e[312]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L63-L70",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",xe,[i("summary",null,[e[314]||(e[314]=i("a",{id:"EnzymeCore.needs_primal-Union{Tuple{EnzymeCore.EnzymeRules.FwdConfigWidth{Width, NeedsPrimal, NeedsShadow} where {NeedsShadow, Width}}, Tuple{NeedsPrimal}} where NeedsPrimal",href:"#EnzymeCore.needs_primal-Union{Tuple{EnzymeCore.EnzymeRules.FwdConfigWidth{Width, NeedsPrimal, NeedsShadow} where {NeedsShadow, Width}}, Tuple{NeedsPrimal}} where NeedsPrimal"},[i("span",{class:"jlbinding"},"EnzymeCore.needs_primal")],-1)),e[315]||(e[315]=n()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[317]||(e[317]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FwdConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:FwdConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">needs_primal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:RevConfig}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Whether a custom rule should return the original result of the function.</p>`,2)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[316]||(e[316]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/rules.jl#L40-L47",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Pe,[i("summary",null,[e[318]||(e[318]=i("a",{id:"EnzymeCore.EnzymeRules.@easy_rule-Tuple{Any, Any, Vararg{Any}}",href:"#EnzymeCore.EnzymeRules.@easy_rule-Tuple{Any, Any, Vararg{Any}}"},[i("span",{class:"jlbinding"},"EnzymeCore.EnzymeRules.@easy_rule")],-1)),e[319]||(e[319]=n()),t(s,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),e[321]||(e[321]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@easy_rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x₁</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x₂</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             @setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(statement₁, statement₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (∂f₁_∂x₁, ∂f₁_∂x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (∂f₂_∂x₁, ∂f₂_∂x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A convenience macro that generates simple forward and reverse Enzyme rules using the provided partial derivatives.</p><p>The <code>easy_rule</code> macro assumes that the function <code>f</code> does not mutate any of its arguments, does not read from global data, and no output aliases with any other output nor input.</p><p>The <code>easy_rule</code> macro only works if inputs are scalars or arrays of scalars, and the result is a scalar, array, or tuple thereof.</p><p>For each output result (a single output is assumed if a scalar is returned), a tuple of partial derivatives is expected. Specifically, each tuple contains one entry for each argument to <code>f</code>. This entry should contain the jacobian <code>∂fi_∂xj</code> where <code>i</code> is the number of the output, and <code>j</code> is the number of the input. If both input <code>i</code> and output <code>j</code> are scalars, <code>∂fi_∂xj</code> should be a scalar. If at least one of these are an abstractarray, <code>∂fi_∂xj</code> should be a tensor of size <code>(size(output[j])..., size(input[i])...)</code>, where scalars are considered zero-dimensional.</p><p>The arguments to <code>f</code> can either have no type constraints, or specific type constraints.</p><p>The result of <code>f(x₁, x₂, ...)</code> is automatically bound to <code>Ω</code>. This allows the primal result to be referenced (as <code>Ω</code>) within the derivative/setup expressions.</p><p>At present this does not support defining for closures/functors.</p><p>The <code>@setup</code> argument can be elided if no setup code is need. In other words:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@easy_rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x₁, x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (∂f₁_∂x₁, ∂f₁_∂x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (∂f₂_∂x₁, ∂f₂_∂x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>is equivalent to:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@easy_rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x₁, x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             @setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (∂f₁_∂x₁, ∂f₁_∂x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (∂f₂_∂x₁, ∂f₂_∂x₂, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>If a specific argument has no partial derivative, then all corresponding argument values can instead be marked <code>@Constant</code>. For example, consider the case where <code>config</code> has no derivative.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@easy_rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             @setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@Constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ∂f₁_∂x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@Constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ∂f₂_∂x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,14)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[320]||(e[320]=[i("a",{href:"https://github.com/EnzymeAD/Enzyme.jl/blob/v0.8.15/src/easyrules.jl#L670-L722",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const He=p(h,[["render",Me]]);export{Ze as __pageData,He as default};
