import{_ as l,C as h,c as p,o as r,j as i,a,a2 as e,G as n}from"./chunks/framework.BTrPlZk6.js";const f=JSON.parse('{"title":"Reactant.Ops API","description":"","frontmatter":{},"headers":[],"relativePath":"api/ops.md","filePath":"api/ops.md","lastUpdated":null}'),k={name:"api/ops.md"},d={class:"jldocstring custom-block"},o={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"};function T(m,s,_,C,R,b){const t=h("Badge");return r(),p("div",null,[s[24]||(s[24]=i("h1",{id:"Reactant.Ops-API",tabindex:"-1"},[i("code",null,"Reactant.Ops"),a(" API "),i("a",{class:"header-anchor",href:"#Reactant.Ops-API","aria-label":'Permalink to "`Reactant.Ops` API {#Reactant.Ops-API}"'},"â€‹")],-1)),s[25]||(s[25]=i("p",null,[i("code",null,"Reactant.Ops"),a(" module provides a high-level API to construct MLIR operations without having to directly interact with the different dialects.")],-1)),s[26]||(s[26]=i("p",null,[a("Currently we haven't documented all the functions in "),i("code",null,"Reactant.Ops"),a(".")],-1)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Reactant.Ops.gather_getindex-Union{Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}}} where {T, N}",href:"#Reactant.Ops.gather_getindex-Union{Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}}} where {T, N}"},[i("span",{class:"jlbinding"},"Reactant.Ops.gather_getindex")],-1)),s[1]||(s[1]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=e("",3))]),i("details",o,[i("summary",null,[s[3]||(s[3]=i("a",{id:"Reactant.Ops.hlo_call-Tuple{Any, Vararg{Any}}",href:"#Reactant.Ops.hlo_call-Tuple{Any, Vararg{Any}}"},[i("span",{class:"jlbinding"},"Reactant.Ops.hlo_call")],-1)),s[4]||(s[4]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=e("",4))]),i("details",E,[i("summary",null,[s[6]||(s[6]=i("a",{id:"Reactant.Ops.mesh-Tuple{Reactant.Sharding.Mesh}",href:"#Reactant.Ops.mesh-Tuple{Reactant.Sharding.Mesh}"},[i("span",{class:"jlbinding"},"Reactant.Ops.mesh")],-1)),s[7]||(s[7]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=e("",8))]),i("details",c,[i("summary",null,[s[9]||(s[9]=i("a",{id:"Reactant.Ops.randexp-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T",href:"#Reactant.Ops.randexp-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T"},[i("span",{class:"jlbinding"},"Reactant.Ops.randexp")],-1)),s[10]||(s[10]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=e("",6))]),i("details",g,[i("summary",null,[s[12]||(s[12]=i("a",{id:"Reactant.Ops.randn-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T",href:"#Reactant.Ops.randn-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T"},[i("span",{class:"jlbinding"},"Reactant.Ops.randn")],-1)),s[13]||(s[13]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=e("",6))]),i("details",y,[i("summary",null,[s[15]||(s[15]=i("a",{id:"Reactant.Ops.rng_bit_generator-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T<:Integer",href:"#Reactant.Ops.rng_bit_generator-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T<:Integer"},[i("span",{class:"jlbinding"},"Reactant.Ops.rng_bit_generator")],-1)),s[16]||(s[16]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[17]||(s[17]=e("",6))]),i("details",u,[i("summary",null,[s[18]||(s[18]=i("a",{id:"Reactant.Ops.scatter_setindex-Union{Tuple{T2}, Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}, Reactant.TracedRArray{T2, 1}}} where {T, N, T2}",href:"#Reactant.Ops.scatter_setindex-Union{Tuple{T2}, Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}, Reactant.TracedRArray{T2, 1}}} where {T, N, T2}"},[i("span",{class:"jlbinding"},"Reactant.Ops.scatter_setindex")],-1)),s[19]||(s[19]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[20]||(s[20]=e("",3))]),i("details",F,[i("summary",null,[s[21]||(s[21]=i("a",{id:"Reactant.Ops.sharding_constraint-Tuple{Union{Number, AbstractArray}, Reactant.Sharding.AbstractSharding}",href:"#Reactant.Ops.sharding_constraint-Tuple{Union{Number, AbstractArray}, Reactant.Sharding.AbstractSharding}"},[i("span",{class:"jlbinding"},"Reactant.Ops.sharding_constraint")],-1)),s[22]||(s[22]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=e("",3))])])}const I=l(k,[["render",T]]);export{f as __pageData,I as default};
