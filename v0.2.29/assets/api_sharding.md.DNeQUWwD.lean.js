import{_ as i,C as n,c as r,o as d,j as s,a as e,a2 as l,G as h}from"./chunks/framework.Cbi_LnTw.js";const f=JSON.parse('{"title":"Sharding API","description":"","frontmatter":{},"headers":[],"relativePath":"api/sharding.md","filePath":"api/sharding.md","lastUpdated":null}'),o={name:"api/sharding.md"},p={class:"jldocstring custom-block"};function g(c,a,k,u,m,S){const t=n("Badge");return d(),r("div",null,[a[3]||(a[3]=s("h1",{id:"Sharding-API",tabindex:"-1"},[e("Sharding API "),s("a",{class:"header-anchor",href:"#Sharding-API","aria-label":'Permalink to "Sharding API {#Sharding-API}"'},"â€‹")],-1)),a[4]||(a[4]=s("p",null,[s("code",null,"Reactant.Sharding"),e(" module provides a high-level API to construct MLIR operations with support for sharding.")],-1)),a[5]||(a[5]=s("p",null,[e("Currently we haven't documented all the functions in "),s("code",null,"Reactant.Sharding"),e(".")],-1)),s("details",p,[s("summary",null,[a[0]||(a[0]=s("a",{id:"Reactant.Sharding.is_sharded-Tuple{Reactant.Sharding.NoSharding}",href:"#Reactant.Sharding.is_sharded-Tuple{Reactant.Sharding.NoSharding}"},[s("span",{class:"jlbinding"},"Reactant.Sharding.is_sharded")],-1)),a[1]||(a[1]=e()),h(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),a[2]||(a[2]=l("",3))])])}const b=i(o,[["render",g]]);export{f as __pageData,b as default};
