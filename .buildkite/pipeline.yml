steps:
  - label: "CUDA Julia v{{matrix.version}} -- {{matrix.group}}"
    matrix:
      setup:
        version:
          - "1.10"
        group:
          - core
          - neural_networks
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.version}}"
      - JuliaCI/julia-test#v1:
          test_args: "--gpu"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - ext
    agents:
      queue: "juliagpu"
      cuda: "*"
    env:
      REACTANT_TEST_GROUP: "{{matrix.group}}"
    if: build.message !~ /\[skip tests\]/
    timeout_in_minutes: 60

  - group: ":racehorse: Benchmarks"
    steps:
      - label: "CPU: Run Benchmarks"
        plugins:
          - JuliaCI/julia#v1:
              version: "1"
        command: |
          julia --project=benchmark -e 'println("--- :julia: Instantiating project")
              using Pkg
              Pkg.develop([PackageSpec(path=pwd())])'

          julia --project=benchmark -e 'println("--- :julia: Run Benchmarks")
              include("benchmark/runbenchmarks.jl")'
        artifact_paths:
          - "benchmark/results/*"
        agents:
          # Models are quite large so we need a decent sized machine. Don't tell Chris we
          # are stealing SciMLBenchmarks machine :P
          queue: "juliaecosystem"
          sandbox_capable: true
          exclusive: true
          arch: "x86_64"
        env:
          BENCHMARK_GROUP: CPU
          JULIA_NUM_THREADS: "auto"
        timeout_in_minutes: 120

      - label: "CUDA: Run Benchmarks"
        plugins:
          - JuliaCI/julia#v1:
              version: "1"
        command: |
          julia --project=benchmark -e 'println("--- :julia: Instantiating project")
              using Pkg
              Pkg.develop([PackageSpec(path=pwd())])'

          julia --project=benchmark -e 'println("--- :julia: Run Benchmarks")
              include("benchmark/runbenchmarks.jl")'
        artifact_paths:
          - "benchmark/results/*"
        agents:
          queue: "benchmark"
          gpu: "rtx4070"
          cuda: "*"
        env:
          BENCHMARK_GROUP: CUDA
          JULIA_NUM_THREADS: "auto"
        timeout_in_minutes: 120

      - wait: ~
        continue_on_failure: true

      - label: "Combine benchmarks"
        plugins:
          - JuliaCI/julia#v1:
              version: "1"
        command: |
          buildkite-agent artifact download "benchmark/results/*" .

          julia -e 'println("--- :julia: Instantiating project")
              using Pkg
              Pkg.add("BenchmarkTools")

              println("--- :julia: Combining Benchmarks")
              include("benchmark/aggregate.jl")'
        artifact_paths:
          - "benchmark/results/combinedbenchmarks.json"
        agents:
          queue: "juliagpu"
        timeout_in_minutes: 10

  # - label: "AMDGPU Julia v{{matrix.version}}"
  #   matrix:
  #     setup:
  #       version:
  #         - "1.10"
  #   plugins:
  #     - JuliaCI/julia#v1:
  #         version: "{{matrix.version}}"
  #     - JuliaCI/julia-test#v1:
  #         test_args: "--gpu"
  #     - JuliaCI/julia-coverage#v1:
  #         codecov: true
  #         dirs:
  #           - src
  #           - ext
  #   agents:
  #     queue: "juliagpu"
  #     rocm: "*"
  #   if: build.message !~ /\[skip tests\]/
  #   timeout_in_minutes: 60

  # - label: "Metal Julia v{{matrix.version}}"
  #   matrix:
  #     setup:
  #       version:
  #         - "1.8"
  #         - "1.9"
  #   plugins:
  #     - JuliaCI/julia#v1:
  #         version: "{{matrix.version}}"
  #   agents:
  #     queue: "juliaecosystem"
  #     os: "macos"
  #     arch: "aarch64"
  #   if: build.message !~ /\[skip tests\]/
  #   timeout_in_minutes: 60
  #   commands: |
  #     echo "--- Setup Julia packages"
  #     julia --color=yes -e '
  #         import Pkg
  #         Pkg.develop(; path = pwd())
  #         Pkg.develop(; path = joinpath(pwd(), "lib", "EnzymeCore"))
  #         Pkg.develop(; name = "Metal")' || exit 3

  #     echo "+++ Run tests"
  #     julia --color=yes test/metal.jl
  #   env:
  #     JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
