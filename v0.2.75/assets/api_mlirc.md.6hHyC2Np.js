import{_ as r,C as o,c as p,o as d,j as e,a as i,al as n,G as a,w as l}from"./chunks/framework.CobYm38T.js";const $f=JSON.parse('{"title":"Higher level API","description":"","frontmatter":{},"headers":[],"relativePath":"api/mlirc.md","filePath":"api/mlirc.md","lastUpdated":null}'),u={name:"api/mlirc.md"},c={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},Q={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},Z={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},tt={class:"jldocstring custom-block"},et={class:"jldocstring custom-block"},st={class:"jldocstring custom-block"},at={class:"jldocstring custom-block"},it={class:"jldocstring custom-block"},lt={class:"jldocstring custom-block"},nt={class:"jldocstring custom-block"},rt={class:"jldocstring custom-block"},ot={class:"jldocstring custom-block"},pt={class:"jldocstring custom-block"},dt={class:"jldocstring custom-block"},ut={class:"jldocstring custom-block"},ct={class:"jldocstring custom-block"},ht={class:"jldocstring custom-block"},bt={class:"jldocstring custom-block"},yt={class:"jldocstring custom-block"},gt={class:"jldocstring custom-block"},mt={class:"jldocstring custom-block"},kt={class:"jldocstring custom-block"},ft={class:"jldocstring custom-block"},Rt={class:"jldocstring custom-block"},It={class:"jldocstring custom-block"},Tt={class:"jldocstring custom-block"},At={class:"jldocstring custom-block"},jt={class:"jldocstring custom-block"},_t={class:"jldocstring custom-block"},Mt={class:"jldocstring custom-block"},Lt={class:"jldocstring custom-block"},Et={class:"jldocstring custom-block"},Ct={class:"jldocstring custom-block"},vt={class:"jldocstring custom-block"},Pt={class:"jldocstring custom-block"},xt={class:"jldocstring custom-block"},St={class:"jldocstring custom-block"},Dt={class:"jldocstring custom-block"},Ft={class:"jldocstring custom-block"},Vt={class:"jldocstring custom-block"},Ot={class:"jldocstring custom-block"},Bt={class:"jldocstring custom-block"},Nt={class:"jldocstring custom-block"},Gt={class:"jldocstring custom-block"},zt={class:"jldocstring custom-block"},wt={class:"jldocstring custom-block"},Ut={class:"jldocstring custom-block"},qt={class:"jldocstring custom-block"},Qt={class:"jldocstring custom-block"},Wt={class:"jldocstring custom-block"},Zt={class:"jldocstring custom-block"},Ht={class:"jldocstring custom-block"},Jt={class:"jldocstring custom-block"},Kt={class:"jldocstring custom-block"},$t={class:"jldocstring custom-block"},Xt={class:"jldocstring custom-block"},Yt={class:"jldocstring custom-block"},te={class:"jldocstring custom-block"},ee={class:"jldocstring custom-block"},se={class:"jldocstring custom-block"},ae={class:"jldocstring custom-block"},ie={class:"jldocstring custom-block"},le={class:"jldocstring custom-block"},ne={class:"jldocstring custom-block"},re={class:"jldocstring custom-block"},oe={class:"jldocstring custom-block"},pe={class:"jldocstring custom-block"},de={class:"jldocstring custom-block"},ue={class:"jldocstring custom-block"},ce={class:"jldocstring custom-block"},he={class:"jldocstring custom-block"},be={class:"jldocstring custom-block"},ye={class:"jldocstring custom-block"},ge={class:"jldocstring custom-block"},me={class:"jldocstring custom-block"},ke={class:"jldocstring custom-block"},fe={class:"jldocstring custom-block"},Re={class:"jldocstring custom-block"},Ie={class:"jldocstring custom-block"},Te={class:"jldocstring custom-block"},Ae={class:"jldocstring custom-block"},je={class:"jldocstring custom-block"},_e={class:"jldocstring custom-block"},Me={class:"jldocstring custom-block"},Le={class:"jldocstring custom-block"},Ee={class:"jldocstring custom-block"},Ce={class:"jldocstring custom-block"},ve={class:"jldocstring custom-block"},Pe={class:"jldocstring custom-block"},xe={class:"jldocstring custom-block"},Se={class:"jldocstring custom-block"},De={class:"jldocstring custom-block"},Fe={class:"jldocstring custom-block"},Ve={class:"jldocstring custom-block"},Oe={class:"jldocstring custom-block"},Be={class:"jldocstring custom-block"},Ne={class:"jldocstring custom-block"},Ge={class:"jldocstring custom-block"},ze={class:"jldocstring custom-block"},we={class:"jldocstring custom-block"},Ue={class:"jldocstring custom-block"},qe={class:"jldocstring custom-block"},Qe={class:"jldocstring custom-block"},We={class:"jldocstring custom-block"},Ze={class:"jldocstring custom-block"},He={class:"jldocstring custom-block"},Je={class:"jldocstring custom-block"},Ke={class:"jldocstring custom-block"},$e={class:"jldocstring custom-block"},Xe={class:"jldocstring custom-block"},Ye={class:"jldocstring custom-block"},ts={class:"jldocstring custom-block"},es={class:"jldocstring custom-block"},ss={class:"jldocstring custom-block"},as={class:"jldocstring custom-block"},is={class:"jldocstring custom-block"},ls={class:"jldocstring custom-block"},ns={class:"jldocstring custom-block"},rs={class:"jldocstring custom-block"},os={class:"jldocstring custom-block"},ps={class:"jldocstring custom-block"},ds={class:"jldocstring custom-block"},us={class:"jldocstring custom-block"},cs={class:"jldocstring custom-block"},hs={class:"jldocstring custom-block"},bs={class:"jldocstring custom-block"},ys={class:"jldocstring custom-block"},gs={class:"jldocstring custom-block"},ms={class:"jldocstring custom-block"},ks={class:"jldocstring custom-block"},fs={class:"jldocstring custom-block"},Rs={class:"jldocstring custom-block"},Is={class:"jldocstring custom-block"},Ts={class:"jldocstring custom-block"},As={class:"jldocstring custom-block"},js={class:"jldocstring custom-block"},_s={class:"jldocstring custom-block"},Ms={class:"jldocstring custom-block"},Ls={class:"jldocstring custom-block"},Es={class:"jldocstring custom-block"},Cs={class:"jldocstring custom-block"},vs={class:"jldocstring custom-block"},Ps={class:"jldocstring custom-block"},xs={class:"jldocstring custom-block"},Ss={class:"jldocstring custom-block"},Ds={class:"jldocstring custom-block"},Fs={class:"jldocstring custom-block"},Vs={class:"jldocstring custom-block"},Os={class:"jldocstring custom-block"},Bs={class:"jldocstring custom-block"},Ns={class:"jldocstring custom-block"},Gs={class:"jldocstring custom-block"},zs={class:"jldocstring custom-block"},ws={class:"jldocstring custom-block"},Us={class:"jldocstring custom-block"},qs={class:"jldocstring custom-block"},Qs={class:"jldocstring custom-block"},Ws={class:"jldocstring custom-block"},Zs={class:"jldocstring custom-block"},Hs={class:"jldocstring custom-block"},Js={class:"jldocstring custom-block"},Ks={class:"jldocstring custom-block"},$s={class:"jldocstring custom-block"},Xs={class:"jldocstring custom-block"},Ys={class:"jldocstring custom-block"},ta={class:"jldocstring custom-block"},ea={class:"jldocstring custom-block"},sa={class:"jldocstring custom-block"},aa={class:"jldocstring custom-block"},ia={class:"jldocstring custom-block"},la={class:"jldocstring custom-block"},na={class:"jldocstring custom-block"},ra={class:"jldocstring custom-block"},oa={class:"jldocstring custom-block"},pa={class:"jldocstring custom-block"},da={class:"jldocstring custom-block"},ua={class:"jldocstring custom-block"},ca={class:"jldocstring custom-block"},ha={class:"jldocstring custom-block"},ba={class:"jldocstring custom-block"},ya={class:"jldocstring custom-block"},ga={class:"jldocstring custom-block"},ma={class:"jldocstring custom-block"},ka={class:"jldocstring custom-block"},fa={class:"jldocstring custom-block"},Ra={class:"jldocstring custom-block"},Ia={class:"jldocstring custom-block"},Ta={class:"jldocstring custom-block"},Aa={class:"jldocstring custom-block"},ja={class:"jldocstring custom-block"},_a={class:"jldocstring custom-block"},Ma={class:"jldocstring custom-block"},La={class:"jldocstring custom-block"},Ea={class:"jldocstring custom-block"},Ca={class:"jldocstring custom-block"},va={class:"jldocstring custom-block"},Pa={class:"jldocstring custom-block"},xa={class:"jldocstring custom-block"},Sa={class:"jldocstring custom-block"},Da={class:"jldocstring custom-block"},Fa={class:"jldocstring custom-block"},Va={class:"jldocstring custom-block"},Oa={class:"jldocstring custom-block"},Ba={class:"jldocstring custom-block"},Na={class:"jldocstring custom-block"},Ga={class:"jldocstring custom-block"},za={class:"jldocstring custom-block"},wa={class:"jldocstring custom-block"},Ua={class:"jldocstring custom-block"},qa={class:"jldocstring custom-block"},Qa={class:"jldocstring custom-block"},Wa={class:"jldocstring custom-block"},Za={class:"jldocstring custom-block"},Ha={class:"jldocstring custom-block"},Ja={class:"jldocstring custom-block"},Ka={class:"jldocstring custom-block"},$a={class:"jldocstring custom-block"},Xa={class:"jldocstring custom-block"},Ya={class:"jldocstring custom-block"},ti={class:"jldocstring custom-block"},ei={class:"jldocstring custom-block"},si={class:"jldocstring custom-block"},ai={class:"jldocstring custom-block"},ii={class:"jldocstring custom-block"},li={class:"jldocstring custom-block"},ni={class:"jldocstring custom-block"},ri={class:"jldocstring custom-block"},oi={class:"jldocstring custom-block"},pi={class:"jldocstring custom-block"},di={class:"jldocstring custom-block"},ui={class:"jldocstring custom-block"},ci={class:"jldocstring custom-block"},hi={class:"jldocstring custom-block"},bi={class:"jldocstring custom-block"},yi={class:"jldocstring custom-block"},gi={class:"jldocstring custom-block"},mi={class:"jldocstring custom-block"},ki={class:"jldocstring custom-block"},fi={class:"jldocstring custom-block"},Ri={class:"jldocstring custom-block"},Ii={class:"jldocstring custom-block"},Ti={class:"jldocstring custom-block"},Ai={class:"jldocstring custom-block"},ji={class:"jldocstring custom-block"},_i={class:"jldocstring custom-block"},Mi={class:"jldocstring custom-block"},Li={class:"jldocstring custom-block"},Ei={class:"jldocstring custom-block"},Ci={class:"jldocstring custom-block"},vi={class:"jldocstring custom-block"},Pi={class:"jldocstring custom-block"},xi={class:"jldocstring custom-block"},Si={class:"jldocstring custom-block"},Di={class:"jldocstring custom-block"},Fi={class:"jldocstring custom-block"},Vi={class:"jldocstring custom-block"},Oi={class:"jldocstring custom-block"},Bi={class:"jldocstring custom-block"},Ni={class:"jldocstring custom-block"},Gi={class:"jldocstring custom-block"},zi={class:"jldocstring custom-block"},wi={class:"jldocstring custom-block"},Ui={class:"jldocstring custom-block"},qi={class:"jldocstring custom-block"},Qi={class:"jldocstring custom-block"},Wi={class:"jldocstring custom-block"},Zi={class:"jldocstring custom-block"},Hi={class:"jldocstring custom-block"},Ji={class:"jldocstring custom-block"},Ki={class:"jldocstring custom-block"},$i={class:"jldocstring custom-block"},Xi={class:"jldocstring custom-block"},Yi={class:"jldocstring custom-block"},tl={class:"jldocstring custom-block"},el={class:"jldocstring custom-block"},sl={class:"jldocstring custom-block"},al={class:"jldocstring custom-block"},il={class:"jldocstring custom-block"},ll={class:"jldocstring custom-block"},nl={class:"jldocstring custom-block"},rl={class:"jldocstring custom-block"},ol={class:"jldocstring custom-block"},pl={class:"jldocstring custom-block"},dl={class:"jldocstring custom-block"},ul={class:"jldocstring custom-block"},cl={class:"jldocstring custom-block"},hl={class:"jldocstring custom-block"},bl={class:"jldocstring custom-block"},yl={class:"jldocstring custom-block"},gl={class:"jldocstring custom-block"},ml={class:"jldocstring custom-block"},kl={class:"jldocstring custom-block"},fl={class:"jldocstring custom-block"},Rl={class:"jldocstring custom-block"},Il={class:"jldocstring custom-block"},Tl={class:"jldocstring custom-block"},Al={class:"jldocstring custom-block"},jl={class:"jldocstring custom-block"},_l={class:"jldocstring custom-block"},Ml={class:"jldocstring custom-block"},Ll={class:"jldocstring custom-block"},El={class:"jldocstring custom-block"},Cl={class:"jldocstring custom-block"},vl={class:"jldocstring custom-block"},Pl={class:"jldocstring custom-block"},xl={class:"jldocstring custom-block"},Sl={class:"jldocstring custom-block"},Dl={class:"jldocstring custom-block"},Fl={class:"jldocstring custom-block"},Vl={class:"jldocstring custom-block"},Ol={class:"jldocstring custom-block"},Bl={class:"jldocstring custom-block"},Nl={class:"jldocstring custom-block"},Gl={class:"jldocstring custom-block"},zl={class:"jldocstring custom-block"},wl={class:"jldocstring custom-block"},Ul={class:"jldocstring custom-block"},ql={class:"jldocstring custom-block"},Ql={class:"jldocstring custom-block"},Wl={class:"jldocstring custom-block"},Zl={class:"jldocstring custom-block"},Hl={class:"jldocstring custom-block"},Jl={class:"jldocstring custom-block"},Kl={class:"jldocstring custom-block"},$l={class:"jldocstring custom-block"},Xl={class:"jldocstring custom-block"},Yl={class:"jldocstring custom-block"},tn={class:"jldocstring custom-block"},en={class:"jldocstring custom-block"},sn={class:"jldocstring custom-block"},an={class:"jldocstring custom-block"},ln={class:"jldocstring custom-block"},nn={class:"jldocstring custom-block"},rn={class:"jldocstring custom-block"},on={class:"jldocstring custom-block"},pn={class:"jldocstring custom-block"},dn={class:"jldocstring custom-block"},un={class:"jldocstring custom-block"},cn={class:"jldocstring custom-block"},hn={class:"jldocstring custom-block"},bn={class:"jldocstring custom-block"},yn={class:"jldocstring custom-block"},gn={class:"jldocstring custom-block"},mn={class:"jldocstring custom-block"},kn={class:"jldocstring custom-block"},fn={class:"jldocstring custom-block"},Rn={class:"jldocstring custom-block"},In={class:"jldocstring custom-block"},Tn={class:"jldocstring custom-block"},An={class:"jldocstring custom-block"},jn={class:"jldocstring custom-block"},_n={class:"jldocstring custom-block"},Mn={class:"jldocstring custom-block"},Ln={class:"jldocstring custom-block"},En={class:"jldocstring custom-block"},Cn={class:"jldocstring custom-block"},vn={class:"jldocstring custom-block"},Pn={class:"jldocstring custom-block"},xn={class:"jldocstring custom-block"},Sn={class:"jldocstring custom-block"},Dn={class:"jldocstring custom-block"},Fn={class:"jldocstring custom-block"},Vn={class:"jldocstring custom-block"},On={class:"jldocstring custom-block"},Bn={class:"jldocstring custom-block"},Nn={class:"jldocstring custom-block"},Gn={class:"jldocstring custom-block"},zn={class:"jldocstring custom-block"},wn={class:"jldocstring custom-block"},Un={class:"jldocstring custom-block"},qn={class:"jldocstring custom-block"},Qn={class:"jldocstring custom-block"},Wn={class:"jldocstring custom-block"},Zn={class:"jldocstring custom-block"},Hn={class:"jldocstring custom-block"},Jn={class:"jldocstring custom-block"},Kn={class:"jldocstring custom-block"},$n={class:"jldocstring custom-block"},Xn={class:"jldocstring custom-block"},Yn={class:"jldocstring custom-block"},tr={class:"jldocstring custom-block"},er={class:"jldocstring custom-block"},sr={class:"jldocstring custom-block"},ar={class:"jldocstring custom-block"},ir={class:"jldocstring custom-block"},lr={class:"jldocstring custom-block"},nr={class:"jldocstring custom-block"},rr={class:"jldocstring custom-block"},or={class:"jldocstring custom-block"},pr={class:"jldocstring custom-block"},dr={class:"jldocstring custom-block"},ur={class:"jldocstring custom-block"},cr={class:"jldocstring custom-block"},hr={class:"jldocstring custom-block"},br={class:"jldocstring custom-block"},yr={class:"jldocstring custom-block"},gr={class:"jldocstring custom-block"},mr={class:"jldocstring custom-block"},kr={class:"jldocstring custom-block"},fr={class:"jldocstring custom-block"},Rr={class:"jldocstring custom-block"},Ir={class:"jldocstring custom-block"},Tr={class:"jldocstring custom-block"},Ar={class:"jldocstring custom-block"},jr={class:"jldocstring custom-block"},_r={class:"jldocstring custom-block"},Mr={class:"jldocstring custom-block"},Lr={class:"jldocstring custom-block"},Er={class:"jldocstring custom-block"},Cr={class:"jldocstring custom-block"},vr={class:"jldocstring custom-block"},Pr={class:"jldocstring custom-block"},xr={class:"jldocstring custom-block"},Sr={class:"jldocstring custom-block"},Dr={class:"jldocstring custom-block"},Fr={class:"jldocstring custom-block"},Vr={class:"jldocstring custom-block"},Or={class:"jldocstring custom-block"},Br={class:"jldocstring custom-block"},Nr={class:"jldocstring custom-block"},Gr={class:"jldocstring custom-block"},zr={class:"jldocstring custom-block"},wr={class:"jldocstring custom-block"},Ur={class:"jldocstring custom-block"},qr={class:"jldocstring custom-block"},Qr={class:"jldocstring custom-block"},Wr={class:"jldocstring custom-block"},Zr={class:"jldocstring custom-block"},Hr={class:"jldocstring custom-block"},Jr={class:"jldocstring custom-block"},Kr={class:"jldocstring custom-block"},$r={class:"jldocstring custom-block"},Xr={class:"jldocstring custom-block"},Yr={class:"jldocstring custom-block"},to={class:"jldocstring custom-block"},eo={class:"jldocstring custom-block"},so={class:"jldocstring custom-block"},ao={class:"jldocstring custom-block"},io={class:"jldocstring custom-block"},lo={class:"jldocstring custom-block"},no={class:"jldocstring custom-block"},ro={class:"jldocstring custom-block"},oo={class:"jldocstring custom-block"},po={class:"jldocstring custom-block"},uo={class:"jldocstring custom-block"},co={class:"jldocstring custom-block"},ho={class:"jldocstring custom-block"},bo={class:"jldocstring custom-block"},yo={class:"jldocstring custom-block"},go={class:"jldocstring custom-block"},mo={class:"jldocstring custom-block"},ko={class:"jldocstring custom-block"},fo={class:"jldocstring custom-block"},Ro={class:"jldocstring custom-block"},Io={class:"jldocstring custom-block"},To={class:"jldocstring custom-block"},Ao={class:"jldocstring custom-block"},jo={class:"jldocstring custom-block"},_o={class:"jldocstring custom-block"},Mo={class:"jldocstring custom-block"},Lo={class:"jldocstring custom-block"},Eo={class:"jldocstring custom-block"},Co={class:"jldocstring custom-block"},vo={class:"jldocstring custom-block"},Po={class:"jldocstring custom-block"},xo={class:"jldocstring custom-block"},So={class:"jldocstring custom-block"},Do={class:"jldocstring custom-block"},Fo={class:"jldocstring custom-block"},Vo={class:"jldocstring custom-block"},Oo={class:"jldocstring custom-block"},Bo={class:"jldocstring custom-block"},No={class:"jldocstring custom-block"},Go={class:"jldocstring custom-block"},zo={class:"jldocstring custom-block"},wo={class:"jldocstring custom-block"},Uo={class:"jldocstring custom-block"},qo={class:"jldocstring custom-block"},Qo={class:"jldocstring custom-block"},Wo={class:"jldocstring custom-block"},Zo={class:"jldocstring custom-block"},Ho={class:"jldocstring custom-block"},Jo={class:"jldocstring custom-block"},Ko={class:"jldocstring custom-block"},$o={class:"jldocstring custom-block"},Xo={class:"jldocstring custom-block"},Yo={class:"jldocstring custom-block"},tp={class:"jldocstring custom-block"},ep={class:"jldocstring custom-block"},sp={class:"jldocstring custom-block"},ap={class:"jldocstring custom-block"},ip={class:"jldocstring custom-block"},lp={class:"jldocstring custom-block"},np={class:"jldocstring custom-block"},rp={class:"jldocstring custom-block"},op={class:"jldocstring custom-block"},pp={class:"jldocstring custom-block"},dp={class:"jldocstring custom-block"},up={class:"jldocstring custom-block"},cp={class:"jldocstring custom-block"},hp={class:"jldocstring custom-block"},bp={class:"jldocstring custom-block"},yp={class:"jldocstring custom-block"},gp={class:"jldocstring custom-block"},mp={class:"jldocstring custom-block"},kp={class:"jldocstring custom-block"},fp={class:"jldocstring custom-block"},Rp={class:"jldocstring custom-block"},Ip={class:"jldocstring custom-block"},Tp={class:"jldocstring custom-block"},Ap={class:"jldocstring custom-block"},jp={class:"jldocstring custom-block"},_p={class:"jldocstring custom-block"},Mp={class:"jldocstring custom-block"},Lp={class:"jldocstring custom-block"},Ep={class:"jldocstring custom-block"},Cp={class:"jldocstring custom-block"},vp={class:"jldocstring custom-block"},Pp={class:"jldocstring custom-block"},xp={class:"jldocstring custom-block"},Sp={class:"jldocstring custom-block"},Dp={class:"jldocstring custom-block"},Fp={class:"jldocstring custom-block"},Vp={class:"jldocstring custom-block"},Op={class:"jldocstring custom-block"},Bp={class:"jldocstring custom-block"},Np={class:"jldocstring custom-block"},Gp={class:"jldocstring custom-block"},zp={class:"jldocstring custom-block"},wp={class:"jldocstring custom-block"},Up={class:"jldocstring custom-block"},qp={class:"jldocstring custom-block"},Qp={class:"jldocstring custom-block"},Wp={class:"jldocstring custom-block"},Zp={class:"jldocstring custom-block"},Hp={class:"jldocstring custom-block"},Jp={class:"jldocstring custom-block"},Kp={class:"jldocstring custom-block"},$p={class:"jldocstring custom-block"},Xp={class:"jldocstring custom-block"},Yp={class:"jldocstring custom-block"},td={class:"jldocstring custom-block"},ed={class:"jldocstring custom-block"},sd={class:"jldocstring custom-block"},ad={class:"jldocstring custom-block"},id={class:"jldocstring custom-block"},ld={class:"jldocstring custom-block"},nd={class:"jldocstring custom-block"},rd={class:"jldocstring custom-block"},od={class:"jldocstring custom-block"},pd={class:"jldocstring custom-block"},dd={class:"jldocstring custom-block"},ud={class:"jldocstring custom-block"},cd={class:"jldocstring custom-block"},hd={class:"jldocstring custom-block"},bd={class:"jldocstring custom-block"},yd={class:"jldocstring custom-block"},gd={class:"jldocstring custom-block"},md={class:"jldocstring custom-block"},kd={class:"jldocstring custom-block"},fd={class:"jldocstring custom-block"},Rd={class:"jldocstring custom-block"},Id={class:"jldocstring custom-block"},Td={class:"jldocstring custom-block"},Ad={class:"jldocstring custom-block"},jd={class:"jldocstring custom-block"},_d={class:"jldocstring custom-block"},Md={class:"jldocstring custom-block"},Ld={class:"jldocstring custom-block"},Ed={class:"jldocstring custom-block"},Cd={class:"jldocstring custom-block"},vd={class:"jldocstring custom-block"},Pd={class:"jldocstring custom-block"},xd={class:"jldocstring custom-block"},Sd={class:"jldocstring custom-block"},Dd={class:"jldocstring custom-block"},Fd={class:"jldocstring custom-block"},Vd={class:"jldocstring custom-block"},Od={class:"jldocstring custom-block"},Bd={class:"jldocstring custom-block"},Nd={class:"jldocstring custom-block"},Gd={class:"jldocstring custom-block"},zd={class:"jldocstring custom-block"},wd={class:"jldocstring custom-block"},Ud={class:"jldocstring custom-block"},qd={class:"jldocstring custom-block"},Qd={class:"jldocstring custom-block"},Wd={class:"jldocstring custom-block"},Zd={class:"jldocstring custom-block"},Hd={class:"jldocstring custom-block"},Jd={class:"jldocstring custom-block"},Kd={class:"jldocstring custom-block"},$d={class:"jldocstring custom-block"},Xd={class:"jldocstring custom-block"},Yd={class:"jldocstring custom-block"},tu={class:"jldocstring custom-block"},eu={class:"jldocstring custom-block"},su={class:"jldocstring custom-block"},au={class:"jldocstring custom-block"},iu={class:"jldocstring custom-block"},lu={class:"jldocstring custom-block"},nu={class:"jldocstring custom-block"},ru={class:"jldocstring custom-block"},ou={class:"jldocstring custom-block"},pu={class:"jldocstring custom-block"},du={class:"jldocstring custom-block"},uu={class:"jldocstring custom-block"},cu={class:"jldocstring custom-block"},hu={class:"jldocstring custom-block"},bu={class:"jldocstring custom-block"},yu={class:"jldocstring custom-block"},gu={class:"jldocstring custom-block"},mu={class:"jldocstring custom-block"},ku={class:"jldocstring custom-block"},fu={class:"jldocstring custom-block"},Ru={class:"jldocstring custom-block"},Iu={class:"jldocstring custom-block"},Tu={class:"jldocstring custom-block"},Au={class:"jldocstring custom-block"},ju={class:"jldocstring custom-block"},_u={class:"jldocstring custom-block"},Mu={class:"jldocstring custom-block"},Lu={class:"jldocstring custom-block"},Eu={class:"jldocstring custom-block"},Cu={class:"jldocstring custom-block"},vu={class:"jldocstring custom-block"},Pu={class:"jldocstring custom-block"},xu={class:"jldocstring custom-block"},Su={class:"jldocstring custom-block"},Du={class:"jldocstring custom-block"},Fu={class:"jldocstring custom-block"},Vu={class:"jldocstring custom-block"},Ou={class:"jldocstring custom-block"},Bu={class:"jldocstring custom-block"},Nu={class:"jldocstring custom-block"},Gu={class:"jldocstring custom-block"},zu={class:"jldocstring custom-block"},wu={class:"jldocstring custom-block"},Uu={class:"jldocstring custom-block"},qu={class:"jldocstring custom-block"},Qu={class:"jldocstring custom-block"},Wu={class:"jldocstring custom-block"},Zu={class:"jldocstring custom-block"},Hu={class:"jldocstring custom-block"},Ju={class:"jldocstring custom-block"},Ku={class:"jldocstring custom-block"},$u={class:"jldocstring custom-block"},Xu={class:"jldocstring custom-block"},Yu={class:"jldocstring custom-block"},tc={class:"jldocstring custom-block"},ec={class:"jldocstring custom-block"},sc={class:"jldocstring custom-block"},ac={class:"jldocstring custom-block"},ic={class:"jldocstring custom-block"},lc={class:"jldocstring custom-block"},nc={class:"jldocstring custom-block"},rc={class:"jldocstring custom-block"},oc={class:"jldocstring custom-block"},pc={class:"jldocstring custom-block"},dc={class:"jldocstring custom-block"},uc={class:"jldocstring custom-block"},cc={class:"jldocstring custom-block"},hc={class:"jldocstring custom-block"},bc={class:"jldocstring custom-block"},yc={class:"jldocstring custom-block"},gc={class:"jldocstring custom-block"},mc={class:"jldocstring custom-block"},kc={class:"jldocstring custom-block"},fc={class:"jldocstring custom-block"},Rc={class:"jldocstring custom-block"},Ic={class:"jldocstring custom-block"},Tc={class:"jldocstring custom-block"},Ac={class:"jldocstring custom-block"},jc={class:"jldocstring custom-block"},_c={class:"jldocstring custom-block"},Mc={class:"jldocstring custom-block"},Lc={class:"jldocstring custom-block"},Ec={class:"jldocstring custom-block"},Cc={class:"jldocstring custom-block"},vc={class:"jldocstring custom-block"},Pc={class:"jldocstring custom-block"},xc={class:"jldocstring custom-block"},Sc={class:"jldocstring custom-block"},Dc={class:"jldocstring custom-block"},Fc={class:"jldocstring custom-block"},Vc={class:"jldocstring custom-block"},Oc={class:"jldocstring custom-block"},Bc={class:"jldocstring custom-block"},Nc={class:"jldocstring custom-block"},Gc={class:"jldocstring custom-block"},zc={class:"jldocstring custom-block"},wc={class:"jldocstring custom-block"},Uc={class:"jldocstring custom-block"},qc={class:"jldocstring custom-block"},Qc={class:"jldocstring custom-block"},Wc={class:"jldocstring custom-block"},Zc={class:"jldocstring custom-block"},Hc={class:"jldocstring custom-block"},Jc={class:"jldocstring custom-block"},Kc={class:"jldocstring custom-block"},$c={class:"jldocstring custom-block"},Xc={class:"jldocstring custom-block"},Yc={class:"jldocstring custom-block"},th={class:"jldocstring custom-block"},eh={class:"jldocstring custom-block"},sh={class:"jldocstring custom-block"},ah={class:"jldocstring custom-block"},ih={class:"jldocstring custom-block"},lh={class:"jldocstring custom-block"},nh={class:"jldocstring custom-block"},rh={class:"jldocstring custom-block"},oh={class:"jldocstring custom-block"},ph={class:"jldocstring custom-block"},dh={class:"jldocstring custom-block"},uh={class:"jldocstring custom-block"},ch={class:"jldocstring custom-block"},hh={class:"jldocstring custom-block"},bh={class:"jldocstring custom-block"},yh={class:"jldocstring custom-block"},gh={class:"jldocstring custom-block"},mh={class:"jldocstring custom-block"},kh={class:"jldocstring custom-block"},fh={class:"jldocstring custom-block"},Rh={class:"jldocstring custom-block"},Ih={class:"jldocstring custom-block"},Th={class:"jldocstring custom-block"},Ah={class:"jldocstring custom-block"},jh={class:"jldocstring custom-block"},_h={class:"jldocstring custom-block"},Mh={class:"jldocstring custom-block"},Lh={class:"jldocstring custom-block"},Eh={class:"jldocstring custom-block"},Ch={class:"jldocstring custom-block"},vh={class:"jldocstring custom-block"},Ph={class:"jldocstring custom-block"},xh={class:"jldocstring custom-block"},Sh={class:"jldocstring custom-block"},Dh={class:"jldocstring custom-block"},Fh={class:"jldocstring custom-block"},Vh={class:"jldocstring custom-block"},Oh={class:"jldocstring custom-block"},Bh={class:"jldocstring custom-block"},Nh={class:"jldocstring custom-block"},Gh={class:"jldocstring custom-block"},zh={class:"jldocstring custom-block"},wh={class:"jldocstring custom-block"},Uh={class:"jldocstring custom-block"},qh={class:"jldocstring custom-block"},Qh={class:"jldocstring custom-block"},Wh={class:"jldocstring custom-block"},Zh={class:"jldocstring custom-block"},Hh={class:"jldocstring custom-block"},Jh={class:"jldocstring custom-block"},Kh={class:"jldocstring custom-block"},$h={class:"jldocstring custom-block"},Xh={class:"jldocstring custom-block"},Yh={class:"jldocstring custom-block"},tb={class:"jldocstring custom-block"},eb={class:"jldocstring custom-block"},sb={class:"jldocstring custom-block"},ab={class:"jldocstring custom-block"},ib={class:"jldocstring custom-block"},lb={class:"jldocstring custom-block"},nb={class:"jldocstring custom-block"},rb={class:"jldocstring custom-block"},ob={class:"jldocstring custom-block"},pb={class:"jldocstring custom-block"},db={class:"jldocstring custom-block"},ub={class:"jldocstring custom-block"},cb={class:"jldocstring custom-block"},hb={class:"jldocstring custom-block"},bb={class:"jldocstring custom-block"},yb={class:"jldocstring custom-block"},gb={class:"jldocstring custom-block"},mb={class:"jldocstring custom-block"},kb={class:"jldocstring custom-block"},fb={class:"jldocstring custom-block"},Rb={class:"jldocstring custom-block"},Ib={class:"jldocstring custom-block"},Tb={class:"jldocstring custom-block"},Ab={class:"jldocstring custom-block"},jb={class:"jldocstring custom-block"},_b={class:"jldocstring custom-block"},Mb={class:"jldocstring custom-block"},Lb={class:"jldocstring custom-block"},Eb={class:"jldocstring custom-block"},Cb={class:"jldocstring custom-block"},vb={class:"jldocstring custom-block"},Pb={class:"jldocstring custom-block"},xb={class:"jldocstring custom-block"},Sb={class:"jldocstring custom-block"},Db={class:"jldocstring custom-block"},Fb={class:"jldocstring custom-block"},Vb={class:"jldocstring custom-block"},Ob={class:"jldocstring custom-block"},Bb={class:"jldocstring custom-block"},Nb={class:"jldocstring custom-block"},Gb={class:"jldocstring custom-block"},zb={class:"jldocstring custom-block"},wb={class:"jldocstring custom-block"},Ub={class:"jldocstring custom-block"},qb={class:"jldocstring custom-block"},Qb={class:"jldocstring custom-block"},Wb={class:"jldocstring custom-block"},Zb={class:"jldocstring custom-block"},Hb={class:"jldocstring custom-block"},Jb={class:"jldocstring custom-block"},Kb={class:"jldocstring custom-block"},$b={class:"jldocstring custom-block"},Xb={class:"jldocstring custom-block"},Yb={class:"jldocstring custom-block"},ty={class:"jldocstring custom-block"},ey={class:"jldocstring custom-block"},sy={class:"jldocstring custom-block"},ay={class:"jldocstring custom-block"},iy={class:"jldocstring custom-block"},ly={class:"jldocstring custom-block"},ny={class:"jldocstring custom-block"},ry={class:"jldocstring custom-block"},oy={class:"jldocstring custom-block"},py={class:"jldocstring custom-block"},dy={class:"jldocstring custom-block"},uy={class:"jldocstring custom-block"},cy={class:"jldocstring custom-block"},hy={class:"jldocstring custom-block"},by={class:"jldocstring custom-block"},yy={class:"jldocstring custom-block"},gy={class:"jldocstring custom-block"},my={class:"jldocstring custom-block"},ky={class:"jldocstring custom-block"},fy={class:"jldocstring custom-block"},Ry={class:"jldocstring custom-block"},Iy={class:"jldocstring custom-block"},Ty={class:"jldocstring custom-block"},Ay={class:"jldocstring custom-block"},jy={class:"jldocstring custom-block"},_y={class:"jldocstring custom-block"},My={class:"jldocstring custom-block"},Ly={class:"jldocstring custom-block"},Ey={class:"jldocstring custom-block"},Cy={class:"jldocstring custom-block"},vy={class:"jldocstring custom-block"},Py={class:"jldocstring custom-block"},xy={class:"jldocstring custom-block"},Sy={class:"jldocstring custom-block"},Dy={class:"jldocstring custom-block"},Fy={class:"jldocstring custom-block"},Vy={class:"jldocstring custom-block"},Oy={class:"jldocstring custom-block"},By={class:"jldocstring custom-block"},Ny={class:"jldocstring custom-block"},Gy={class:"jldocstring custom-block"},zy={class:"jldocstring custom-block"},wy={class:"jldocstring custom-block"},Uy={class:"jldocstring custom-block"},qy={class:"jldocstring custom-block"},Qy={class:"jldocstring custom-block"},Wy={class:"jldocstring custom-block"},Zy={class:"jldocstring custom-block"},Hy={class:"jldocstring custom-block"},Jy={class:"jldocstring custom-block"},Ky={class:"jldocstring custom-block"},$y={class:"jldocstring custom-block"},Xy={class:"jldocstring custom-block"},Yy={class:"jldocstring custom-block"},tg={class:"jldocstring custom-block"},eg={class:"jldocstring custom-block"},sg={class:"jldocstring custom-block"},ag={class:"jldocstring custom-block"},ig={class:"jldocstring custom-block"},lg={class:"jldocstring custom-block"},ng={class:"jldocstring custom-block"},rg={class:"jldocstring custom-block"},og={class:"jldocstring custom-block"},pg={class:"jldocstring custom-block"},dg={class:"jldocstring custom-block"},ug={class:"jldocstring custom-block"},cg={class:"jldocstring custom-block"},hg={class:"jldocstring custom-block"},bg={class:"jldocstring custom-block"},yg={class:"jldocstring custom-block"},gg={class:"jldocstring custom-block"},mg={class:"jldocstring custom-block"},kg={class:"jldocstring custom-block"},fg={class:"jldocstring custom-block"},Rg={class:"jldocstring custom-block"},Ig={class:"jldocstring custom-block"},Tg={class:"jldocstring custom-block"},Ag={class:"jldocstring custom-block"},jg={class:"jldocstring custom-block"},_g={class:"jldocstring custom-block"},Mg={class:"jldocstring custom-block"},Lg={class:"jldocstring custom-block"},Eg={class:"jldocstring custom-block"},Cg={class:"jldocstring custom-block"},vg={class:"jldocstring custom-block"},Pg={class:"jldocstring custom-block"},xg={class:"jldocstring custom-block"},Sg={class:"jldocstring custom-block"},Dg={class:"jldocstring custom-block"},Fg={class:"jldocstring custom-block"},Vg={class:"jldocstring custom-block"},Og={class:"jldocstring custom-block"},Bg={class:"jldocstring custom-block"},Ng={class:"jldocstring custom-block"},Gg={class:"jldocstring custom-block"},zg={class:"jldocstring custom-block"},wg={class:"jldocstring custom-block"},Ug={class:"jldocstring custom-block"},qg={class:"jldocstring custom-block"},Qg={class:"jldocstring custom-block"},Wg={class:"jldocstring custom-block"},Zg={class:"jldocstring custom-block"},Hg={class:"jldocstring custom-block"},Jg={class:"jldocstring custom-block"},Kg={class:"jldocstring custom-block"},$g={class:"jldocstring custom-block"},Xg={class:"jldocstring custom-block"},Yg={class:"jldocstring custom-block"},tm={class:"jldocstring custom-block"},em={class:"jldocstring custom-block"},sm={class:"jldocstring custom-block"},am={class:"jldocstring custom-block"},im={class:"jldocstring custom-block"},lm={class:"jldocstring custom-block"},nm={class:"jldocstring custom-block"},rm={class:"jldocstring custom-block"},om={class:"jldocstring custom-block"},pm={class:"jldocstring custom-block"},dm={class:"jldocstring custom-block"},um={class:"jldocstring custom-block"},cm={class:"jldocstring custom-block"},hm={class:"jldocstring custom-block"},bm={class:"jldocstring custom-block"},ym={class:"jldocstring custom-block"},gm={class:"jldocstring custom-block"},mm={class:"jldocstring custom-block"},km={class:"jldocstring custom-block"},fm={class:"jldocstring custom-block"},Rm={class:"jldocstring custom-block"},Im={class:"jldocstring custom-block"},Tm={class:"jldocstring custom-block"},Am={class:"jldocstring custom-block"},jm={class:"jldocstring custom-block"},_m={class:"jldocstring custom-block"},Mm={class:"jldocstring custom-block"},Lm={class:"jldocstring custom-block"},Em={class:"jldocstring custom-block"},Cm={class:"jldocstring custom-block"},vm={class:"jldocstring custom-block"},Pm={class:"jldocstring custom-block"},xm={class:"jldocstring custom-block"},Sm={class:"jldocstring custom-block"},Dm={class:"jldocstring custom-block"},Fm={class:"jldocstring custom-block"},Vm={class:"jldocstring custom-block"},Om={class:"jldocstring custom-block"},Bm={class:"jldocstring custom-block"},Nm={class:"jldocstring custom-block"},Gm={class:"jldocstring custom-block"},zm={class:"jldocstring custom-block"},wm={class:"jldocstring custom-block"},Um={class:"jldocstring custom-block"},qm={class:"jldocstring custom-block"},Qm={class:"jldocstring custom-block"},Wm={class:"jldocstring custom-block"},Zm={class:"jldocstring custom-block"},Hm={class:"jldocstring custom-block"},Jm={class:"jldocstring custom-block"},Km={class:"jldocstring custom-block"},$m={class:"jldocstring custom-block"},Xm={class:"jldocstring custom-block"},Ym={class:"jldocstring custom-block"},tk={class:"jldocstring custom-block"},ek={class:"jldocstring custom-block"},sk={class:"jldocstring custom-block"},ak={class:"jldocstring custom-block"},ik={class:"jldocstring custom-block"},lk={class:"jldocstring custom-block"},nk={class:"jldocstring custom-block"},rk={class:"jldocstring custom-block"},ok={class:"jldocstring custom-block"},pk={class:"jldocstring custom-block"},dk={class:"jldocstring custom-block"},uk={class:"jldocstring custom-block"},ck={class:"jldocstring custom-block"},hk={class:"jldocstring custom-block"},bk={class:"jldocstring custom-block"},yk={class:"jldocstring custom-block"},gk={class:"jldocstring custom-block"},mk={class:"jldocstring custom-block"},kk={class:"jldocstring custom-block"},fk={class:"jldocstring custom-block"},Rk={class:"jldocstring custom-block"},Ik={class:"jldocstring custom-block"},Tk={class:"jldocstring custom-block"},Ak={class:"jldocstring custom-block"},jk={class:"jldocstring custom-block"},_k={class:"jldocstring custom-block"},Mk={class:"jldocstring custom-block"},Lk={class:"jldocstring custom-block"},Ek={class:"jldocstring custom-block"},Ck={class:"jldocstring custom-block"},vk={class:"jldocstring custom-block"},Pk={class:"jldocstring custom-block"},xk={class:"jldocstring custom-block"},Sk={class:"jldocstring custom-block"},Dk={class:"jldocstring custom-block"},Fk={class:"jldocstring custom-block"},Vk={class:"jldocstring custom-block"},Ok={class:"jldocstring custom-block"},Bk={class:"jldocstring custom-block"},Nk={class:"jldocstring custom-block"},Gk={class:"jldocstring custom-block"},zk={class:"jldocstring custom-block"},wk={class:"jldocstring custom-block"},Uk={class:"jldocstring custom-block"},qk={class:"jldocstring custom-block"},Qk={class:"jldocstring custom-block"},Wk={class:"jldocstring custom-block"},Zk={class:"jldocstring custom-block"},Hk={class:"jldocstring custom-block"},Jk={class:"jldocstring custom-block"},Kk={class:"jldocstring custom-block"},$k={class:"jldocstring custom-block"},Xk={class:"jldocstring custom-block"},Yk={class:"jldocstring custom-block"},tf={class:"jldocstring custom-block"},ef={class:"jldocstring custom-block"},sf={class:"jldocstring custom-block"},af={class:"jldocstring custom-block"},lf={class:"jldocstring custom-block"},nf={class:"jldocstring custom-block"},rf={class:"jldocstring custom-block"},of={class:"jldocstring custom-block"},pf={class:"jldocstring custom-block"},df={class:"jldocstring custom-block"},uf={class:"jldocstring custom-block"},cf={class:"jldocstring custom-block"},hf={class:"jldocstring custom-block"},bf={class:"jldocstring custom-block"},yf={class:"jldocstring custom-block"},gf={class:"jldocstring custom-block"},mf={class:"jldocstring custom-block"},kf={class:"jldocstring custom-block"},ff={class:"jldocstring custom-block"},Rf={class:"jldocstring custom-block"},If={class:"jldocstring custom-block"},Tf={class:"jldocstring custom-block"},Af={class:"jldocstring custom-block"},jf={class:"jldocstring custom-block"},_f={class:"jldocstring custom-block"},Mf={class:"jldocstring custom-block"},Lf={class:"jldocstring custom-block"},Ef={class:"jldocstring custom-block"},Cf={class:"jldocstring custom-block"},vf={class:"jldocstring custom-block"},Pf={class:"jldocstring custom-block"},xf={class:"jldocstring custom-block"},Sf={class:"jldocstring custom-block"},Df={class:"jldocstring custom-block"},Ff={class:"jldocstring custom-block"},Vf={class:"jldocstring custom-block"},Of={class:"jldocstring custom-block"},Bf={class:"jldocstring custom-block"},Nf={class:"jldocstring custom-block"},Gf={class:"jldocstring custom-block"},zf={class:"jldocstring custom-block"},wf={class:"jldocstring custom-block"},Uf={class:"jldocstring custom-block"};function qf(Qf,t,Wf,Zf,Hf,Jf){const s=o("Badge");return d(),p("div",null,[t[4465]||(t[4465]=e("h1",{id:"Higher-level-API",tabindex:"-1"},[i("Higher level API "),e("a",{class:"header-anchor",href:"#Higher-level-API","aria-label":'Permalink to "Higher level API {#Higher-level-API}"'},"​")],-1)),e("details",c,[e("summary",null,[t[0]||(t[0]=e("a",{id:"Core.Bool-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Core.Bool-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Core.Bool")],-1)),t[1]||(t[1]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3]||(t[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given bool attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2]||(t[2]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L210-L214",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",h,[e("summary",null,[t[4]||(t[4]=e("a",{id:"Core.Float64-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Core.Float64-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Core.Float64")],-1)),t[5]||(t[5]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[7]||(t[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given floating point attribute, interpreting the value as double.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[6]||(t[6]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L126-L130",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",b,[e("summary",null,[t[8]||(t[8]=e("a",{id:"Core.Int64-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Core.Int64-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Core.Int64")],-1)),t[9]||(t[9]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[11]||(t[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given integer attribute, assuming the value is of signed type and fits into a signed 64-bit integer.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[10]||(t[10]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L174-L178",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",y,[e("summary",null,[t[12]||(t[12]=e("a",{id:"Core.String-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Core.String-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Core.String")],-1)),t[13]||(t[13]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[15]||(t[15]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the attribute values as a string reference. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[14]||(t[14]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L287-L291",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",g,[e("summary",null,[t[16]||(t[16]=e("a",{id:"Core.String-Tuple{Reactant.MLIR.IR.Identifier}",href:"#Core.String-Tuple{Reactant.MLIR.IR.Identifier}"},[e("span",{class:"jlbinding"},"Core.String")],-1)),t[17]||(t[17]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[19]||(t[19]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ident)</span></span></code></pre></div><p>Gets the string value of the identifier.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[18]||(t[18]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Identifier.jl#L29-L33",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",m,[e("summary",null,[t[20]||(t[20]=e("a",{id:"Core.UInt64-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Core.UInt64-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Core.UInt64")],-1)),t[21]||(t[21]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[23]||(t[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UInt64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given integer attribute, assuming the value is of unsigned type and fits into an unsigned 64-bit integer.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[22]||(t[22]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L186-L190",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",k,[e("summary",null,[t[24]||(t[24]=e("a",{id:"Reactant.MLIR.IR.AffineMap-Tuple{Any, Any, Vector{Reactant.MLIR.IR.AffineExpr}}",href:"#Reactant.MLIR.IR.AffineMap-Tuple{Any, Any, Vector{Reactant.MLIR.IR.AffineExpr}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.AffineMap")],-1)),t[25]||(t[25]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[27]||(t[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ndims, nsymbols, affineExprs; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an affine map with results defined by the given list of affine expressions. The map resulting map also has the requested number of input dimensions and symbols, regardless of them being used in the results.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[26]||(t[26]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L50-L55",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",f,[e("summary",null,[t[28]||(t[28]=e("a",{id:"Reactant.MLIR.IR.AffineMap-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.AffineMap-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.AffineMap")],-1)),t[29]||(t[29]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[31]||(t[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ndims, nsymbols; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a zero result affine map of the given dimensions and symbols in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[30]||(t[30]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L41-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",R,[e("summary",null,[t[32]||(t[32]=e("a",{id:"Reactant.MLIR.IR.AffineMap-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.AffineMap-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.AffineMap")],-1)),t[33]||(t[33]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[35]||(t[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the affine map wrapped in the given affine map attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[34]||(t[34]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L64-L68",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",I,[e("summary",null,[t[36]||(t[36]=e("a",{id:"Reactant.MLIR.IR.AffineMap-Tuple{}",href:"#Reactant.MLIR.IR.AffineMap-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.AffineMap")],-1)),t[37]||(t[37]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[39]||(t[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a zero result affine map with no dimensions or symbols in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[38]||(t[38]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L10-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",T,[e("summary",null,[t[40]||(t[40]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{AbstractString}",href:"#Reactant.MLIR.IR.Attribute-Tuple{AbstractString}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[41]||(t[41]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[43]||(t[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a string attribute in the given context containing the given string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[42]||(t[42]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L270-L274",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",A,[e("summary",null,[t[44]||(t[44]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{Bool}",href:"#Reactant.MLIR.IR.Attribute-Tuple{Bool}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[45]||(t[45]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[47]||(t[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a bool attribute in the given context with the given value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[46]||(t[46]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L203-L207",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",j,[e("summary",null,[t[48]||(t[48]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{Dict}",href:"#Reactant.MLIR.IR.Attribute-Tuple{Dict}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[49]||(t[49]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[51]||(t[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elements; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a dictionary attribute containing the given list of elements in the provided context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[50]||(t[50]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L93-L97",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_,[e("summary",null,[t[52]||(t[52]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.Attribute-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[53]||(t[53]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[55]||(t[55]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Creates an affine map attribute wrapping the given map. The attribute belongs to the same context as the affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[54]||(t[54]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L57-L61",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",M,[e("summary",null,[t[56]||(t[56]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{Reactant.MLIR.IR.Type, AbstractString}",href:"#Reactant.MLIR.IR.Attribute-Tuple{Reactant.MLIR.IR.Type, AbstractString}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[57]||(t[57]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[59]||(t[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, str)</span></span></code></pre></div><p>Creates a string attribute in the given context containing the given string. Additionally, the attribute has the given type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[58]||(t[58]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L278-L282",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",L,[e("summary",null,[t[60]||(t[60]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.Attribute-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[61]||(t[61]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[63]||(t[63]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Creates a type attribute wrapping the given type in the same context as the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[62]||(t[62]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L376-L380",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",E,[e("summary",null,[t[64]||(t[64]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{T} where T<:AbstractFloat",href:"#Reactant.MLIR.IR.Attribute-Tuple{T} where T<:AbstractFloat"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[65]||(t[65]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[67]||(t[67]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(float; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a floating point attribute in the given context with the given double value and double-precision FP semantics. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[66]||(t[66]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L110-L115",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",C,[e("summary",null,[t[68]||(t[68]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{T} where T<:Complex",href:"#Reactant.MLIR.IR.Attribute-Tuple{T} where T<:Complex"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[69]||(t[69]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[71]||(t[71]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(complex; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a complex attribute in the given context with the given complex value and double-precision FP semantics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[70]||(t[70]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L136-L140",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",v,[e("summary",null,[t[72]||(t[72]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{Vector{Reactant.MLIR.IR.Attribute}}",href:"#Reactant.MLIR.IR.Attribute-Tuple{Vector{Reactant.MLIR.IR.Attribute}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[73]||(t[73]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[75]||(t[75]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elements; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an array element containing the given list of elements in the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[74]||(t[74]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L78-L82",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",P,[e("summary",null,[t[76]||(t[76]=e("a",{id:"Reactant.MLIR.IR.Attribute-Tuple{}",href:"#Reactant.MLIR.IR.Attribute-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[77]||(t[77]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[79]||(t[79]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns an empty attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[78]||(t[78]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",x,[e("summary",null,[t[80]||(t[80]=e("a",{id:"Reactant.MLIR.IR.Attribute-Union{Tuple{T}, Tuple{T, Any}} where T<:Integer",href:"#Reactant.MLIR.IR.Attribute-Union{Tuple{T}, Tuple{T, Any}} where T<:Integer"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Attribute")],-1)),t[81]||(t[81]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[83]||(t[83]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(int)</span></span></code></pre></div><p>Creates an integer attribute of the given type with the given integer value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[82]||(t[82]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L166-L170",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",S,[e("summary",null,[t[84]||(t[84]=e("a",{id:"Reactant.MLIR.IR.Block-Tuple{Vector{Reactant.MLIR.IR.Type}, Vector{Reactant.MLIR.IR.Location}}",href:"#Reactant.MLIR.IR.Block-Tuple{Vector{Reactant.MLIR.IR.Type}, Vector{Reactant.MLIR.IR.Location}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Block")],-1)),t[85]||(t[85]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[87]||(t[87]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args, locs)</span></span></code></pre></div><p>Creates a new empty block with the given argument types and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[86]||(t[86]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L17-L21",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",D,[e("summary",null,[t[88]||(t[88]=e("a",{id:"Reactant.MLIR.IR.BlockIterator",href:"#Reactant.MLIR.IR.BlockIterator"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.BlockIterator")],-1)),t[89]||(t[89]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[91]||(t[91]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BlockIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Iterates over all blocks in the given region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[90]||(t[90]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Iterators.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",F,[e("summary",null,[t[92]||(t[92]=e("a",{id:"Reactant.MLIR.IR.Context-Tuple{}",href:"#Reactant.MLIR.IR.Context-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Context")],-1)),t[93]||(t[93]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[95]||(t[95]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates an MLIR context and transfers its ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[94]||(t[94]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Context.jl#L10-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",V,[e("summary",null,[t[96]||(t[96]=e("a",{id:"Reactant.MLIR.IR.ExecutionEngine",href:"#Reactant.MLIR.IR.ExecutionEngine"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ExecutionEngine")],-1)),t[97]||(t[97]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[99]||(t[99]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExecutionEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, optLevel, sharedlibs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [])</span></span></code></pre></div><p>Creates an ExecutionEngine for the provided ModuleOp. The ModuleOp is expected to be &quot;translatable&quot; to LLVM IR (only contains operations in dialects that implement the <code>LLVMTranslationDialectInterface</code>). The module ownership stays with the client and can be destroyed as soon as the call returns. <code>optLevel</code> is the optimization level to be used for transformation and code generation. LLVM passes at <code>optLevel</code> are run before code generation. The number and array of paths corresponding to shared libraries that will be loaded are specified via <code>numPaths</code> and <code>sharedLibPaths</code> respectively. TODO: figure out other options.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[98]||(t[98]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/ExecutionEngine.jl#L10-L20",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",O,[e("summary",null,[t[100]||(t[100]=e("a",{id:"Reactant.MLIR.IR.Identifier-Tuple{String}",href:"#Reactant.MLIR.IR.Identifier-Tuple{String}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Identifier")],-1)),t[101]||(t[101]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[103]||(t[103]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, str)</span></span></code></pre></div><p>Gets an identifier with the given string value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[102]||(t[102]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Identifier.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",B,[e("summary",null,[t[104]||(t[104]=e("a",{id:"Reactant.MLIR.IR.IntegerSet-NTuple{4, Any}",href:"#Reactant.MLIR.IR.IntegerSet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.IntegerSet")],-1)),t[105]||(t[105]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[107]||(t[107]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ndims, nsymbols, constraints, eqflags; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Gets or creates a new integer set in the given context. The set is defined by a list of affine constraints, with the given number of input dimensions and symbols, which are treated as either equalities (eqflags is 1) or inequalities (eqflags is 0). Both <code>constraints</code> and <code>eqflags</code> need to be arrays of the same length.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[106]||(t[106]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L18-L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",N,[e("summary",null,[t[108]||(t[108]=e("a",{id:"Reactant.MLIR.IR.IntegerSet-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.IntegerSet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.IntegerSet")],-1)),t[109]||(t[109]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[111]||(t[111]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integerset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ndims, nsymbols; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Gets or creates a new canonically empty integer set with the give number of dimensions and symbols in the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[110]||(t[110]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L10-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",G,[e("summary",null,[t[112]||(t[112]=e("a",{id:"Reactant.MLIR.IR.LogicalResult",href:"#Reactant.MLIR.IR.LogicalResult"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.LogicalResult")],-1)),t[113]||(t[113]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[115]||(t[115]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogicalResult</span></span></code></pre></div><p>A logical result value, essentially a boolean with named states. LLVM convention for using boolean values to designate success or failure of an operation is a moving target, so MLIR opted for an explicit class. Instances of <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.IR.LogicalResult"><code>LogicalResult</code></a> must only be inspected using the associated functions.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[114]||(t[114]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/LogicalResult.jl#L1-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",z,[e("summary",null,[t[116]||(t[116]=e("a",{id:"Reactant.MLIR.IR.Module",href:"#Reactant.MLIR.IR.Module"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Module")],-1)),t[117]||(t[117]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[119]||(t[119]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a new, empty module and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[118]||(t[118]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Module.jl#L10-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",w,[e("summary",null,[t[120]||(t[120]=e("a",{id:"Reactant.MLIR.IR.NamedAttribute-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.NamedAttribute-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.NamedAttribute")],-1)),t[121]||(t[121]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[123]||(t[123]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, attr)</span></span></code></pre></div><p>Associates an attribute with the name. Takes ownership of neither.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[122]||(t[122]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L850-L854",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",U,[e("summary",null,[t[124]||(t[124]=e("a",{id:"Reactant.MLIR.IR.OpPassManager-Tuple{Reactant.MLIR.IR.OpPassManager, Any}",href:"#Reactant.MLIR.IR.OpPassManager-Tuple{Reactant.MLIR.IR.OpPassManager, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.OpPassManager")],-1)),t[125]||(t[125]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[127]||(t[127]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OpPassManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opPassManager, operationName)</span></span></code></pre></div><p>Nest an <code>OpPassManager</code> under the provided <code>OpPassManager</code>, the nested passmanager will only run on operations matching the provided name. The returned <code>OpPassManager</code> will be destroyed when the parent is destroyed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[126]||(t[126]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L192-L196",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",q,[e("summary",null,[t[128]||(t[128]=e("a",{id:"Reactant.MLIR.IR.OpPassManager-Tuple{Reactant.MLIR.IR.PassManager, Any}",href:"#Reactant.MLIR.IR.OpPassManager-Tuple{Reactant.MLIR.IR.PassManager, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.OpPassManager")],-1)),t[129]||(t[129]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[131]||(t[131]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OpPassManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, operationName)</span></span></code></pre></div><p>Nest an <code>OpPassManager</code> under the top-level PassManager, the nested passmanager will only run on operations matching the provided name. The returned <code>OpPassManager</code> will be destroyed when the parent is destroyed. To further nest more <code>OpPassManager</code> under the newly returned one, see <code>mlirOpPassManagerNest</code> below.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[130]||(t[130]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L183-L188",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Q,[e("summary",null,[t[132]||(t[132]=e("a",{id:"Reactant.MLIR.IR.OpPassManager-Tuple{Reactant.MLIR.IR.PassManager}",href:"#Reactant.MLIR.IR.OpPassManager-Tuple{Reactant.MLIR.IR.PassManager}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.OpPassManager")],-1)),t[133]||(t[133]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[135]||(t[135]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OpPassManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager)</span></span></code></pre></div><p>Cast a top-level <code>PassManager</code> to a generic <code>OpPassManager</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[134]||(t[134]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L175-L179",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",W,[e("summary",null,[t[136]||(t[136]=e("a",{id:"Reactant.MLIR.IR.Operation-Tuple{Reactant.MLIR.IR.Module}",href:"#Reactant.MLIR.IR.Operation-Tuple{Reactant.MLIR.IR.Module}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Operation")],-1)),t[137]||(t[137]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[139]||(t[139]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Views the module as a generic operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[138]||(t[138]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Module.jl#L50-L54",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Z,[e("summary",null,[t[140]||(t[140]=e("a",{id:"Reactant.MLIR.IR.OperationIterator",href:"#Reactant.MLIR.IR.OperationIterator"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.OperationIterator")],-1)),t[141]||(t[141]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[143]||(t[143]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OperationIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Iterates over all operations for the given block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[142]||(t[142]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Iterators.jl#L66-L70",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",H,[e("summary",null,[t[144]||(t[144]=e("a",{id:"Reactant.MLIR.IR.PassManager-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.PassManager-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.PassManager")],-1)),t[145]||(t[145]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[147]||(t[147]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PassManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(anchorOp; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Create a new top-level PassManager anchored on <code>anchorOp</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[146]||(t[146]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L28-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",J,[e("summary",null,[t[148]||(t[148]=e("a",{id:"Reactant.MLIR.IR.PassManager-Tuple{}",href:"#Reactant.MLIR.IR.PassManager-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.PassManager")],-1)),t[149]||(t[149]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[151]||(t[151]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PassManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Create a new top-level PassManager.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[150]||(t[150]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",K,[e("summary",null,[t[152]||(t[152]=e("a",{id:"Reactant.MLIR.IR.Region-Tuple{}",href:"#Reactant.MLIR.IR.Region-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Region")],-1)),t[153]||(t[153]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[155]||(t[155]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a new empty region and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[154]||(t[154]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L15-L19",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$,[e("summary",null,[t[156]||(t[156]=e("a",{id:"Reactant.MLIR.IR.RegionIterator",href:"#Reactant.MLIR.IR.RegionIterator"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.RegionIterator")],-1)),t[157]||(t[157]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[159]||(t[159]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegionIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Iterates over all sub-regions for the given operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[158]||(t[158]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Iterators.jl#L34-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",X,[e("summary",null,[t[160]||(t[160]=e("a",{id:"Reactant.MLIR.IR.SymbolTable-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.SymbolTable-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.SymbolTable")],-1)),t[161]||(t[161]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[163]||(t[163]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation)</span></span></code></pre></div><p>Creates a symbol table for the given operation. If the operation does not have the SymbolTable trait, returns a null symbol table.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[162]||(t[162]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/SymbolTable.jl#L10-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Y,[e("summary",null,[t[164]||(t[164]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.Type-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[165]||(t[165]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[167]||(t[167]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the type stored in the given type attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[166]||(t[166]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L383-L387",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tt,[e("summary",null,[t[168]||(t[168]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Integer}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Integer}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[169]||(t[169]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[171]||(t[171]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{&lt;:Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a signless integer type of the given bitwidth in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[170]||(t[170]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L80-L84",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",et,[e("summary",null,[t[172]||(t[172]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E4M3B11FNUZ}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E4M3B11FNUZ}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[173]||(t[173]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[175]||(t[175]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Reactant.F8E4M3B11FNUZ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a f8e4m3b11fnuz type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[174]||(t[174]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L212-L216",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",st,[e("summary",null,[t[176]||(t[176]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E4M3FNUZ}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E4M3FNUZ}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[177]||(t[177]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[179]||(t[179]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Reactant.F8E4M3FNUZ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a f8e4m3fnuz type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[178]||(t[178]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L230-L234",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",at,[e("summary",null,[t[180]||(t[180]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E4M3FN}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E4M3FN}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[181]||(t[181]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[183]||(t[183]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Reactant.F8E4M3FN}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a f8e4m3fn type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[182]||(t[182]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L203-L207",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",it,[e("summary",null,[t[184]||(t[184]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E5M2FNUZ}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E5M2FNUZ}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[185]||(t[185]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[187]||(t[187]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Reactant.F8E5M2FNUZ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a f8e5m2fnuz type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[186]||(t[186]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L221-L225",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lt,[e("summary",null,[t[188]||(t[188]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E5M2}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.F8E5M2}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[189]||(t[189]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[191]||(t[191]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Reactant.F8E5M2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a f8e5m2 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[190]||(t[190]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L194-L198",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nt,[e("summary",null,[t[192]||(t[192]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.TF32}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Reactant.TF32}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[193]||(t[193]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[195]||(t[195]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Reactant.TF32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a tf32 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[194]||(t[194]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L239-L243",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rt,[e("summary",null,[t[196]||(t[196]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Signed}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Signed}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[197]||(t[197]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[199]||(t[199]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{&lt;:Signed}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a signed integer type of the given bitwidth in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[198]||(t[198]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L88-L92",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ot,[e("summary",null,[t[200]||(t[200]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{<:Unsigned}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{<:Unsigned}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[201]||(t[201]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[203]||(t[203]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{&lt;:Unsigned}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates an unsigned integer type of the given bitwidth in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[202]||(t[202]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L96-L100",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pt,[e("summary",null,[t[204]||(t[204]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{Bool}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{Bool}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[205]||(t[205]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[207]||(t[207]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a 1-bit signless integer type in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[206]||(t[206]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L71-L75",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dt,[e("summary",null,[t[208]||(t[208]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{Float16}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{Float16}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[209]||(t[209]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[211]||(t[211]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Float16}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an f16 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[210]||(t[210]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L164-L168",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ut,[e("summary",null,[t[212]||(t[212]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{Float32}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{Float32}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[213]||(t[213]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[215]||(t[215]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Core</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type{Float32}; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an f32 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[214]||(t[214]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L180-L184",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ct,[e("summary",null,[t[216]||(t[216]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{Float64}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{Float64}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[217]||(t[217]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[219]||(t[219]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Core</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type{Float64}; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a f64 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[218]||(t[218]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L187-L191",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ht,[e("summary",null,[t[220]||(t[220]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Type{Nothing}}",href:"#Reactant.MLIR.IR.Type-Tuple{Type{Nothing}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[221]||(t[221]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[223]||(t[223]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a None type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[222]||(t[222]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L42-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bt,[e("summary",null,[t[224]||(t[224]=e("a",{id:"Reactant.MLIR.IR.Type-Tuple{Vector{Reactant.MLIR.IR.Type}}",href:"#Reactant.MLIR.IR.Type-Tuple{Vector{Reactant.MLIR.IR.Type}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[225]||(t[225]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[227]||(t[227]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elements; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{&lt;:Tuple{T...}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a tuple type that consists of the given list of elemental types. The type is owned by the context.</p>`,2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[226]||(t[226]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L642-L647",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yt,[e("summary",null,[t[228]||(t[228]=e("a",{id:"Reactant.MLIR.IR.Type-Union{Tuple{Type{Complex{T}}}, Tuple{T}} where T",href:"#Reactant.MLIR.IR.Type-Union{Tuple{Type{Complex{T}}}, Tuple{T}} where T"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Type")],-1)),t[229]||(t[229]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[231]||(t[231]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Complex{T}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span></code></pre></div><p>Creates a complex type with the given element type in the same context as the element type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[230]||(t[230]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L319-L323",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gt,[e("summary",null,[t[232]||(t[232]=e("a",{id:"Base.:-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}",href:"#Base.:-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.:*")],-1)),t[233]||(t[233]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[235]||(t[235]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine mul expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[234]||(t[234]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L157-L161",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mt,[e("summary",null,[t[236]||(t[236]=e("a",{id:"Base.:+-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}",href:"#Base.:+-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.:+")],-1)),t[237]||(t[237]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[239]||(t[239]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine add expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[238]||(t[238]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L143-L147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kt,[e("summary",null,[t[240]||(t[240]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[241]||(t[241]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[243]||(t[243]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b)</span></span></code></pre></div><p>Returns <code>true</code> if the two affine expressions are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[242]||(t[242]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L12-L16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ft,[e("summary",null,[t[244]||(t[244]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.AffineMap, Reactant.MLIR.IR.AffineMap}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.AffineMap, Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[245]||(t[245]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[247]||(t[247]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b)</span></span></code></pre></div><p>Checks if two affine maps are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[246]||(t[246]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L20-L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rt,[e("summary",null,[t[248]||(t[248]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.Attribute, Reactant.MLIR.IR.Attribute}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.Attribute, Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[249]||(t[249]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[251]||(t[251]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a1, a2)</span></span></code></pre></div><p>Checks if two attributes are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[250]||(t[250]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L22-L26",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",It,[e("summary",null,[t[252]||(t[252]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Block}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[253]||(t[253]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[255]||(t[255]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, other)</span></span></code></pre></div><p>Checks whether two blocks handles point to the same block. This does not perform deep comparison.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[254]||(t[254]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tt,[e("summary",null,[t[256]||(t[256]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.Identifier, Reactant.MLIR.IR.Identifier}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.Identifier, Reactant.MLIR.IR.Identifier}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[257]||(t[257]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[259]||(t[259]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ident, other)</span></span></code></pre></div><p>Checks whether two identifiers are the same.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[258]||(t[258]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Identifier.jl#L15-L19",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",At,[e("summary",null,[t[260]||(t[260]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.IntegerSet, Reactant.MLIR.IR.IntegerSet}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.IntegerSet, Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[261]||(t[261]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[263]||(t[263]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1, s2)</span></span></code></pre></div><p>Checks if two integer set objects are equal. This is a &quot;shallow&quot; comparison of two objects. Only the sets with some small number of constraints are uniqued and compare equal here. Set objects that represent the same integer set with different constraints may be considered non-equal by this check. Set difference followed by an (expensive) emptiness check should be used to check equivalence of the underlying integer sets.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[262]||(t[262]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L50-L57",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jt,[e("summary",null,[t[264]||(t[264]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Region}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Region}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[265]||(t[265]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[267]||(t[267]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, other)</span></span></code></pre></div><p>Checks whether two region handles point to the same region. This does not perform deep comparison.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[266]||(t[266]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L25-L29",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_t,[e("summary",null,[t[268]||(t[268]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.Type, Reactant.MLIR.IR.Type}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.Type, Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[269]||(t[269]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[271]||(t[271]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t1, t2)</span></span></code></pre></div><p>Checks if two types are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[270]||(t[270]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L20-L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mt,[e("summary",null,[t[272]||(t[272]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.TypeID, Reactant.MLIR.IR.TypeID}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.TypeID, Reactant.MLIR.IR.TypeID}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[273]||(t[273]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[275]||(t[275]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typeID1, typeID2)</span></span></code></pre></div><p>Checks if two type ids are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[274]||(t[274]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/TypeID.jl#L23-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lt,[e("summary",null,[t[276]||(t[276]=e("a",{id:"Base.:==-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Base.:==-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Base.:==")],-1)),t[277]||(t[277]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[279]||(t[279]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value1, value2)</span></span></code></pre></div><p>Returns 1 if two values are equal, 0 otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[278]||(t[278]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L14-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Et,[e("summary",null,[t[280]||(t[280]=e("a",{id:"Base.cld-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}",href:"#Base.cld-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.cld")],-1)),t[281]||(t[281]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[283]||(t[283]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine ceildiv expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[282]||(t[282]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L203-L207",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ct,[e("summary",null,[t[284]||(t[284]=e("a",{id:"Base.copy-Tuple{Reactant.MLIR.IR.Operation}",href:"#Base.copy-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Base.copy")],-1)),t[285]||(t[285]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[287]||(t[287]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Creates a deep copy of an operation. The operation is not inserted and ownership is transferred to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[286]||(t[286]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vt,[e("summary",null,[t[288]||(t[288]=e("a",{id:"Base.div-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}",href:"#Base.div-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.div")],-1)),t[289]||(t[289]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[291]||(t[291]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine floordiv expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>`,2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[290]||(t[290]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L185-L191",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pt,[e("summary",null,[t[292]||(t[292]=e("a",{id:"Base.fill-Tuple{Reactant.MLIR.IR.Attribute, Reactant.MLIR.IR.Type}",href:"#Base.fill-Tuple{Reactant.MLIR.IR.Attribute, Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Base.fill")],-1)),t[293]||(t[293]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[295]||(t[295]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, shapedType)</span></span></code></pre></div><p>Creates a dense elements attribute with the given Shaped type containing a single replicated element (splat).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[294]||(t[294]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L435-L439",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xt,[e("summary",null,[t[296]||(t[296]=e("a",{id:"Base.gcd-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Base.gcd-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.gcd")],-1)),t[297]||(t[297]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[299]||(t[299]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gcd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the greatest known integral divisor of this affine expression. The result is always positive.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[298]||(t[298]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L40-L44",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",St,[e("summary",null,[t[300]||(t[300]=e("a",{id:"Base.hash-Tuple{Reactant.MLIR.IR.TypeID}",href:"#Base.hash-Tuple{Reactant.MLIR.IR.TypeID}"},[e("span",{class:"jlbinding"},"Base.hash")],-1)),t[301]||(t[301]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[303]||(t[303]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typeID)</span></span></code></pre></div><p>Returns the hash value of the type id.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[302]||(t[302]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/TypeID.jl#L14-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dt,[e("summary",null,[t[304]||(t[304]=e("a",{id:"Base.insert!-Tuple{Reactant.MLIR.IR.Block, Any, Reactant.MLIR.IR.Operation}",href:"#Base.insert!-Tuple{Reactant.MLIR.IR.Block, Any, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Base.insert!")],-1)),t[305]||(t[305]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[307]||(t[307]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, index, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and inserts it as <code>index</code> to the block. This is an expensive operation that scans the block linearly, prefer insertBefore/After instead.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[306]||(t[306]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L134-L139",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ft,[e("summary",null,[t[308]||(t[308]=e("a",{id:"Base.insert!-Tuple{Reactant.MLIR.IR.Region, Any, Reactant.MLIR.IR.Block}",href:"#Base.insert!-Tuple{Reactant.MLIR.IR.Region, Any, Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Base.insert!")],-1)),t[309]||(t[309]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[311]||(t[311]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, index, block)</span></span></code></pre></div><p>Takes a block owned by the caller and inserts it at <code>index</code> to the given region. This is an expensive operation that linearly scans the region, prefer insertAfter/Before instead.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[310]||(t[310]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L42-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vt,[e("summary",null,[t[312]||(t[312]=e("a",{id:"Base.isempty-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Base.isempty-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Base.isempty")],-1)),t[313]||(t[313]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[315]||(t[315]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isempty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is an empty affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[314]||(t[314]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L114-L118",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ot,[e("summary",null,[t[316]||(t[316]=e("a",{id:"Base.isempty-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Base.isempty-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Base.isempty")],-1)),t[317]||(t[317]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[319]||(t[319]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isempty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Checks whether the given set is a canonical empty set, e.g., the set returned by <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirIntegerSetEmptyGet-Tuple{Any, Any, Any}"><code>Reactant.MLIR.API.mlirIntegerSetEmptyGet</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[318]||(t[318]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L67-L71",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bt,[e("summary",null,[t[320]||(t[320]=e("a",{id:"Base.isperm-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Base.isperm-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Base.isperm")],-1)),t[321]||(t[321]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[323]||(t[323]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isperm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map represents a symbol-less permutation map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[322]||(t[322]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L180-L184",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nt,[e("summary",null,[t[324]||(t[324]=e("a",{id:"Base.mod-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}",href:"#Base.mod-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Base.mod")],-1)),t[325]||(t[325]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[327]||(t[327]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine mod expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[326]||(t[326]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L171-L175",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gt,[e("summary",null,[t[328]||(t[328]=e("a",{id:"Base.ndims-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Base.ndims-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Base.ndims")],-1)),t[329]||(t[329]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[331]||(t[331]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ndims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of dimensions of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[330]||(t[330]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L138-L142",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zt,[e("summary",null,[t[332]||(t[332]=e("a",{id:"Base.ndims-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Base.ndims-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Base.ndims")],-1)),t[333]||(t[333]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[335]||(t[335]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ndims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of dimensions in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[334]||(t[334]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L74-L78",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wt,[e("summary",null,[t[336]||(t[336]=e("a",{id:"Base.ndims-Tuple{Reactant.MLIR.IR.Type}",href:"#Base.ndims-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Base.ndims")],-1)),t[337]||(t[337]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[339]||(t[339]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ndims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the rank of the given ranked shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[338]||(t[338]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L348-L352",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ut,[e("summary",null,[t[340]||(t[340]=e("a",{id:"Base.parse-Tuple{Reactant.MLIR.IR.OpPassManager, String}",href:"#Base.parse-Tuple{Reactant.MLIR.IR.OpPassManager, String}"},[e("span",{class:"jlbinding"},"Base.parse")],-1)),t[341]||(t[341]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[343]||(t[343]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opPassManager, pipeline)</span></span></code></pre></div><p>Parse a textual MLIR pass pipeline and add it to the provided <code>OpPassManager</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[342]||(t[342]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L256-L260",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qt,[e("summary",null,[t[344]||(t[344]=e("a",{id:"Base.parse-Tuple{Type{Reactant.MLIR.IR.Attribute}, Any}",href:"#Base.parse-Tuple{Type{Reactant.MLIR.IR.Attribute}, Any}"},[e("span",{class:"jlbinding"},"Base.parse")],-1)),t[345]||(t[345]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[347]||(t[347]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Core.Type{Attribute}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Parses an attribute. The attribute is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[346]||(t[346]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L14-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qt,[e("summary",null,[t[348]||(t[348]=e("a",{id:"Base.parse-Tuple{Type{Reactant.MLIR.IR.Module}, Any}",href:"#Base.parse-Tuple{Type{Reactant.MLIR.IR.Module}, Any}"},[e("span",{class:"jlbinding"},"Base.parse")],-1)),t[349]||(t[349]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[351]||(t[351]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{Module}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Parses a module from the string and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[350]||(t[350]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Module.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wt,[e("summary",null,[t[352]||(t[352]=e("a",{id:"Base.parse-Tuple{Type{Reactant.MLIR.IR.Type}, Any}",href:"#Base.parse-Tuple{Type{Reactant.MLIR.IR.Type}, Any}"},[e("span",{class:"jlbinding"},"Base.parse")],-1)),t[353]||(t[353]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[355]||(t[355]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Parses a type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[354]||(t[354]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L12-L16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zt,[e("summary",null,[t[356]||(t[356]=e("a",{id:"Base.push!-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Operation}",href:"#Base.push!-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Base.push!")],-1)),t[357]||(t[357]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[359]||(t[359]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">push!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and appends it to the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[358]||(t[358]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L124-L128",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ht,[e("summary",null,[t[360]||(t[360]=e("a",{id:"Base.push!-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Block}",href:"#Base.push!-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Base.push!")],-1)),t[361]||(t[361]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[363]||(t[363]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">push!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, block)</span></span></code></pre></div><p>Takes a block owned by the caller and appends it to the given region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[362]||(t[362]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L32-L36",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jt,[e("summary",null,[t[364]||(t[364]=e("a",{id:"Base.push!-Tuple{Reactant.MLIR.IR.SymbolTable, Reactant.MLIR.IR.Operation}",href:"#Base.push!-Tuple{Reactant.MLIR.IR.SymbolTable, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Base.push!")],-1)),t[365]||(t[365]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[367]||(t[367]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">push!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symboltable, operation)</span></span></code></pre></div><p>Inserts the given operation into the given symbol table. The operation must have the symbol trait. If the symbol table already has a symbol with the same name, renames the symbol being inserted to ensure name uniqueness. Note that this does not move the operation itself into the block of the symbol table operation, this should be done separately. Returns the name of the symbol after insertion.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[366]||(t[366]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/SymbolTable.jl#L40-L47",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kt,[e("summary",null,[t[368]||(t[368]=e("a",{id:"Base.replace-Tuple{Reactant.MLIR.IR.AffineMap, Pair{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}, Any, Any}",href:"#Base.replace-Tuple{Reactant.MLIR.IR.AffineMap, Pair{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineExpr}, Any, Any}"},[e("span",{class:"jlbinding"},"Base.replace")],-1)),t[369]||(t[369]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[371]||(t[371]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapReplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, expression </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replacement, numResultDims, numResultSyms)</span></span></code></pre></div><p>Apply <code>AffineExpr::replace(map)</code> to each of the results and return a new new AffineMap with the new results and the specified number of dims and symbols.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[370]||(t[370]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L214-L218",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$t,[e("summary",null,[t[372]||(t[372]=e("a",{id:"Base.replace-Tuple{Reactant.MLIR.IR.IntegerSet, Any, Any}",href:"#Base.replace-Tuple{Reactant.MLIR.IR.IntegerSet, Any, Any}"},[e("span",{class:"jlbinding"},"Base.replace")],-1)),t[373]||(t[373]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[375]||(t[375]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetReplaceGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, dimReplacements, symbolReplacements, numResultDims, numResultSymbols)</span></span></code></pre></div><p>Gets or creates a new integer set in which the values and dimensions of the given set are replaced with the given affine expressions. <code>dimReplacements</code> and <code>symbolReplacements</code> are expected to point to at least as many consecutive expressions as the given set has dimensions and symbols, respectively. The new set will have <code>numResultDims</code> and <code>numResultSymbols</code> dimensions and symbols, respectively.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[374]||(t[374]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L31-L37",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xt,[e("summary",null,[t[376]||(t[376]=e("a",{id:"Base.reshape-Tuple{Reactant.MLIR.IR.Attribute, Vector{Int64}}",href:"#Base.reshape-Tuple{Reactant.MLIR.IR.Attribute, Vector{Int64}}"},[e("span",{class:"jlbinding"},"Base.reshape")],-1)),t[377]||(t[377]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[379]||(t[379]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reshape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, shapedType)</span></span></code></pre></div><p>Creates a dense elements attribute that has the same data as the given dense elements attribute and a different shaped type. The new type must have the same total number of elements.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[378]||(t[378]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L635-L639",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yt,[e("summary",null,[t[380]||(t[380]=e("a",{id:"Base.size-Tuple{Reactant.MLIR.IR.Type, Int64}",href:"#Base.size-Tuple{Reactant.MLIR.IR.Type, Int64}"},[e("span",{class:"jlbinding"},"Base.size")],-1)),t[381]||(t[381]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[383]||(t[383]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, i)</span></span></code></pre></div><p>Returns the <code>i</code>-th dimension of the given ranked shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[382]||(t[382]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L372-L376",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",te,[e("summary",null,[t[384]||(t[384]=e("a",{id:"Base.write-Tuple{String, Reactant.MLIR.IR.ExecutionEngine}",href:"#Base.write-Tuple{String, Reactant.MLIR.IR.ExecutionEngine}"},[e("span",{class:"jlbinding"},"Base.write")],-1)),t[385]||(t[385]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[387]||(t[387]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileName, jit)</span></span></code></pre></div><p>Dump as an object in <code>fileName</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[386]||(t[386]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/ExecutionEngine.jl#L54-L58",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ee,[e("summary",null,[t[388]||(t[388]=e("a",{id:"Reactant.MLIR.IR.AffineDimensionExpr-Tuple{Any}",href:"#Reactant.MLIR.IR.AffineDimensionExpr-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.AffineDimensionExpr")],-1)),t[389]||(t[389]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[391]||(t[391]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AffineDimensionExpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context)</span></span></code></pre></div><p>Creates an affine dimension expression with &#39;position&#39; in the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[390]||(t[390]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L69-L73",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",se,[e("summary",null,[t[392]||(t[392]=e("a",{id:"Reactant.MLIR.IR.BFloat16Type-Tuple{}",href:"#Reactant.MLIR.IR.BFloat16Type-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.BFloat16Type")],-1)),t[393]||(t[393]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[395]||(t[395]=e("p",null,"BFloat16Type(; context=context())",-1)),t[396]||(t[396]=e("p",null,"Creates a bf16 type in the given context. The type is owned by the context.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[394]||(t[394]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L157-L161",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ae,[e("summary",null,[t[397]||(t[397]=e("a",{id:"Reactant.MLIR.IR.ConstantAffineMap-Tuple{Any}",href:"#Reactant.MLIR.IR.ConstantAffineMap-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ConstantAffineMap")],-1)),t[398]||(t[398]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[400]||(t[400]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConstantAffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a single constant result affine map in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[399]||(t[399]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L59-L63",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ie,[e("summary",null,[t[401]||(t[401]=e("a",{id:"Reactant.MLIR.IR.ConstantExpr-Tuple{Any}",href:"#Reactant.MLIR.IR.ConstantExpr-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ConstantExpr")],-1)),t[402]||(t[402]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[404]||(t[404]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConstantExpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(constant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an affine constant expression with &#39;constant&#39; in the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[403]||(t[403]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L118-L122",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",le,[e("summary",null,[t[405]||(t[405]=e("a",{id:"Reactant.MLIR.IR.DenseElementsAttribute-Tuple{AbstractArray{Bool}}",href:"#Reactant.MLIR.IR.DenseElementsAttribute-Tuple{AbstractArray{Bool}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.DenseElementsAttribute")],-1)),t[406]||(t[406]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[408]||(t[408]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DenseElementsAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a dense elements attribute with the given shaped type from elements of a specific type. Expects the element type of the shaped type to match the data element type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[407]||(t[407]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L499-L503",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ne,[e("summary",null,[t[409]||(t[409]=e("a",{id:"Reactant.MLIR.IR.DenseElementsAttribute-Tuple{AbstractArray{String}}",href:"#Reactant.MLIR.IR.DenseElementsAttribute-Tuple{AbstractArray{String}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.DenseElementsAttribute")],-1)),t[410]||(t[410]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[412]||(t[412]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DenseElementsAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{String}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a dense elements attribute with the given shaped type from string elements.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[411]||(t[411]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L620-L624",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",re,[e("summary",null,[t[413]||(t[413]=e("a",{id:"Reactant.MLIR.IR.DenseElementsAttribute-Tuple{Reactant.MLIR.IR.Type, AbstractArray}",href:"#Reactant.MLIR.IR.DenseElementsAttribute-Tuple{Reactant.MLIR.IR.Type, AbstractArray}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.DenseElementsAttribute")],-1)),t[414]||(t[414]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[416]||(t[416]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DenseElementsAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, elements)</span></span></code></pre></div><p>Creates a dense elements attribute with the given Shaped type and elements in the same context as the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[415]||(t[415]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L423-L427",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oe,[e("summary",null,[t[417]||(t[417]=e("a",{id:"Reactant.MLIR.IR.FlatSymbolRefAttribute-Tuple{String}",href:"#Reactant.MLIR.IR.FlatSymbolRefAttribute-Tuple{String}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.FlatSymbolRefAttribute")],-1)),t[418]||(t[418]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[420]||(t[420]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FlatSymbolRefAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, symbol)</span></span></code></pre></div><p>Creates a flat symbol reference attribute in the given context referencing a symbol identified by the given string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[419]||(t[419]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L351-L355",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pe,[e("summary",null,[t[421]||(t[421]=e("a",{id:"Reactant.MLIR.IR.Float8E4M3FN-Tuple{}",href:"#Reactant.MLIR.IR.Float8E4M3FN-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Float8E4M3FN")],-1)),t[422]||(t[422]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[424]||(t[424]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float8E4M3FN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an f8E4M3FN type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[423]||(t[423]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L150-L154",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",de,[e("summary",null,[t[425]||(t[425]=e("a",{id:"Reactant.MLIR.IR.Float8E5M2-Tuple{}",href:"#Reactant.MLIR.IR.Float8E5M2-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.Float8E5M2")],-1)),t[426]||(t[426]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[428]||(t[428]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float8E5M2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an f8E5M2 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[427]||(t[427]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L143-L147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ue,[e("summary",null,[t[429]||(t[429]=e("a",{id:"Reactant.MLIR.IR.FunctionType-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.FunctionType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.FunctionType")],-1)),t[430]||(t[430]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[432]||(t[432]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FunctionType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputs, results; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a function type, mapping a list of input types to result types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[431]||(t[431]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L672-L676",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ce,[e("summary",null,[t[433]||(t[433]=e("a",{id:"Reactant.MLIR.IR.IdentityAffineMap-Tuple{Any}",href:"#Reactant.MLIR.IR.IdentityAffineMap-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.IdentityAffineMap")],-1)),t[434]||(t[434]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[436]||(t[436]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdentityAffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ndims; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an affine map with &#39;ndims&#39; identity in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[435]||(t[435]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L67-L71",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",he,[e("summary",null,[t[437]||(t[437]=e("a",{id:"Reactant.MLIR.IR.IndexType-Tuple{}",href:"#Reactant.MLIR.IR.IndexType-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.IndexType")],-1)),t[438]||(t[438]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[440]||(t[440]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IndexType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an index type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[439]||(t[439]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L57-L61",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",be,[e("summary",null,[t[441]||(t[441]=e("a",{id:"Reactant.MLIR.IR.MemRefType-Tuple{Reactant.MLIR.IR.Type, Any, Any, Any}",href:"#Reactant.MLIR.IR.MemRefType-Tuple{Reactant.MLIR.IR.Type, Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.MemRefType")],-1)),t[442]||(t[442]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[444]||(t[444]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MemRefType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, rank, shape, layout, memorySpace; location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a MemRef type with the given rank and shape, a potentially empty list of affine layout maps, the given memory space and element type, in the same context as element type. The type is owned by the context. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[443]||(t[443]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L529-L534",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ye,[e("summary",null,[t[445]||(t[445]=e("a",{id:"Reactant.MLIR.IR.MemRefType-Tuple{Reactant.MLIR.IR.Type, Any, Any}",href:"#Reactant.MLIR.IR.MemRefType-Tuple{Reactant.MLIR.IR.Type, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.MemRefType")],-1)),t[446]||(t[446]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[448]||(t[448]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MemRefType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, rank, shape, memorySpace; location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a MemRef type with the given rank, shape, memory space and element type in the same context as the element type. The type has no affine maps, i.e. represents a default row-major contiguous memref. The type is owned by the context. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[447]||(t[447]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L554-L560",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ge,[e("summary",null,[t[449]||(t[449]=e("a",{id:"Reactant.MLIR.IR.MemRefType-Tuple{Reactant.MLIR.IR.Type, Any}",href:"#Reactant.MLIR.IR.MemRefType-Tuple{Reactant.MLIR.IR.Type, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.MemRefType")],-1)),t[450]||(t[450]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[452]||(t[452]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MemRefType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, memorySpace)</span></span></code></pre></div><p>Creates an Unranked MemRef type with the given element type and in the given memory space. The type is owned by the context of element type. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[451]||(t[451]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L575-L580",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",me,[e("summary",null,[t[453]||(t[453]=e("a",{id:"Reactant.MLIR.IR.MinorIdentityAffineMap-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.MinorIdentityAffineMap-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.MinorIdentityAffineMap")],-1)),t[454]||(t[454]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[456]||(t[456]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MinorIdentityAffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ndims, nresults; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an identity affine map on the most minor dimensions in the context. The affine map is owned by the context. The function asserts that the number of dimensions is greater or equal to the number of results.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[455]||(t[455]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L75-L80",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ke,[e("summary",null,[t[457]||(t[457]=e("a",{id:"Reactant.MLIR.IR.OpaqueAttribute-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.IR.OpaqueAttribute-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.OpaqueAttribute")],-1)),t[458]||(t[458]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[460]||(t[460]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OpaqueAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dialectNamespace, dataLength, data, type; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an opaque attribute in the given context associated with the dialect identified by its namespace. The attribute contains opaque byte data of the specified length (data need not be null-terminated).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[459]||(t[459]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L234-L239",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fe,[e("summary",null,[t[461]||(t[461]=e("a",{id:"Reactant.MLIR.IR.OpaqueType-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.OpaqueType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.OpaqueType")],-1)),t[462]||(t[462]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[464]||(t[464]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OpaqueType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dialectNamespace, typeData; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an opaque type in the given context associated with the dialect identified by its namespace. The type contains opaque byte data of the specified length (data need not be null-terminated).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[463]||(t[463]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L729-L733",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Re,[e("summary",null,[t[465]||(t[465]=e("a",{id:"Reactant.MLIR.IR.PermutationAffineMap-Tuple{Any}",href:"#Reactant.MLIR.IR.PermutationAffineMap-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.PermutationAffineMap")],-1)),t[466]||(t[466]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[468]||(t[468]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PermutationAffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(permutation; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an affine map with a permutation expression and its size in the context. The permutation expression is a non-empty vector of integers. The elements of the permutation vector must be continuous from 0 and cannot be repeated (i.e. <code>[1,2,0]</code> is a valid permutation. <code>[2,0]</code> or <code>[1,1,2]</code> is an invalid invalid permutation). The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[467]||(t[467]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L86-L93",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ie,[e("summary",null,[t[469]||(t[469]=e("a",{id:"Reactant.MLIR.IR.SymbolExpr-Tuple{Any}",href:"#Reactant.MLIR.IR.SymbolExpr-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.SymbolExpr")],-1)),t[470]||(t[470]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[472]||(t[472]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SymbolExpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates an affine symbol expression with &#39;position&#39; in the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[471]||(t[471]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L84-L88",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Te,[e("summary",null,[t[473]||(t[473]=e("a",{id:"Reactant.MLIR.IR.SymbolRefAttribute-Tuple{String, Vector{Reactant.MLIR.IR.Attribute}}",href:"#Reactant.MLIR.IR.SymbolRefAttribute-Tuple{String, Vector{Reactant.MLIR.IR.Attribute}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.SymbolRefAttribute")],-1)),t[474]||(t[474]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[476]||(t[476]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SymbolRefAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbol, references; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a symbol reference attribute in the given context referencing a symbol identified by the given string inside a list of nested references. Each of the references in the list must not be nested.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[475]||(t[475]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L304-L309",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ae,[e("summary",null,[t[477]||(t[477]=e("a",{id:"Reactant.MLIR.IR.TensorType",href:"#Reactant.MLIR.IR.TensorType"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.TensorType")],-1)),t[478]||(t[478]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[480]||(t[480]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TensorType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shape, elementType, encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a tensor type of a fixed rank with the given shape, element type, and optional encoding in the same context as the element type. The type is owned by the context. Tensor types without any specific encoding field should assign <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirAttributeGetNull-Tuple{}"><code>Reactant.MLIR.API.mlirAttributeGetNull</code></a> to this parameter. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[479]||(t[479]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L439-L445",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",je,[e("summary",null,[t[481]||(t[481]=e("a",{id:"Reactant.MLIR.IR.TensorType-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.TensorType-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.TensorType")],-1)),t[482]||(t[482]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[484]||(t[484]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TensorType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType)</span></span></code></pre></div><p>Creates an unranked tensor type with the given element type in the same context as the element type. The type is owned by the context. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[483]||(t[483]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L463-L468",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_e,[e("summary",null,[t[485]||(t[485]=e("a",{id:"Reactant.MLIR.IR.UnitAttribute-Tuple{}",href:"#Reactant.MLIR.IR.UnitAttribute-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.UnitAttribute")],-1)),t[486]||(t[486]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[488]||(t[488]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Creates a unit attribute in the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[487]||(t[487]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L397-L401",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Me,[e("summary",null,[t[489]||(t[489]=e("a",{id:"Reactant.MLIR.IR.VectorType-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.IR.VectorType-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.VectorType")],-1)),t[490]||(t[490]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[492]||(t[492]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VectorType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rank, shape, elementType; location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a vector type of the shape identified by its rank and dimensions, with the given element type in the same context as the element type. The type is owned by the context. If <code>check=true</code>, emits appropriate diagnostics on illegal arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[491]||(t[491]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L413-L418",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Le,[e("summary",null,[t[493]||(t[493]=e("a",{id:"Reactant.MLIR.IR.add_owned_pass!-Tuple{Reactant.MLIR.IR.OpPassManager, Any}",href:"#Reactant.MLIR.IR.add_owned_pass!-Tuple{Reactant.MLIR.IR.OpPassManager, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.add_owned_pass!")],-1)),t[494]||(t[494]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[496]||(t[496]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_owned_pass!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opPassManager, pass)</span></span></code></pre></div><p>Add a pass and transfer ownership to the provided <code>OpPassManager</code>. If the pass is not a generic operation pass or matching the type of the provided <code>OpPassManager</code>, a new <code>OpPassManager</code> is implicitly nested under the provided <code>OpPassManager</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[495]||(t[495]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L246-L250",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ee,[e("summary",null,[t[497]||(t[497]=e("a",{id:"Reactant.MLIR.IR.add_owned_pass!-Tuple{Reactant.MLIR.IR.PassManager, Any}",href:"#Reactant.MLIR.IR.add_owned_pass!-Tuple{Reactant.MLIR.IR.PassManager, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.add_owned_pass!")],-1)),t[498]||(t[498]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[500]||(t[500]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_owned_pass!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, pass)</span></span></code></pre></div><p>Add a pass and transfer ownership to the provided top-level <code>PassManager</code>. If the pass is not a generic operation pass or a <code>ModulePass</code>, a new <code>OpPassManager</code> is implicitly nested under the provided PassManager.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[499]||(t[499]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L236-L240",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ce,[e("summary",null,[t[501]||(t[501]=e("a",{id:"Reactant.MLIR.IR.add_pipeline!-Tuple{Reactant.MLIR.IR.OpPassManager, Any}",href:"#Reactant.MLIR.IR.add_pipeline!-Tuple{Reactant.MLIR.IR.OpPassManager, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.add_pipeline!")],-1)),t[502]||(t[502]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[504]||(t[504]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_pipeline!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opPassManager, pipeline)</span></span></code></pre></div><p>Parse a sequence of textual MLIR pass pipeline elements and add them to the provided OpPassManager. If parsing fails an error message is reported using the provided callback.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[503]||(t[503]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L274-L278",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ve,[e("summary",null,[t[505]||(t[505]=e("a",{id:"Reactant.MLIR.IR.affinemap-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.affinemap-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.affinemap")],-1)),t[506]||(t[506]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[508]||(t[508]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">affinemap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the affine map of the given MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[507]||(t[507]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L617-L621",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pe,[e("summary",null,[t[509]||(t[509]=e("a",{id:"Reactant.MLIR.IR.argument-Tuple{Reactant.MLIR.IR.Block, Any}",href:"#Reactant.MLIR.IR.argument-Tuple{Reactant.MLIR.IR.Block, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.argument")],-1)),t[510]||(t[510]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[512]||(t[512]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">argument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, i)</span></span></code></pre></div><p>Returns <code>i</code>-th argument of the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[511]||(t[511]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L70-L74",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xe,[e("summary",null,[t[513]||(t[513]=e("a",{id:"Reactant.MLIR.IR.attr!-Tuple{Reactant.MLIR.IR.Operation, Any, Any}",href:"#Reactant.MLIR.IR.attr!-Tuple{Reactant.MLIR.IR.Operation, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.attr!")],-1)),t[514]||(t[514]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[516]||(t[516]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attr!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name, attr)</span></span></code></pre></div><p>Sets an attribute by name, replacing the existing if it exists or adding a new one otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[515]||(t[515]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L202-L206",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Se,[e("summary",null,[t[517]||(t[517]=e("a",{id:"Reactant.MLIR.IR.attr-Tuple{Reactant.MLIR.IR.Operation, AbstractString}",href:"#Reactant.MLIR.IR.attr-Tuple{Reactant.MLIR.IR.Operation, AbstractString}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.attr")],-1)),t[518]||(t[518]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[520]||(t[520]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Returns an attribute attached to the operation given its name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[519]||(t[519]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L189-L193",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",De,[e("summary",null,[t[521]||(t[521]=e("a",{id:"Reactant.MLIR.IR.attr-Tuple{Reactant.MLIR.IR.Operation, Any}",href:"#Reactant.MLIR.IR.attr-Tuple{Reactant.MLIR.IR.Operation, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.attr")],-1)),t[522]||(t[522]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[524]||(t[524]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, i)</span></span></code></pre></div><p>Return <code>i</code>-th attribute of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[523]||(t[523]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L179-L183",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fe,[e("summary",null,[t[525]||(t[525]=e("a",{id:"Reactant.MLIR.IR.bitwidth-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.bitwidth-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.bitwidth")],-1)),t[526]||(t[526]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[528]||(t[528]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bitwidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the bitwidth of an integer type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[527]||(t[527]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L132-L136",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ve,[e("summary",null,[t[529]||(t[529]=e("a",{id:"Reactant.MLIR.IR.block-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.block-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.block")],-1)),t[530]||(t[530]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[532]||(t[532]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the block that owns this operation, returning null if the operation is not owned.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[531]||(t[531]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L56-L60",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oe,[e("summary",null,[t[533]||(t[533]=e("a",{id:"Reactant.MLIR.IR.block_arg_num-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.block_arg_num-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.block_arg_num")],-1)),t[534]||(t[534]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[536]||(t[536]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_arg_num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the position of the value in the argument list of its block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[535]||(t[535]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L69-L73",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Be,[e("summary",null,[t[537]||(t[537]=e("a",{id:"Reactant.MLIR.IR.block_owner-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.block_owner-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.block_owner")],-1)),t[538]||(t[538]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[540]||(t[540]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_owner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the block in which this value is defined as an argument. Asserts if the value is not a block argument.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[539]||(t[539]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L35-L39",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ne,[e("summary",null,[t[541]||(t[541]=e("a",{id:"Reactant.MLIR.IR.body-Tuple{Any}",href:"#Reactant.MLIR.IR.body-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.body")],-1)),t[542]||(t[542]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[544]||(t[544]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Gets the body of the module, i.e. the only block it contains.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[543]||(t[543]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Module.jl#L43-L47",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ge,[e("summary",null,[t[545]||(t[545]=e("a",{id:"Reactant.MLIR.IR.compose-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.compose-Tuple{Reactant.MLIR.IR.AffineExpr, Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.compose")],-1)),t[546]||(t[546]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[548]||(t[548]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, affineMap)</span></span></code></pre></div><p>Composes the given map with the given expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[547]||(t[547]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ze,[e("summary",null,[t[549]||(t[549]=e("a",{id:"Reactant.MLIR.IR.constraint-Tuple{Reactant.MLIR.IR.IntegerSet, Any}",href:"#Reactant.MLIR.IR.constraint-Tuple{Reactant.MLIR.IR.IntegerSet, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.constraint")],-1)),t[550]||(t[550]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[552]||(t[552]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, i)</span></span></code></pre></div><p>Returns <code>i</code>-th constraint of the set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[551]||(t[551]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L116-L120",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",we,[e("summary",null,[t[553]||(t[553]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[554]||(t[554]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[556]||(t[556]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Gets the context that owns the affine expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[555]||(t[555]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L19-L23",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ue,[e("summary",null,[t[557]||(t[557]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[558]||(t[558]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[560]||(t[560]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Gets the context that the given affine map was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[559]||(t[559]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L34-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qe,[e("summary",null,[t[561]||(t[561]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[562]||(t[562]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[564]||(t[564]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the context that an attribute was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[563]||(t[563]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L29-L33",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qe,[e("summary",null,[t[565]||(t[565]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Identifier}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Identifier}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[566]||(t[566]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[568]||(t[568]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ident)</span></span></code></pre></div><p>Returns the context associated with this identifier</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[567]||(t[567]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Identifier.jl#L22-L26",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",We,[e("summary",null,[t[569]||(t[569]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[570]||(t[570]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[572]||(t[572]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Gets the context in which the given integer set lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[571]||(t[571]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L60-L64",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ze,[e("summary",null,[t[573]||(t[573]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Module}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Module}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[574]||(t[574]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[576]||(t[576]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Gets the context that a module was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[575]||(t[575]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Module.jl#L36-L40",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",He,[e("summary",null,[t[577]||(t[577]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[578]||(t[578]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[580]||(t[580]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the context this operation is associated with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[579]||(t[579]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L28-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Je,[e("summary",null,[t[581]||(t[581]=e("a",{id:"Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.context-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.context")],-1)),t[582]||(t[582]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[584]||(t[584]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the context that a type was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[583]||(t[583]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ke,[e("summary",null,[t[585]||(t[585]=e("a",{id:"Reactant.MLIR.IR.data-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.data-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.data")],-1)),t[586]||(t[586]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[588]||(t[588]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the raw data as a string reference. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[587]||(t[587]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L253-L257",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$e,[e("summary",null,[t[589]||(t[589]=e("a",{id:"Reactant.MLIR.IR.data-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.data-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.data")],-1)),t[590]||(t[590]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[592]||(t[592]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueTypeGetData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the raw data as a string reference. The data remains live as long as the context in which the type lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[591]||(t[591]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L751-L755",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xe,[e("summary",null,[t[593]||(t[593]=e("a",{id:"Reactant.MLIR.IR.delete!-Tuple{Reactant.MLIR.IR.SymbolTable, Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.delete!-Tuple{Reactant.MLIR.IR.SymbolTable, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.delete!")],-1)),t[594]||(t[594]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[596]||(t[596]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">delete!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symboltable, operation)</span></span></code></pre></div><p>Removes the given operation from the symbol table and erases it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[595]||(t[595]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/SymbolTable.jl#L50-L54",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ye,[e("summary",null,[t[597]||(t[597]=e("a",{id:"Reactant.MLIR.IR.dynsize-Tuple{}",href:"#Reactant.MLIR.IR.dynsize-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.dynsize")],-1)),t[598]||(t[598]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[600]||(t[600]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dynsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the value indicating a dynamic size in a shaped type. Prefer <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.IR.isdynsize-Tuple{Any}"><code>isdynsize</code></a> to direct comparisons with this value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[599]||(t[599]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L391-L395",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ts,[e("summary",null,[t[601]||(t[601]=e("a",{id:"Reactant.MLIR.IR.dynstrideoroffset-Tuple{}",href:"#Reactant.MLIR.IR.dynstrideoroffset-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.dynstrideoroffset")],-1)),t[602]||(t[602]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[604]||(t[604]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeGetDynamicStrideOrOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the value indicating a dynamic stride or offset in a shaped type. Prefer <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.IR.isdynstrideoroffset-Tuple{Any}"><code>isdynstrideoroffset</code></a> to direct comparisons with this value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[603]||(t[603]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L405-L409",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",es,[e("summary",null,[t[605]||(t[605]=e("a",{id:"Reactant.MLIR.IR.enable_ir_printing!-Tuple{Any}",href:"#Reactant.MLIR.IR.enable_ir_printing!-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.enable_ir_printing!")],-1)),t[606]||(t[606]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[608]||(t[608]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enable_ir_printing!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager)</span></span></code></pre></div><p>Enable mlir-print-ir-after-all.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[607]||(t[607]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L38-L42",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ss,[e("summary",null,[t[609]||(t[609]=e("a",{id:"Reactant.MLIR.IR.enable_verifier!",href:"#Reactant.MLIR.IR.enable_verifier!"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.enable_verifier!")],-1)),t[610]||(t[610]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[612]||(t[612]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enable_verifier!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, enable)</span></span></code></pre></div><p>Enable / disable verify-each.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[611]||(t[611]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L57-L61",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",as,[e("summary",null,[t[613]||(t[613]=e("a",{id:"Reactant.MLIR.IR.encoding-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.encoding-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.encoding")],-1)),t[614]||(t[614]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[616]||(t[616]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the &#39;encoding&#39; attribute from the ranked tensor type, returning a <code>nothing</code> if none.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[615]||(t[615]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L517-L521",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",is,[e("summary",null,[t[617]||(t[617]=e("a",{id:"Reactant.MLIR.IR.erase_argument!-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.erase_argument!-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.erase_argument!")],-1)),t[618]||(t[618]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[620]||(t[620]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">erase_argument!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, i)</span></span></code></pre></div><p>Erase argument <code>i</code> of the block. Returns the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[619]||(t[619]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L88-L92",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ls,[e("summary",null,[t[621]||(t[621]=e("a",{id:"Reactant.MLIR.IR.failure-Tuple{}",href:"#Reactant.MLIR.IR.failure-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.failure")],-1)),t[622]||(t[622]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[624]||(t[624]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a logical result representing a failure.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[623]||(t[623]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/LogicalResult.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ns,[e("summary",null,[t[625]||(t[625]=e("a",{id:"Reactant.MLIR.IR.first_block-Tuple{Reactant.MLIR.IR.Region}",href:"#Reactant.MLIR.IR.first_block-Tuple{Reactant.MLIR.IR.Region}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.first_block")],-1)),t[626]||(t[626]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[628]||(t[628]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first_block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region)</span></span></code></pre></div><p>Gets the first block in the region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[627]||(t[627]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L73-L77",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rs,[e("summary",null,[t[629]||(t[629]=e("a",{id:"Reactant.MLIR.IR.first_op-Tuple{Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.first_op-Tuple{Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.first_op")],-1)),t[630]||(t[630]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[632]||(t[632]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first_op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the first operation in the block or <code>nothing</code> if empty.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[631]||(t[631]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L101-L105",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",os,[e("summary",null,[t[633]||(t[633]=e("a",{id:"Reactant.MLIR.IR.first_use-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.first_use-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.first_use")],-1)),t[634]||(t[634]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[636]||(t[636]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first_use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns an <code>OpOperand</code> representing the first use of the value, or a <code>nothing</code> if there are no uses.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[635]||(t[635]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/OpOperand.jl#L12-L16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ps,[e("summary",null,[t[637]||(t[637]=e("a",{id:"Reactant.MLIR.IR.flatsymbol-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.flatsymbol-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.flatsymbol")],-1)),t[638]||(t[638]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[640]||(t[640]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatsymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the referenced symbol as a string reference. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[639]||(t[639]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L359-L363",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ds,[e("summary",null,[t[641]||(t[641]=e("a",{id:"Reactant.MLIR.IR.hasrank-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.hasrank-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.hasrank")],-1)),t[642]||(t[642]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[644]||(t[644]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasrank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given shaped type is ranked.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[643]||(t[643]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L341-L345",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",us,[e("summary",null,[t[645]||(t[645]=e("a",{id:"Reactant.MLIR.IR.hasstaticshape-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.hasstaticshape-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.hasstaticshape")],-1)),t[646]||(t[646]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[648]||(t[648]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasstaticshape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given shaped type has a static shape.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[647]||(t[647]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L358-L362",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cs,[e("summary",null,[t[649]||(t[649]=e("a",{id:"Reactant.MLIR.IR.input-Tuple{Reactant.MLIR.IR.Type, Any}",href:"#Reactant.MLIR.IR.input-Tuple{Reactant.MLIR.IR.Type, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.input")],-1)),t[650]||(t[650]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[652]||(t[652]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, i)</span></span></code></pre></div><p>Returns the <code>i</code>-th input type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[651]||(t[651]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L708-L712",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hs,[e("summary",null,[t[653]||(t[653]=e("a",{id:"Reactant.MLIR.IR.insert_after!-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.insert_after!-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.insert_after!")],-1)),t[654]||(t[654]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[656]||(t[656]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert_after!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, reference, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and inserts it after the (non-owned) reference operation in the given block. If the reference is null, prepends the operation. Otherwise, the reference must belong to the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[655]||(t[655]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L150-L154",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bs,[e("summary",null,[t[657]||(t[657]=e("a",{id:"Reactant.MLIR.IR.insert_after!-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.insert_after!-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.insert_after!")],-1)),t[658]||(t[658]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[660]||(t[660]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert_after!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, reference, block)</span></span></code></pre></div><p>Takes a block owned by the caller and inserts it after the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, prepends the block to the region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[659]||(t[659]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L57-L61",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ys,[e("summary",null,[t[661]||(t[661]=e("a",{id:"Reactant.MLIR.IR.insert_before!-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.insert_before!-Tuple{Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.insert_before!")],-1)),t[662]||(t[662]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[664]||(t[664]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert_before!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, reference, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and inserts it before the (non-owned) reference operation in the given block. If the reference is null, appends the operation. Otherwise, the reference must belong to the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[663]||(t[663]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L160-L164",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gs,[e("summary",null,[t[665]||(t[665]=e("a",{id:"Reactant.MLIR.IR.insert_before!-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.insert_before!-Tuple{Reactant.MLIR.IR.Region, Reactant.MLIR.IR.Block, Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.insert_before!")],-1)),t[666]||(t[666]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[668]||(t[668]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert_before!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, reference, block)</span></span></code></pre></div><p>Takes a block owned by the caller and inserts it before the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, appends the block to the region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[667]||(t[667]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Region.jl#L65-L69",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ms,[e("summary",null,[t[669]||(t[669]=e("a",{id:"Reactant.MLIR.IR.is_block_arg-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.is_block_arg-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.is_block_arg")],-1)),t[670]||(t[670]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[672]||(t[672]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_block_arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns 1 if the value is a block argument, 0 otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[671]||(t[671]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ks,[e("summary",null,[t[673]||(t[673]=e("a",{id:"Reactant.MLIR.IR.is_op_res-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.is_op_res-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.is_op_res")],-1)),t[674]||(t[674]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[676]||(t[676]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_op_res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns 1 if the value is an operation result, 0 otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[675]||(t[675]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L28-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fs,[e("summary",null,[t[677]||(t[677]=e("a",{id:"Reactant.MLIR.IR.is_pure_affine-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.is_pure_affine-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.is_pure_affine")],-1)),t[678]||(t[678]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[680]||(t[680]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_pure_affine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a pure affine expression, i.e. mul, floordiv, ceildic, and mod is only allowed w.r.t constants.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[679]||(t[679]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L33-L37",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rs,[e("summary",null,[t[681]||(t[681]=e("a",{id:"Reactant.MLIR.IR.is_registered-Tuple{Any}",href:"#Reactant.MLIR.IR.is_registered-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.is_registered")],-1)),t[682]||(t[682]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[684]||(t[684]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_registered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name; context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Returns whether the given fully-qualified operation (i.e. &#39;dialect.operation&#39;) is registered with the context. This will return true if the dialect is loaded and the operation is registered within the dialect.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[683]||(t[683]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L275-L280",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Is,[e("summary",null,[t[685]||(t[685]=e("a",{id:"Reactant.MLIR.IR.is_symbolic_or_constant-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.is_symbolic_or_constant-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.is_symbolic_or_constant")],-1)),t[686]||(t[686]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[688]||(t[688]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_symbolic_or_constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is made out of only symbols and constants.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[687]||(t[687]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L26-L30",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ts,[e("summary",null,[t[689]||(t[689]=e("a",{id:"Reactant.MLIR.IR.isadd-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.isadd-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isadd")],-1)),t[690]||(t[690]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[692]||(t[692]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isadd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an add expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[691]||(t[691]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L136-L140",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",As,[e("summary",null,[t[693]||(t[693]=e("a",{id:"Reactant.MLIR.IR.isaffinemap-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isaffinemap-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isaffinemap")],-1)),t[694]||(t[694]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[696]||(t[696]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isaffinemap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an affine map attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[695]||(t[695]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L50-L54",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",js,[e("summary",null,[t[697]||(t[697]=e("a",{id:"Reactant.MLIR.IR.isarray-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isarray-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isarray")],-1)),t[698]||(t[698]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[700]||(t[700]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an array attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[699]||(t[699]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L71-L75",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_s,[e("summary",null,[t[701]||(t[701]=e("a",{id:"Reactant.MLIR.IR.isbf16-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isbf16-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isbf16")],-1)),t[702]||(t[702]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[704]||(t[704]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isbf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a bf16 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[703]||(t[703]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L283-L287",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ms,[e("summary",null,[t[705]||(t[705]=e("a",{id:"Reactant.MLIR.IR.isbinary-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.isbinary-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isbinary")],-1)),t[706]||(t[706]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[708]||(t[708]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isbinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is binary.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[707]||(t[707]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L211-L215",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ls,[e("summary",null,[t[709]||(t[709]=e("a",{id:"Reactant.MLIR.IR.isbool-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isbool-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isbool")],-1)),t[710]||(t[710]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[712]||(t[712]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isbool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a bool attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[711]||(t[711]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L196-L200",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Es,[e("summary",null,[t[713]||(t[713]=e("a",{id:"Reactant.MLIR.IR.isceildiv-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.isceildiv-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isceildiv")],-1)),t[714]||(t[714]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[716]||(t[716]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isceildiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an ceildiv expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[715]||(t[715]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L196-L200",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cs,[e("summary",null,[t[717]||(t[717]=e("a",{id:"Reactant.MLIR.IR.iscomplex-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.iscomplex-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.iscomplex")],-1)),t[718]||(t[718]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[720]||(t[720]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iscomplex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Complex type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[719]||(t[719]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L326-L330",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vs,[e("summary",null,[t[721]||(t[721]=e("a",{id:"Reactant.MLIR.IR.isconstantexpr-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.isconstantexpr-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isconstantexpr")],-1)),t[722]||(t[722]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[724]||(t[724]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isconstantexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a constant expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[723]||(t[723]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L111-L115",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ps,[e("summary",null,[t[725]||(t[725]=e("a",{id:"Reactant.MLIR.IR.isconstrainteq-Tuple{Reactant.MLIR.IR.IntegerSet, Any}",href:"#Reactant.MLIR.IR.isconstrainteq-Tuple{Reactant.MLIR.IR.IntegerSet, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isconstrainteq")],-1)),t[726]||(t[726]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[728]||(t[728]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetIsConstraintEq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, i)</span></span></code></pre></div><p>Returns <code>true</code> of the <code>i</code>-th constraint of the set is an equality constraint, <code>false</code> otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[727]||(t[727]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L123-L127",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xs,[e("summary",null,[t[729]||(t[729]=e("a",{id:"Reactant.MLIR.IR.isdenseelements-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isdenseelements-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isdenseelements")],-1)),t[730]||(t[730]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[732]||(t[732]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isdenseelements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a dense elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[731]||(t[731]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L414-L418",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ss,[e("summary",null,[t[733]||(t[733]=e("a",{id:"Reactant.MLIR.IR.isdict-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isdict-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isdict")],-1)),t[734]||(t[734]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[736]||(t[736]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isdict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a dictionary attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[735]||(t[735]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L86-L90",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ds,[e("summary",null,[t[737]||(t[737]=e("a",{id:"Reactant.MLIR.IR.isdimexpr-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.isdimexpr-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isdimexpr")],-1)),t[738]||(t[738]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[740]||(t[740]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isdimexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a dimension expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[739]||(t[739]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L62-L66",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fs,[e("summary",null,[t[741]||(t[741]=e("a",{id:"Reactant.MLIR.IR.isdyndim-Tuple{Reactant.MLIR.IR.Type, Int64}",href:"#Reactant.MLIR.IR.isdyndim-Tuple{Reactant.MLIR.IR.Type, Int64}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isdyndim")],-1)),t[742]||(t[742]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[744]||(t[744]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isdyndim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, i)</span></span></code></pre></div><p>Checks wither the <code>i</code>-th dimension of the given shaped type is dynamic.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[743]||(t[743]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L365-L369",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vs,[e("summary",null,[t[745]||(t[745]=e("a",{id:"Reactant.MLIR.IR.isdynsize-Tuple{Any}",href:"#Reactant.MLIR.IR.isdynsize-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isdynsize")],-1)),t[746]||(t[746]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[748]||(t[748]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isdynsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size)</span></span></code></pre></div><p>Checks whether the given value is used as a placeholder for dynamic sizes in shaped types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[747]||(t[747]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L384-L388",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Os,[e("summary",null,[t[749]||(t[749]=e("a",{id:"Reactant.MLIR.IR.isdynstrideoroffset-Tuple{Any}",href:"#Reactant.MLIR.IR.isdynstrideoroffset-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isdynstrideoroffset")],-1)),t[750]||(t[750]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[752]||(t[752]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeIsDynamicStrideOrOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span></code></pre></div><p>Checks whether the given value is used as a placeholder for dynamic strides and offsets in shaped types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[751]||(t[751]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L398-L402",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bs,[e("summary",null,[t[753]||(t[753]=e("a",{id:"Reactant.MLIR.IR.iselements-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.iselements-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.iselements")],-1)),t[754]||(t[754]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[756]||(t[756]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iselements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[755]||(t[755]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L404-L408",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ns,[e("summary",null,[t[757]||(t[757]=e("a",{id:"Reactant.MLIR.IR.isf16-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf16-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf16")],-1)),t[758]||(t[758]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[760]||(t[760]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f16 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[759]||(t[759]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L290-L294",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gs,[e("summary",null,[t[761]||(t[761]=e("a",{id:"Reactant.MLIR.IR.isf32-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf32-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf32")],-1)),t[762]||(t[762]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[764]||(t[764]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f32 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[763]||(t[763]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L297-L301",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zs,[e("summary",null,[t[765]||(t[765]=e("a",{id:"Reactant.MLIR.IR.isf64-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf64-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf64")],-1)),t[766]||(t[766]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[768]||(t[768]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f64 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[767]||(t[767]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L304-L308",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ws,[e("summary",null,[t[769]||(t[769]=e("a",{id:"Reactant.MLIR.IR.isf8e4m3b11fnuz-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf8e4m3b11fnuz-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf8e4m3b11fnuz")],-1)),t[770]||(t[770]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[772]||(t[772]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf8e4m3b11fnuz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3B11FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[771]||(t[771]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L262-L266",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Us,[e("summary",null,[t[773]||(t[773]=e("a",{id:"Reactant.MLIR.IR.isf8e4m3fn-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf8e4m3fn-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf8e4m3fn")],-1)),t[774]||(t[774]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[776]||(t[776]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf8e4m3fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[775]||(t[775]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L255-L259",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qs,[e("summary",null,[t[777]||(t[777]=e("a",{id:"Reactant.MLIR.IR.isf8e4m3fnuz-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf8e4m3fnuz-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf8e4m3fnuz")],-1)),t[778]||(t[778]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[780]||(t[780]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf8e4m3fnuz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[779]||(t[779]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L276-L280",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qs,[e("summary",null,[t[781]||(t[781]=e("a",{id:"Reactant.MLIR.IR.isf8e5m2-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf8e5m2-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf8e5m2")],-1)),t[782]||(t[782]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[784]||(t[784]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf8e5m2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E5M2 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[783]||(t[783]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L248-L252",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ws,[e("summary",null,[t[785]||(t[785]=e("a",{id:"Reactant.MLIR.IR.isf8e5m2fnuz-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isf8e5m2fnuz-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isf8e5m2fnuz")],-1)),t[786]||(t[786]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[788]||(t[788]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isf8e5m2fnuz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E5M2FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[787]||(t[787]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L269-L273",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zs,[e("summary",null,[t[789]||(t[789]=e("a",{id:"Reactant.MLIR.IR.isfailure-Tuple{Reactant.MLIR.IR.LogicalResult}",href:"#Reactant.MLIR.IR.isfailure-Tuple{Reactant.MLIR.IR.LogicalResult}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isfailure")],-1)),t[790]||(t[790]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[792]||(t[792]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div><p>Checks if the given logical result represents a failure.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[791]||(t[791]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/LogicalResult.jl#L35-L39",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hs,[e("summary",null,[t[793]||(t[793]=e("a",{id:"Reactant.MLIR.IR.isflatsymbolref-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isflatsymbolref-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isflatsymbolref")],-1)),t[794]||(t[794]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[796]||(t[796]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isflatsymbolref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a flat symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[795]||(t[795]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L344-L348",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Js,[e("summary",null,[t[797]||(t[797]=e("a",{id:"Reactant.MLIR.IR.isfloat-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isfloat-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isfloat")],-1)),t[798]||(t[798]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[800]||(t[800]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a floating point attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[799]||(t[799]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L103-L107",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ks,[e("summary",null,[t[801]||(t[801]=e("a",{id:"Reactant.MLIR.IR.isfloordiv-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.isfloordiv-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isfloordiv")],-1)),t[802]||(t[802]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[804]||(t[804]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfloordiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an floordiv expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[803]||(t[803]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L178-L182",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$s,[e("summary",null,[t[805]||(t[805]=e("a",{id:"Reactant.MLIR.IR.isfunction-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isfunction-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isfunction")],-1)),t[806]||(t[806]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[808]||(t[808]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a function type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[807]||(t[807]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L665-L669",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xs,[e("summary",null,[t[809]||(t[809]=e("a",{id:"Reactant.MLIR.IR.isfunctionofdimexpr-Tuple{Reactant.MLIR.IR.AffineExpr, Any}",href:"#Reactant.MLIR.IR.isfunctionofdimexpr-Tuple{Reactant.MLIR.IR.AffineExpr, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isfunctionofdimexpr")],-1)),t[810]||(t[810]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[812]||(t[812]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfunctionofdimexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, position)</span></span></code></pre></div><p>Checks whether the given affine expression involves AffineDimExpr &#39;position&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[811]||(t[811]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L54-L58",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ys,[e("summary",null,[t[813]||(t[813]=e("a",{id:"Reactant.MLIR.IR.isidentity-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.isidentity-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isidentity")],-1)),t[814]||(t[814]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[816]||(t[816]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isidentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is an identity affine map. The function asserts that the number of dimensions is greater or equal to the number of results.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[815]||(t[815]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L100-L104",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ta,[e("summary",null,[t[817]||(t[817]=e("a",{id:"Reactant.MLIR.IR.isindex-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isindex-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isindex")],-1)),t[818]||(t[818]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[820]||(t[820]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an index type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[819]||(t[819]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L64-L68",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ea,[e("summary",null,[t[821]||(t[821]=e("a",{id:"Reactant.MLIR.IR.isinteger-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isinteger-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isinteger")],-1)),t[822]||(t[822]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[824]||(t[824]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isinteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an integer attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[823]||(t[823]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L159-L163",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sa,[e("summary",null,[t[825]||(t[825]=e("a",{id:"Reactant.MLIR.IR.isinteger-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isinteger-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isinteger")],-1)),t[826]||(t[826]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[828]||(t[828]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isinteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an integer type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[827]||(t[827]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L104-L108",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",aa,[e("summary",null,[t[829]||(t[829]=e("a",{id:"Reactant.MLIR.IR.isintegerset-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isintegerset-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isintegerset")],-1)),t[830]||(t[830]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[832]||(t[832]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isintegerset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an integer set attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[831]||(t[831]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L220-L224",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ia,[e("summary",null,[t[833]||(t[833]=e("a",{id:"Reactant.MLIR.IR.ismemref-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.ismemref-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ismemref")],-1)),t[834]||(t[834]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[836]||(t[836]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismemref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[835]||(t[835]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L593-L597",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",la,[e("summary",null,[t[837]||(t[837]=e("a",{id:"Reactant.MLIR.IR.isminoridentity-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.isminoridentity-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isminoridentity")],-1)),t[838]||(t[838]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[840]||(t[840]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isminoridentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is a minor identity affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[839]||(t[839]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L107-L111",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",na,[e("summary",null,[t[841]||(t[841]=e("a",{id:"Reactant.MLIR.IR.ismod-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.ismod-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ismod")],-1)),t[842]||(t[842]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[844]||(t[844]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an mod expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[843]||(t[843]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L164-L168",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ra,[e("summary",null,[t[845]||(t[845]=e("a",{id:"Reactant.MLIR.IR.ismul-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.ismul-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ismul")],-1)),t[846]||(t[846]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[848]||(t[848]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an mul expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[847]||(t[847]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L150-L154",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oa,[e("summary",null,[t[849]||(t[849]=e("a",{id:"Reactant.MLIR.IR.ismultipleof-Tuple{Reactant.MLIR.IR.AffineExpr, Any}",href:"#Reactant.MLIR.IR.ismultipleof-Tuple{Reactant.MLIR.IR.AffineExpr, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ismultipleof")],-1)),t[850]||(t[850]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[852]||(t[852]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ismultipleof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, factor)</span></span></code></pre></div><p>Checks whether the given affine expression is a multiple of &#39;factor&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[851]||(t[851]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L47-L51",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pa,[e("summary",null,[t[853]||(t[853]=e("a",{id:"Reactant.MLIR.IR.isnone-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isnone-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isnone")],-1)),t[854]||(t[854]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[856]||(t[856]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsANone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a None type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[855]||(t[855]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L49-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",da,[e("summary",null,[t[857]||(t[857]=e("a",{id:"Reactant.MLIR.IR.isopaque-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isopaque-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isopaque")],-1)),t[858]||(t[858]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[860]||(t[860]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isopaque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an opaque attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[859]||(t[859]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L227-L231",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ua,[e("summary",null,[t[861]||(t[861]=e("a",{id:"Reactant.MLIR.IR.isopaque-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isopaque-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isopaque")],-1)),t[862]||(t[862]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[864]||(t[864]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isopaque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an opaque type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[863]||(t[863]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L737-L741",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ca,[e("summary",null,[t[865]||(t[865]=e("a",{id:"Reactant.MLIR.IR.isprojperm-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.isprojperm-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isprojperm")],-1)),t[866]||(t[866]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[868]||(t[868]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isprojperm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map represents a subset of a symbol-less permutation map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[867]||(t[867]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L173-L177",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ha,[e("summary",null,[t[869]||(t[869]=e("a",{id:"Reactant.MLIR.IR.isrankedtensor-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isrankedtensor-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isrankedtensor")],-1)),t[870]||(t[870]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[872]||(t[872]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isrankedtensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a ranked tensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[871]||(t[871]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L503-L507",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ba,[e("summary",null,[t[873]||(t[873]=e("a",{id:"Reactant.MLIR.IR.isshaped-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isshaped-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isshaped")],-1)),t[874]||(t[874]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[876]||(t[876]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isshaped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[875]||(t[875]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L334-L338",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ya,[e("summary",null,[t[877]||(t[877]=e("a",{id:"Reactant.MLIR.IR.issigned-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.issigned-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issigned")],-1)),t[878]||(t[878]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[880]||(t[880]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given integer type is signed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[879]||(t[879]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L111-L115",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ga,[e("summary",null,[t[881]||(t[881]=e("a",{id:"Reactant.MLIR.IR.issignless-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.issignless-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issignless")],-1)),t[882]||(t[882]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[884]||(t[884]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issignless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given integer type is signless.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[883]||(t[883]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L118-L122",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ma,[e("summary",null,[t[885]||(t[885]=e("a",{id:"Reactant.MLIR.IR.issingleconstant-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.issingleconstant-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issingleconstant")],-1)),t[886]||(t[886]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[888]||(t[888]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issingleconstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is a single result constant affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[887]||(t[887]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L121-L125",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ka,[e("summary",null,[t[889]||(t[889]=e("a",{id:"Reactant.MLIR.IR.issparseelements-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.issparseelements-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issparseelements")],-1)),t[890]||(t[890]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[892]||(t[892]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issparseelements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a sparse elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[891]||(t[891]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L660-L664",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fa,[e("summary",null,[t[893]||(t[893]=e("a",{id:"Reactant.MLIR.IR.issplat-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.issplat-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issplat")],-1)),t[894]||(t[894]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[896]||(t[896]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issplat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given dense elements attribute contains a single replicated value (splat).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[895]||(t[895]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L648-L652",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ra,[e("summary",null,[t[897]||(t[897]=e("a",{id:"Reactant.MLIR.IR.isstring-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isstring-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isstring")],-1)),t[898]||(t[898]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[900]||(t[900]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a string attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[899]||(t[899]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L263-L267",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ia,[e("summary",null,[t[901]||(t[901]=e("a",{id:"Reactant.MLIR.IR.issuccess-Tuple{Reactant.MLIR.IR.LogicalResult}",href:"#Reactant.MLIR.IR.issuccess-Tuple{Reactant.MLIR.IR.LogicalResult}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issuccess")],-1)),t[902]||(t[902]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[904]||(t[904]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div><p>Checks if the given logical result represents a success.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[903]||(t[903]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/LogicalResult.jl#L28-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ta,[e("summary",null,[t[905]||(t[905]=e("a",{id:"Reactant.MLIR.IR.issymbolexpr-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.issymbolexpr-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issymbolexpr")],-1)),t[906]||(t[906]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[908]||(t[908]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issymbolexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a symbol expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[907]||(t[907]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L77-L81",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Aa,[e("summary",null,[t[909]||(t[909]=e("a",{id:"Reactant.MLIR.IR.issymbolref-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.issymbolref-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.issymbolref")],-1)),t[910]||(t[910]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[912]||(t[912]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issymbolref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[911]||(t[911]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L297-L301",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ja,[e("summary",null,[t[913]||(t[913]=e("a",{id:"Reactant.MLIR.IR.istensor-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.istensor-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.istensor")],-1)),t[914]||(t[914]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[916]||(t[916]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Tensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[915]||(t[915]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L496-L500",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_a,[e("summary",null,[t[917]||(t[917]=e("a",{id:"Reactant.MLIR.IR.istf32-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.istf32-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.istf32")],-1)),t[918]||(t[918]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[920]||(t[920]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istf32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an tf32 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[919]||(t[919]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L311-L315",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ma,[e("summary",null,[t[921]||(t[921]=e("a",{id:"Reactant.MLIR.IR.istuple-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.istuple-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.istuple")],-1)),t[922]||(t[922]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[924]||(t[924]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a tuple type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[923]||(t[923]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L657-L661",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",La,[e("summary",null,[t[925]||(t[925]=e("a",{id:"Reactant.MLIR.IR.istype-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.istype-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.istype")],-1)),t[926]||(t[926]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[928]||(t[928]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">istype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a type attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[927]||(t[927]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L369-L373",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ea,[e("summary",null,[t[929]||(t[929]=e("a",{id:"Reactant.MLIR.IR.isunit-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.isunit-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isunit")],-1)),t[930]||(t[930]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[932]||(t[932]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isunit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a unit attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[931]||(t[931]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L390-L394",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ca,[e("summary",null,[t[933]||(t[933]=e("a",{id:"Reactant.MLIR.IR.isunrankedmemref-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isunrankedmemref-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isunrankedmemref")],-1)),t[934]||(t[934]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[936]||(t[936]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAUnrankedMemRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an UnrankedMemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[935]||(t[935]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L600-L604",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",va,[e("summary",null,[t[937]||(t[937]=e("a",{id:"Reactant.MLIR.IR.isunrankedtensor-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isunrankedtensor-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isunrankedtensor")],-1)),t[938]||(t[938]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[940]||(t[940]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isunrankedtensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an unranked tensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[939]||(t[939]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L510-L514",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pa,[e("summary",null,[t[941]||(t[941]=e("a",{id:"Reactant.MLIR.IR.isunsigned-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isunsigned-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isunsigned")],-1)),t[942]||(t[942]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[944]||(t[944]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isunsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given integer type is unsigned.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[943]||(t[943]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L125-L129",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xa,[e("summary",null,[t[945]||(t[945]=e("a",{id:"Reactant.MLIR.IR.isvector-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.isvector-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.isvector")],-1)),t[946]||(t[946]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[948]||(t[948]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isvector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Vector type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[947]||(t[947]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L431-L435",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sa,[e("summary",null,[t[949]||(t[949]=e("a",{id:"Reactant.MLIR.IR.layout-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.layout-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.layout")],-1)),t[950]||(t[950]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[952]||(t[952]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the layout of the given MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[951]||(t[951]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L607-L611",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Da,[e("summary",null,[t[953]||(t[953]=e("a",{id:"Reactant.MLIR.IR.leafref-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.leafref-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.leafref")],-1)),t[954]||(t[954]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[956]||(t[956]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">leafref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the string reference to the leaf referenced symbol. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[955]||(t[955]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L324-L328",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fa,[e("summary",null,[t[957]||(t[957]=e("a",{id:"Reactant.MLIR.IR.lhs-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.lhs-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.lhs")],-1)),t[958]||(t[958]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[960]||(t[960]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the left hand side affine expression of the given affine binary operation expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[959]||(t[959]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L218-L222",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Va,[e("summary",null,[t[961]||(t[961]=e("a",{id:"Reactant.MLIR.IR.location-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.location-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.location")],-1)),t[962]||(t[962]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[964]||(t[964]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the location of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[963]||(t[963]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L35-L39",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oa,[e("summary",null,[t[965]||(t[965]=e("a",{id:"Reactant.MLIR.IR.lookup-Tuple{Reactant.MLIR.IR.ExecutionEngine, String}",href:"#Reactant.MLIR.IR.lookup-Tuple{Reactant.MLIR.IR.ExecutionEngine, String}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.lookup")],-1)),t[966]||(t[966]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[968]||(t[968]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit, name)</span></span></code></pre></div><p>Lookup a native function in the execution engine by name, returns nullptr if the name can&#39;t be looked-up.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[967]||(t[967]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/ExecutionEngine.jl#L38-L42",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ba,[e("summary",null,[t[969]||(t[969]=e("a",{id:"Reactant.MLIR.IR.lookup-Tuple{Reactant.MLIR.IR.SymbolTable, AbstractString}",href:"#Reactant.MLIR.IR.lookup-Tuple{Reactant.MLIR.IR.SymbolTable, AbstractString}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.lookup")],-1)),t[970]||(t[970]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[972]||(t[972]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symboltable, name)</span></span></code></pre></div><p>Looks up a symbol with the given name in the given symbol table and returns the operation that corresponds to the symbol. If the symbol cannot be found, returns a null operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[971]||(t[971]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/SymbolTable.jl#L22-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Na,[e("summary",null,[t[973]||(t[973]=e("a",{id:"Reactant.MLIR.IR.majorsubmap-Tuple{Reactant.MLIR.IR.AffineMap, Any}",href:"#Reactant.MLIR.IR.majorsubmap-Tuple{Reactant.MLIR.IR.AffineMap, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.majorsubmap")],-1)),t[974]||(t[974]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[976]||(t[976]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">majorsubmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, nresults)</span></span></code></pre></div><p>Returns the affine map consisting of the most major <code>nresults</code> results. Returns the null AffineMap if the <code>nresults</code> is equal to zero. Returns the <code>affineMap</code> if <code>nresults</code> is greater or equals to number of results of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[975]||(t[975]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L195-L201",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ga,[e("summary",null,[t[977]||(t[977]=e("a",{id:"Reactant.MLIR.IR.memspace-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.memspace-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.memspace")],-1)),t[978]||(t[978]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[980]||(t[980]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetMemorySpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the memory space of the given MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[979]||(t[979]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L627-L631",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",za,[e("summary",null,[t[981]||(t[981]=e("a",{id:"Reactant.MLIR.IR.minorsubmap-Tuple{Reactant.MLIR.IR.AffineMap, Any}",href:"#Reactant.MLIR.IR.minorsubmap-Tuple{Reactant.MLIR.IR.AffineMap, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.minorsubmap")],-1)),t[982]||(t[982]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[984]||(t[984]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minorsubmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, nresults)</span></span></code></pre></div><p>Returns the affine map consisting of the most minor <code>nresults</code> results. Returns the null AffineMap if the <code>nresults</code> is equal to zero. Returns the <code>affineMap</code> if <code>nresults</code> is greater or equals to number of results of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[983]||(t[983]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L205-L210",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wa,[e("summary",null,[t[985]||(t[985]=e("a",{id:"Reactant.MLIR.IR.move_after!-Tuple{Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.move_after!-Tuple{Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.move_after!")],-1)),t[986]||(t[986]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[988]||(t[988]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">move_after!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, other)</span></span></code></pre></div><p>Moves the given operation immediately after the other operation in its parent block. The given operation may be owned by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[987]||(t[987]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L252-L256",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ua,[e("summary",null,[t[989]||(t[989]=e("a",{id:"Reactant.MLIR.IR.move_before!-Tuple{Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.move_before!-Tuple{Reactant.MLIR.IR.Operation, Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.move_before!")],-1)),t[990]||(t[990]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[992]||(t[992]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">move_before!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, other)</span></span></code></pre></div><p>Moves the given operation immediately before the other operation in its parent block. The given operation may be owner by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[991]||(t[991]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L262-L269",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qa,[e("summary",null,[t[993]||(t[993]=e("a",{id:"Reactant.MLIR.IR.name-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.name-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.name")],-1)),t[994]||(t[994]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[996]||(t[996]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the name of the operation as an identifier.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[995]||(t[995]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L49-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qa,[e("summary",null,[t[997]||(t[997]=e("a",{id:"Reactant.MLIR.IR.namespace-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.namespace-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.namespace")],-1)),t[998]||(t[998]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1e3]||(t[1e3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueAttrGetDialectNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the namespace of the dialect with which the given opaque attribute is associated. The namespace string is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[999]||(t[999]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L243-L247",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wa,[e("summary",null,[t[1001]||(t[1001]=e("a",{id:"Reactant.MLIR.IR.namespace-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.namespace-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.namespace")],-1)),t[1002]||(t[1002]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1004]||(t[1004]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueTypeGetDialectNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the namespace of the dialect with which the given opaque type is associated. The namespace string is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1003]||(t[1003]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L744-L748",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Za,[e("summary",null,[t[1005]||(t[1005]=e("a",{id:"Reactant.MLIR.IR.nargs-Tuple{Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.nargs-Tuple{Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nargs")],-1)),t[1006]||(t[1006]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1008]||(t[1008]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the number of arguments of the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1007]||(t[1007]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L63-L67",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ha,[e("summary",null,[t[1009]||(t[1009]=e("a",{id:"Reactant.MLIR.IR.nattrs-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.nattrs-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nattrs")],-1)),t[1010]||(t[1010]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1012]||(t[1012]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nattrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of attributes attached to the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1011]||(t[1011]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L172-L176",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ja,[e("summary",null,[t[1013]||(t[1013]=e("a",{id:"Reactant.MLIR.IR.nconstraints-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Reactant.MLIR.IR.nconstraints-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nconstraints")],-1)),t[1014]||(t[1014]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1016]||(t[1016]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nconstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of constraints (equalities + inequalities) in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1015]||(t[1015]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L95-L99",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ka,[e("summary",null,[t[1017]||(t[1017]=e("a",{id:"Reactant.MLIR.IR.nequalities-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Reactant.MLIR.IR.nequalities-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nequalities")],-1)),t[1018]||(t[1018]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1020]||(t[1020]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nequalities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of equalities in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1019]||(t[1019]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L102-L106",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$a,[e("summary",null,[t[1021]||(t[1021]=e("a",{id:"Reactant.MLIR.IR.next-Tuple{Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.next-Tuple{Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.next")],-1)),t[1022]||(t[1022]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1024]||(t[1024]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the block immediately following the given block in its parent region or <code>nothing</code> if last.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1023]||(t[1023]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L52-L56",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xa,[e("summary",null,[t[1025]||(t[1025]=e("a",{id:"Reactant.MLIR.IR.next-Tuple{Reactant.MLIR.IR.OpOperand}",href:"#Reactant.MLIR.IR.next-Tuple{Reactant.MLIR.IR.OpOperand}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.next")],-1)),t[1026]||(t[1026]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1028]||(t[1028]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns an op operand representing the next use of the value, or <code>nothing</code> if there is no next use.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1027]||(t[1027]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/OpOperand.jl#L37-L41",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ya,[e("summary",null,[t[1029]||(t[1029]=e("a",{id:"Reactant.MLIR.IR.ninequalities-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Reactant.MLIR.IR.ninequalities-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ninequalities")],-1)),t[1030]||(t[1030]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1032]||(t[1032]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ninequalities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of inequalities in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1031]||(t[1031]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L109-L113",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ti,[e("summary",null,[t[1033]||(t[1033]=e("a",{id:"Reactant.MLIR.IR.ninputs-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.ninputs-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ninputs")],-1)),t[1034]||(t[1034]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1036]||(t[1036]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ninputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of inputs (dimensions + symbols) of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1035]||(t[1035]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L166-L170",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ei,[e("summary",null,[t[1037]||(t[1037]=e("a",{id:"Reactant.MLIR.IR.ninputs-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Reactant.MLIR.IR.ninputs-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ninputs")],-1)),t[1038]||(t[1038]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1040]||(t[1040]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ninputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of inputs (dimensions + symbols) in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1039]||(t[1039]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L88-L92",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",si,[e("summary",null,[t[1041]||(t[1041]=e("a",{id:"Reactant.MLIR.IR.ninputs-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.ninputs-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.ninputs")],-1)),t[1042]||(t[1042]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1044]||(t[1044]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ninputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of input types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1043]||(t[1043]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L688-L692",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ai,[e("summary",null,[t[1045]||(t[1045]=e("a",{id:"Reactant.MLIR.IR.nnestedrefs-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.nnestedrefs-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nnestedrefs")],-1)),t[1046]||(t[1046]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1048]||(t[1048]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nnestedrefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the number of references nested in the given symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1047]||(t[1047]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L334-L338",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ii,[e("summary",null,[t[1049]||(t[1049]=e("a",{id:"Reactant.MLIR.IR.noperands-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.noperands-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.noperands")],-1)),t[1050]||(t[1050]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1052]||(t[1052]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">noperands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of operands of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1051]||(t[1051]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L120-L124",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",li,[e("summary",null,[t[1053]||(t[1053]=e("a",{id:"Reactant.MLIR.IR.nregions-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.nregions-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nregions")],-1)),t[1054]||(t[1054]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1056]||(t[1056]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nregions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of regions attached to the given operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1055]||(t[1055]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L85-L89",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ni,[e("summary",null,[t[1057]||(t[1057]=e("a",{id:"Reactant.MLIR.IR.nresults-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.nresults-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nresults")],-1)),t[1058]||(t[1058]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1060]||(t[1060]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of results of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1059]||(t[1059]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L152-L156",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ri,[e("summary",null,[t[1061]||(t[1061]=e("a",{id:"Reactant.MLIR.IR.nresults-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.nresults-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nresults")],-1)),t[1062]||(t[1062]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1064]||(t[1064]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of results of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1063]||(t[1063]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L102-L106",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oi,[e("summary",null,[t[1065]||(t[1065]=e("a",{id:"Reactant.MLIR.IR.nresults-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.nresults-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nresults")],-1)),t[1066]||(t[1066]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1068]||(t[1068]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nresults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of result types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1067]||(t[1067]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L698-L702",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pi,[e("summary",null,[t[1069]||(t[1069]=e("a",{id:"Reactant.MLIR.IR.nsuccessors-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.nsuccessors-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nsuccessors")],-1)),t[1070]||(t[1070]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1072]||(t[1072]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nsuccessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of successor blocks of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1071]||(t[1071]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L155-L159",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",di,[e("summary",null,[t[1073]||(t[1073]=e("a",{id:"Reactant.MLIR.IR.nsymbols-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.nsymbols-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nsymbols")],-1)),t[1074]||(t[1074]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1076]||(t[1076]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nsymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of symbols of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1075]||(t[1075]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L145-L149",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ui,[e("summary",null,[t[1077]||(t[1077]=e("a",{id:"Reactant.MLIR.IR.nsymbols-Tuple{Reactant.MLIR.IR.IntegerSet}",href:"#Reactant.MLIR.IR.nsymbols-Tuple{Reactant.MLIR.IR.IntegerSet}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.nsymbols")],-1)),t[1078]||(t[1078]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1080]||(t[1080]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nsymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of symbols in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1079]||(t[1079]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IntegerSet.jl#L81-L85",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ci,[e("summary",null,[t[1081]||(t[1081]=e("a",{id:"Reactant.MLIR.IR.op_owner-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.op_owner-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.op_owner")],-1)),t[1082]||(t[1082]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1084]||(t[1084]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">op_owner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns an operation that produced this value as its result. Asserts if the value is not an op result.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1083]||(t[1083]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L45-L49",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hi,[e("summary",null,[t[1085]||(t[1085]=e("a",{id:"Reactant.MLIR.IR.op_res_num-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.op_res_num-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.op_res_num")],-1)),t[1086]||(t[1086]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1088]||(t[1088]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">op_res_num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the position of the value in the list of results of the operation that produced it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1087]||(t[1087]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L79-L83",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bi,[e("summary",null,[t[1089]||(t[1089]=e("a",{id:"Reactant.MLIR.IR.operand",href:"#Reactant.MLIR.IR.operand"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.operand")],-1)),t[1090]||(t[1090]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[1092]||(t[1092]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">operand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, i)</span></span></code></pre></div><p>Returns <code>i</code>-th operand of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1091]||(t[1091]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L127-L131",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yi,[e("summary",null,[t[1093]||(t[1093]=e("a",{id:"Reactant.MLIR.IR.operand!-Tuple{Reactant.MLIR.IR.Operation, Any, Any}",href:"#Reactant.MLIR.IR.operand!-Tuple{Reactant.MLIR.IR.Operation, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.operand!")],-1)),t[1094]||(t[1094]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1096]||(t[1096]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">operand!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, i, value)</span></span></code></pre></div><p>Sets the <code>i</code>-th operand of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1095]||(t[1095]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L144-L148",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gi,[e("summary",null,[t[1097]||(t[1097]=e("a",{id:"Reactant.MLIR.IR.operandindex-Tuple{Reactant.MLIR.IR.OpOperand}",href:"#Reactant.MLIR.IR.operandindex-Tuple{Reactant.MLIR.IR.OpOperand}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.operandindex")],-1)),t[1098]||(t[1098]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1100]||(t[1100]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">operandindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns the operand number of an op operand.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1099]||(t[1099]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/OpOperand.jl#L30-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mi,[e("summary",null,[t[1101]||(t[1101]=e("a",{id:"Reactant.MLIR.IR.operands-Tuple{Any}",href:"#Reactant.MLIR.IR.operands-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.operands")],-1)),t[1102]||(t[1102]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1104]||(t[1104]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">operands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Return an array of all operands of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1103]||(t[1103]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L137-L141",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ki,[e("summary",null,[t[1105]||(t[1105]=e("a",{id:"Reactant.MLIR.IR.owner-Tuple{Reactant.MLIR.IR.OpOperand}",href:"#Reactant.MLIR.IR.owner-Tuple{Reactant.MLIR.IR.OpOperand}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.owner")],-1)),t[1106]||(t[1106]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1108]||(t[1108]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">owner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns the owner operation of an op operand.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1107]||(t[1107]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/OpOperand.jl#L23-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fi,[e("summary",null,[t[1109]||(t[1109]=e("a",{id:"Reactant.MLIR.IR.parent_op-Tuple{Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.parent_op-Tuple{Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.parent_op")],-1)),t[1110]||(t[1110]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1112]||(t[1112]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parent_op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the closest surrounding operation that contains this block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1111]||(t[1111]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L36-L40",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ri,[e("summary",null,[t[1113]||(t[1113]=e("a",{id:"Reactant.MLIR.IR.parent_op-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.parent_op-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.parent_op")],-1)),t[1114]||(t[1114]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1116]||(t[1116]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parent_op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the operation that owns this operation, returning null if the operation is not owned.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1115]||(t[1115]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L63-L67",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ii,[e("summary",null,[t[1117]||(t[1117]=e("a",{id:"Reactant.MLIR.IR.parent_region-Tuple{Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.parent_region-Tuple{Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.parent_region")],-1)),t[1118]||(t[1118]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1120]||(t[1120]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parent_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the region that contains this block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1119]||(t[1119]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L43-L47",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ti,[e("summary",null,[t[1121]||(t[1121]=e("a",{id:"Reactant.MLIR.IR.pass_pipeline-Tuple{Reactant.MLIR.IR.OpPassManager}",href:"#Reactant.MLIR.IR.pass_pipeline-Tuple{Reactant.MLIR.IR.OpPassManager}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.pass_pipeline")],-1)),t[1122]||(t[1122]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1124]||(t[1124]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pass_pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opPassManager) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span></code></pre></div><p>Returns the pass pipeline.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1123]||(t[1123]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L202-L206",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ai,[e("summary",null,[t[1125]||(t[1125]=e("a",{id:"Reactant.MLIR.IR.position-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.position-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.position")],-1)),t[1126]||(t[1126]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1128]||(t[1128]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the position of the given affine dimension expression, affine symbol expression or ...</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1127]||(t[1127]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L92-L96",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ji,[e("summary",null,[t[1129]||(t[1129]=e("a",{id:"Reactant.MLIR.IR.print_pass_pipeline-Tuple{IO, Reactant.MLIR.IR.OpPassManager}",href:"#Reactant.MLIR.IR.print_pass_pipeline-Tuple{IO, Reactant.MLIR.IR.OpPassManager}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.print_pass_pipeline")],-1)),t[1130]||(t[1130]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1132]||(t[1132]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_pass_pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opPassManager)</span></span></code></pre></div><p>Prints the pass pipeline to the IO.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1131]||(t[1131]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L209-L213",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_i,[e("summary",null,[t[1133]||(t[1133]=e("a",{id:"Reactant.MLIR.IR.push_argument!-Tuple{Reactant.MLIR.IR.Block, Any}",href:"#Reactant.MLIR.IR.push_argument!-Tuple{Reactant.MLIR.IR.Block, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.push_argument!")],-1)),t[1134]||(t[1134]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1136]||(t[1136]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">push_argument!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, type; location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Appends an argument of the specified type to the block. Returns the newly added argument.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1135]||(t[1135]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L80-L84",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mi,[e("summary",null,[t[1137]||(t[1137]=e("a",{id:"Reactant.MLIR.IR.region-Tuple{Reactant.MLIR.IR.Operation, Any}",href:"#Reactant.MLIR.IR.region-Tuple{Reactant.MLIR.IR.Operation, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.region")],-1)),t[1138]||(t[1138]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1140]||(t[1140]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, i)</span></span></code></pre></div><p>Returns <code>i</code>-th region attached to the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1139]||(t[1139]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L92-L96",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Li,[e("summary",null,[t[1141]||(t[1141]=e("a",{id:"Reactant.MLIR.IR.result",href:"#Reactant.MLIR.IR.result"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.result")],-1)),t[1142]||(t[1142]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[1144]||(t[1144]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, i)</span></span></code></pre></div><p>Returns the <code>i</code>-th result type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1143]||(t[1143]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L718-L722",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ei,[e("summary",null,[t[1145]||(t[1145]=e("a",{id:"Reactant.MLIR.IR.result-2",href:"#Reactant.MLIR.IR.result-2"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.result")],-1)),t[1146]||(t[1146]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[1148]||(t[1148]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, i)</span></span></code></pre></div><p>Returns <code>i</code>-th result of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1147]||(t[1147]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L109-L113",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ci,[e("summary",null,[t[1149]||(t[1149]=e("a",{id:"Reactant.MLIR.IR.result-Tuple{Reactant.MLIR.IR.AffineMap, Any}",href:"#Reactant.MLIR.IR.result-Tuple{Reactant.MLIR.IR.AffineMap, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.result")],-1)),t[1150]||(t[1150]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1152]||(t[1152]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, pos)</span></span></code></pre></div><p>Returns the result at the given position.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1151]||(t[1151]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L159-L163",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vi,[e("summary",null,[t[1153]||(t[1153]=e("a",{id:"Reactant.MLIR.IR.result-Tuple{Reactant.MLIR.IR.AffineMap}",href:"#Reactant.MLIR.IR.result-Tuple{Reactant.MLIR.IR.AffineMap}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.result")],-1)),t[1154]||(t[1154]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1156]||(t[1156]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the constant result of the given affine map. The function asserts that the map has a single constant result.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1155]||(t[1155]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L128-L132",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pi,[e("summary",null,[t[1157]||(t[1157]=e("a",{id:"Reactant.MLIR.IR.rhs-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.rhs-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.rhs")],-1)),t[1158]||(t[1158]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1160]||(t[1160]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the right hand side affine expression of the given affine binary operation expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1159]||(t[1159]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L225-L229",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xi,[e("summary",null,[t[1161]||(t[1161]=e("a",{id:"Reactant.MLIR.IR.rmattr!-Tuple{Reactant.MLIR.IR.Operation, Any}",href:"#Reactant.MLIR.IR.rmattr!-Tuple{Reactant.MLIR.IR.Operation, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.rmattr!")],-1)),t[1162]||(t[1162]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1164]||(t[1164]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rmattr!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Removes an attribute by name. Returns false if the attribute was not found and true if removed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1163]||(t[1163]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L212-L216",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Si,[e("summary",null,[t[1165]||(t[1165]=e("a",{id:"Reactant.MLIR.IR.rmfromparent!-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.rmfromparent!-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.rmfromparent!")],-1)),t[1166]||(t[1166]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1168]||(t[1168]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rmfromparent!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Removes the given operation from its parent block. The operation is not destroyed. The ownership of the operation is transferred to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1167]||(t[1167]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L71-L76",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Di,[e("summary",null,[t[1169]||(t[1169]=e("a",{id:"Reactant.MLIR.IR.rootref-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.rootref-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.rootref")],-1)),t[1170]||(t[1170]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1172]||(t[1172]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the string reference to the root referenced symbol. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1171]||(t[1171]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L314-L318",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fi,[e("summary",null,[t[1173]||(t[1173]=e("a",{id:"Reactant.MLIR.IR.run!",href:"#Reactant.MLIR.IR.run!"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.run!")],-1)),t[1174]||(t[1174]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[1176]||(t[1176]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Run the provided <code>passManager</code> on the given <code>module</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1175]||(t[1175]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Pass.jl#L142-L146",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vi,[e("summary",null,[t[1177]||(t[1177]=e("a",{id:"Reactant.MLIR.IR.submap-Tuple{Reactant.MLIR.IR.AffineMap, Vector{Int64}}",href:"#Reactant.MLIR.IR.submap-Tuple{Reactant.MLIR.IR.AffineMap, Vector{Int64}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.submap")],-1)),t[1178]||(t[1178]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1180]||(t[1180]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">submap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, positions)</span></span></code></pre></div><p>Returns the affine map consisting of the <code>positions</code> subset.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1179]||(t[1179]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L187-L191",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oi,[e("summary",null,[t[1181]||(t[1181]=e("a",{id:"Reactant.MLIR.IR.success-Tuple{}",href:"#Reactant.MLIR.IR.success-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.success")],-1)),t[1182]||(t[1182]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1184]||(t[1184]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a logical result representing a success.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1183]||(t[1183]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/LogicalResult.jl#L14-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bi,[e("summary",null,[t[1185]||(t[1185]=e("a",{id:"Reactant.MLIR.IR.successor-Tuple{Reactant.MLIR.IR.Operation, Any}",href:"#Reactant.MLIR.IR.successor-Tuple{Reactant.MLIR.IR.Operation, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.successor")],-1)),t[1186]||(t[1186]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1188]||(t[1188]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">successor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, i)</span></span></code></pre></div><p>Returns <code>i</code>-th successor of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1187]||(t[1187]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L162-L166",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ni,[e("summary",null,[t[1189]||(t[1189]=e("a",{id:"Reactant.MLIR.IR.terminator-Tuple{Reactant.MLIR.IR.Block}",href:"#Reactant.MLIR.IR.terminator-Tuple{Reactant.MLIR.IR.Block}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.terminator")],-1)),t[1190]||(t[1190]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1192]||(t[1192]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terminator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the terminator operation in the block or <code>nothing</code> if no terminator.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1191]||(t[1191]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Block.jl#L113-L117",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gi,[e("summary",null,[t[1193]||(t[1193]=e("a",{id:"Reactant.MLIR.IR.type!-Tuple{Any, Any}",href:"#Reactant.MLIR.IR.type!-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.type!")],-1)),t[1194]||(t[1194]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1196]||(t[1196]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_type!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, type)</span></span></code></pre></div><p>Sets the type of the block argument to the given type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1195]||(t[1195]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L106-L110",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zi,[e("summary",null,[t[1197]||(t[1197]=e("a",{id:"Reactant.MLIR.IR.type-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.type-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.type")],-1)),t[1198]||(t[1198]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1200]||(t[1200]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the type of this attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1199]||(t[1199]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L36-L40",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wi,[e("summary",null,[t[1201]||(t[1201]=e("a",{id:"Reactant.MLIR.IR.type-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.IR.type-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.type")],-1)),t[1202]||(t[1202]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1204]||(t[1204]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the type of the value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1203]||(t[1203]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Value.jl#L99-L103",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ui,[e("summary",null,[t[1205]||(t[1205]=e("a",{id:"Reactant.MLIR.IR.typeid-Tuple{Reactant.MLIR.IR.Attribute}",href:"#Reactant.MLIR.IR.typeid-Tuple{Reactant.MLIR.IR.Attribute}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.typeid")],-1)),t[1206]||(t[1206]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1208]||(t[1208]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the type id of the attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1207]||(t[1207]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Attribute.jl#L43-L47",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qi,[e("summary",null,[t[1209]||(t[1209]=e("a",{id:"Reactant.MLIR.IR.typeid-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.typeid-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.typeid")],-1)),t[1210]||(t[1210]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1212]||(t[1212]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the type id of the operation. Returns null if the operation does not have a registered operation description.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1211]||(t[1211]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L42-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qi,[e("summary",null,[t[1213]||(t[1213]=e("a",{id:"Reactant.MLIR.IR.typeid-Tuple{Reactant.MLIR.IR.Type}",href:"#Reactant.MLIR.IR.typeid-Tuple{Reactant.MLIR.IR.Type}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.typeid")],-1)),t[1214]||(t[1214]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1216]||(t[1216]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the type ID of the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1215]||(t[1215]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Type.jl#L34-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wi,[e("summary",null,[t[1217]||(t[1217]=e("a",{id:"Reactant.MLIR.IR.value-Tuple{Reactant.MLIR.IR.AffineExpr}",href:"#Reactant.MLIR.IR.value-Tuple{Reactant.MLIR.IR.AffineExpr}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.value")],-1)),t[1218]||(t[1218]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1220]||(t[1220]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the value of the given affine constant expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1219]||(t[1219]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineExpr.jl#L126-L130",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zi,[e("summary",null,[t[1221]||(t[1221]=e("a",{id:"Reactant.MLIR.IR.verify-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.verify-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.verify")],-1)),t[1222]||(t[1222]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1224]||(t[1224]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Verify the operation and return true if it passes, false if it fails.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1223]||(t[1223]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/Operation.jl#L245-L249",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hi,[e("summary",null,[t[1225]||(t[1225]=e("a",{id:"Reactant.MLIR.IR.verifyall-Tuple{Reactant.MLIR.IR.Operation}",href:"#Reactant.MLIR.IR.verifyall-Tuple{Reactant.MLIR.IR.Operation}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.verifyall")],-1)),t[1226]||(t[1226]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1228]||(t[1228]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">verifyall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation; debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Prints the operations which could not be verified.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1227]||(t[1227]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/IR.jl#L117-L121",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ji,[e("summary",null,[t[1229]||(t[1229]=e("a",{id:"Reactant.MLIR.IR.@affinemap-Tuple{Any}",href:"#Reactant.MLIR.IR.@affinemap-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.IR.@affinemap")],-1)),t[1230]||(t[1230]=i()),a(s,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),t[1232]||(t[1232]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@affinemap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d1, d2, d3, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[s1, s2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns an affine map from the provided Julia expression. On the right hand side are allowed the following function calls:</p><ul><li>+, *, ÷, %, fld, cld</li></ul><p>The rhs can only contains dimensions and symbols present on the left hand side or integer literals.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reactant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MLIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           IR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@affinemap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d1, d2)[s0] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s0, d2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MLIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#= (d0, d1)[s0] -&gt; (d0 + s0, d1 mod 10) =#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,5)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1231]||(t[1231]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/IR/AffineMap.jl#L249-L267",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),t[4466]||(t[4466]=e("h1",{id:"MLIR-C-API",tabindex:"-1"},[i("MLIR C API "),e("a",{class:"header-anchor",href:"#MLIR-C-API","aria-label":'Permalink to "MLIR C API {#MLIR-C-API}"'},"​")],-1)),e("details",Ki,[e("summary",null,[t[1233]||(t[1233]=e("a",{id:"Reactant.MLIR.API.MLIR_CAPI_DWARF_ADDRESS_SPACE_NULL",href:"#Reactant.MLIR.API.MLIR_CAPI_DWARF_ADDRESS_SPACE_NULL"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MLIR_CAPI_DWARF_ADDRESS_SPACE_NULL")],-1)),t[1234]||(t[1234]=i()),a(s,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),t[1236]||(t[1236]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MLIR_CAPI_DWARF_ADDRESS_SPACE_NULL</span></span></code></pre></div>',1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1235]||(t[1235]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L10621-L10623",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$i,[e("summary",null,[t[1237]||(t[1237]=e("a",{id:"Reactant.MLIR.API.LLVMAttributeRef",href:"#Reactant.MLIR.API.LLVMAttributeRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMAttributeRef")],-1)),t[1238]||(t[1238]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1240]||(t[1240]=e("p",null,"Used to represent an attributes.",-1)),t[1241]||(t[1241]=e("p",null,[e("strong",null,"See also")],-1)),t[1242]||(t[1242]=e("p",null,"llvm::Attribute",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1239]||(t[1239]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9392-L9397",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xi,[e("summary",null,[t[1243]||(t[1243]=e("a",{id:"Reactant.MLIR.API.LLVMBasicBlockRef",href:"#Reactant.MLIR.API.LLVMBasicBlockRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMBasicBlockRef")],-1)),t[1244]||(t[1244]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1246]||(t[1246]=e("p",null,"Represents a basic block of instructions in LLVM IR.",-1)),t[1247]||(t[1247]=e("p",null,"This models llvm::BasicBlock.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1245]||(t[1245]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9305-L9309",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yi,[e("summary",null,[t[1248]||(t[1248]=e("a",{id:"Reactant.MLIR.API.LLVMBinaryRef",href:"#Reactant.MLIR.API.LLVMBinaryRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMBinaryRef")],-1)),t[1249]||(t[1249]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1251]||(t[1251]=e("p",null,[e("strong",null,"See also")],-1)),t[1252]||(t[1252]=e("p",null,"llvm::object::Binary",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1250]||(t[1250]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9434-L9437",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tl,[e("summary",null,[t[1253]||(t[1253]=e("a",{id:"Reactant.MLIR.API.LLVMBool",href:"#Reactant.MLIR.API.LLVMBool"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMBool")],-1)),t[1254]||(t[1254]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1256]||(t[1256]=e("p",null,[e("code",null,"LLVMCSupportTypes Types and Enumerations")],-1)),t[1257]||(t[1257]=e("p",null,"@{",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1255]||(t[1255]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9250-L9254",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",el,[e("summary",null,[t[1258]||(t[1258]=e("a",{id:"Reactant.MLIR.API.LLVMBuilderRef",href:"#Reactant.MLIR.API.LLVMBuilderRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMBuilderRef")],-1)),t[1259]||(t[1259]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1261]||(t[1261]=e("p",null,"Represents an LLVM basic block builder.",-1)),t[1262]||(t[1262]=e("p",null,"This models llvm::IRBuilder.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1260]||(t[1260]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9341-L9345",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sl,[e("summary",null,[t[1263]||(t[1263]=e("a",{id:"Reactant.MLIR.API.LLVMComdatRef",href:"#Reactant.MLIR.API.LLVMComdatRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMComdatRef")],-1)),t[1264]||(t[1264]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1266]||(t[1266]=e("p",null,[e("strong",null,"See also")],-1)),t[1267]||(t[1267]=e("p",null,"llvm::Comdat",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1265]||(t[1265]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9410-L9413",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",al,[e("summary",null,[t[1268]||(t[1268]=e("a",{id:"Reactant.MLIR.API.LLVMContextRef",href:"#Reactant.MLIR.API.LLVMContextRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMContextRef")],-1)),t[1269]||(t[1269]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1271]||(t[1271]=e("p",null,"The top-level container for all LLVM global data. See the LLVMContext class.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1270]||(t[1270]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9269-L9271",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",il,[e("summary",null,[t[1272]||(t[1272]=e("a",{id:"Reactant.MLIR.API.LLVMDIBuilderRef",href:"#Reactant.MLIR.API.LLVMDIBuilderRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMDIBuilderRef")],-1)),t[1273]||(t[1273]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1275]||(t[1275]=e("p",null,"Represents an LLVM debug info builder.",-1)),t[1276]||(t[1276]=e("p",null,"This models llvm::DIBuilder.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1274]||(t[1274]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9350-L9354",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ll,[e("summary",null,[t[1277]||(t[1277]=e("a",{id:"Reactant.MLIR.API.LLVMDbgRecordRef",href:"#Reactant.MLIR.API.LLVMDbgRecordRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMDbgRecordRef")],-1)),t[1278]||(t[1278]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1280]||(t[1280]=e("p",null,[e("strong",null,"See also")],-1)),t[1281]||(t[1281]=e("p",null,"llvm::DbgRecord",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1279]||(t[1279]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9442-L9445",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nl,[e("summary",null,[t[1282]||(t[1282]=e("a",{id:"Reactant.MLIR.API.LLVMDiagnosticInfoRef",href:"#Reactant.MLIR.API.LLVMDiagnosticInfoRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMDiagnosticInfoRef")],-1)),t[1283]||(t[1283]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1285]||(t[1285]=e("p",null,[e("strong",null,"See also")],-1)),t[1286]||(t[1286]=e("p",null,"llvm::DiagnosticInfo",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1284]||(t[1284]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9402-L9405",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rl,[e("summary",null,[t[1287]||(t[1287]=e("a",{id:"Reactant.MLIR.API.LLVMJITEventListenerRef",href:"#Reactant.MLIR.API.LLVMJITEventListenerRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMJITEventListenerRef")],-1)),t[1288]||(t[1288]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1290]||(t[1290]=e("p",null,[e("strong",null,"See also")],-1)),t[1291]||(t[1291]=e("p",null,"llvm::JITEventListener",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1289]||(t[1289]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9426-L9429",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ol,[e("summary",null,[t[1292]||(t[1292]=e("a",{id:"Reactant.MLIR.API.LLVMMemoryBufferRef",href:"#Reactant.MLIR.API.LLVMMemoryBufferRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMMemoryBufferRef")],-1)),t[1293]||(t[1293]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1295]||(t[1295]=e("p",null,"Used to pass regions of memory through LLVM interfaces.",-1)),t[1296]||(t[1296]=e("p",null,[e("strong",null,"See also")],-1)),t[1297]||(t[1297]=e("p",null,"llvm::MemoryBuffer",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1294]||(t[1294]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9259-L9264",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pl,[e("summary",null,[t[1298]||(t[1298]=e("a",{id:"Reactant.MLIR.API.LLVMMetadataRef",href:"#Reactant.MLIR.API.LLVMMetadataRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMMetadataRef")],-1)),t[1299]||(t[1299]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1301]||(t[1301]=e("p",null,"Represents an LLVM Metadata.",-1)),t[1302]||(t[1302]=e("p",null,"This models llvm::Metadata.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1300]||(t[1300]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9314-L9318",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dl,[e("summary",null,[t[1303]||(t[1303]=e("a",{id:"Reactant.MLIR.API.LLVMModuleFlagEntry",href:"#Reactant.MLIR.API.LLVMModuleFlagEntry"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMModuleFlagEntry")],-1)),t[1304]||(t[1304]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1306]||(t[1306]=e("p",null,[e("strong",null,"See also")],-1)),t[1307]||(t[1307]=e("p",null,"llvm::Module::ModuleFlagEntry",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1305]||(t[1305]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9418-L9421",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ul,[e("summary",null,[t[1308]||(t[1308]=e("a",{id:"Reactant.MLIR.API.LLVMModuleProviderRef",href:"#Reactant.MLIR.API.LLVMModuleProviderRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMModuleProviderRef")],-1)),t[1309]||(t[1309]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1311]||(t[1311]=e("p",null,"Interface used to provide a module to JIT or interpreter. This is now just a synonym for llvm::Module, but we have to keep using the different type to keep binary compatibility.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1310]||(t[1310]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9359-L9361",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cl,[e("summary",null,[t[1312]||(t[1312]=e("a",{id:"Reactant.MLIR.API.LLVMModuleRef",href:"#Reactant.MLIR.API.LLVMModuleRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMModuleRef")],-1)),t[1313]||(t[1313]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1315]||(t[1315]=e("p",null,"The top-level container for all other LLVM Intermediate Representation (IR) objects.",-1)),t[1316]||(t[1316]=e("p",null,[e("strong",null,"See also")],-1)),t[1317]||(t[1317]=e("p",null,"llvm::Module",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1314]||(t[1314]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9276-L9281",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hl,[e("summary",null,[t[1318]||(t[1318]=e("a",{id:"Reactant.MLIR.API.LLVMNamedMDNodeRef",href:"#Reactant.MLIR.API.LLVMNamedMDNodeRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMNamedMDNodeRef")],-1)),t[1319]||(t[1319]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1321]||(t[1321]=e("p",null,"Represents an LLVM Named Metadata Node.",-1)),t[1322]||(t[1322]=e("p",null,"This models llvm::NamedMDNode.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1320]||(t[1320]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9323-L9327",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bl,[e("summary",null,[t[1323]||(t[1323]=e("a",{id:"Reactant.MLIR.API.LLVMOperandBundleRef",href:"#Reactant.MLIR.API.LLVMOperandBundleRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMOperandBundleRef")],-1)),t[1324]||(t[1324]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1326]||(t[1326]=e("p",null,[e("strong",null,"See also")],-1)),t[1327]||(t[1327]=e("p",null,"llvm::OperandBundleDef",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1325]||(t[1325]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9384-L9387",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yl,[e("summary",null,[t[1328]||(t[1328]=e("a",{id:"Reactant.MLIR.API.LLVMPassManagerRef",href:"#Reactant.MLIR.API.LLVMPassManagerRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMPassManagerRef")],-1)),t[1329]||(t[1329]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1331]||(t[1331]=e("p",null,[e("strong",null,"See also")],-1)),t[1332]||(t[1332]=e("p",null,"llvm::PassManagerBase",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1330]||(t[1330]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9366-L9369",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gl,[e("summary",null,[t[1333]||(t[1333]=e("a",{id:"Reactant.MLIR.API.LLVMTypeRef",href:"#Reactant.MLIR.API.LLVMTypeRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMTypeRef")],-1)),t[1334]||(t[1334]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1336]||(t[1336]=e("p",null,[i("Each value in the LLVM IR has a type, an "),e("a",{href:"/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.LLVMTypeRef"},[e("code",null,"LLVMTypeRef")]),i(".")],-1)),t[1337]||(t[1337]=e("p",null,[e("strong",null,"See also")],-1)),t[1338]||(t[1338]=e("p",null,"llvm::Type",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1335]||(t[1335]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9286-L9291",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ml,[e("summary",null,[t[1339]||(t[1339]=e("a",{id:"Reactant.MLIR.API.LLVMUseRef",href:"#Reactant.MLIR.API.LLVMUseRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMUseRef")],-1)),t[1340]||(t[1340]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1342]||(t[1342]=e("p",null,"Used to get the users and usees of a Value.",-1)),t[1343]||(t[1343]=e("p",null,[e("strong",null,"See also")],-1)),t[1344]||(t[1344]=e("p",null,"llvm::Use",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1341]||(t[1341]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9374-L9379",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kl,[e("summary",null,[t[1345]||(t[1345]=e("a",{id:"Reactant.MLIR.API.LLVMValueMetadataEntry",href:"#Reactant.MLIR.API.LLVMValueMetadataEntry"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMValueMetadataEntry")],-1)),t[1346]||(t[1346]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1348]||(t[1348]=e("p",null,"Represents an entry in a Global Object's metadata attachments.",-1)),t[1349]||(t[1349]=e("p",null,"This models std::pair<unsigned, MDNode *>",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1347]||(t[1347]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9332-L9336",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fl,[e("summary",null,[t[1350]||(t[1350]=e("a",{id:"Reactant.MLIR.API.LLVMValueRef",href:"#Reactant.MLIR.API.LLVMValueRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMValueRef")],-1)),t[1351]||(t[1351]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1353]||(t[1353]=e("p",null,"Represents an individual value in LLVM IR.",-1)),t[1354]||(t[1354]=e("p",null,"This models llvm::Value.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1352]||(t[1352]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9296-L9300",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rl,[e("summary",null,[t[1355]||(t[1355]=e("a",{id:"Reactant.MLIR.API.MlirAttribute",href:"#Reactant.MLIR.API.MlirAttribute"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirAttribute")],-1)),t[1356]||(t[1356]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1358]||(t[1358]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirAttribute</span></span></code></pre></div>',1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1357]||(t[1357]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L290-L292",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Il,[e("summary",null,[t[1359]||(t[1359]=e("a",{id:"Reactant.MLIR.API.MlirDiagnostic",href:"#Reactant.MLIR.API.MlirDiagnostic"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirDiagnostic")],-1)),t[1360]||(t[1360]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1362]||(t[1362]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirDiagnostic</span></span></code></pre></div><p>An opaque reference to a diagnostic, always owned by the diagnostics engine (context). Must not be stored outside of the diagnostic handler.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1361]||(t[1361]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6152-L6156",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tl,[e("summary",null,[t[1363]||(t[1363]=e("a",{id:"Reactant.MLIR.API.MlirDiagnosticHandler",href:"#Reactant.MLIR.API.MlirDiagnosticHandler"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirDiagnosticHandler")],-1)),t[1364]||(t[1364]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1366]||(t[1366]=e("p",null,[i("Diagnostic handler type. Accepts a reference to a diagnostic, which is only guaranteed to be live during the call. The handler is passed the "),e("code",null,"userData"),i(" that was provided when the handler was attached to a context. If the handler processed the diagnostic completely, it is expected to return success. Otherwise, it is expected to return failure to indicate that other handlers should attempt to process the diagnostic.")],-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1365]||(t[1365]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6179-L6181",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Al,[e("summary",null,[t[1367]||(t[1367]=e("a",{id:"Reactant.MLIR.API.MlirDiagnosticHandlerID",href:"#Reactant.MLIR.API.MlirDiagnosticHandlerID"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirDiagnosticHandlerID")],-1)),t[1368]||(t[1368]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1370]||(t[1370]=e("p",null,"Opaque identifier of a diagnostic handler, useful to detach a handler.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1369]||(t[1369]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6173-L6175",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jl,[e("summary",null,[t[1371]||(t[1371]=e("a",{id:"Reactant.MLIR.API.MlirDiagnosticSeverity",href:"#Reactant.MLIR.API.MlirDiagnosticSeverity"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirDiagnosticSeverity")],-1)),t[1372]||(t[1372]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1374]||(t[1374]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirDiagnosticSeverity</span></span></code></pre></div><p>Severity of a diagnostic.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1373]||(t[1373]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6161-L6165",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_l,[e("summary",null,[t[1375]||(t[1375]=e("a",{id:"Reactant.MLIR.API.MlirExternalPassCallbacks",href:"#Reactant.MLIR.API.MlirExternalPassCallbacks"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirExternalPassCallbacks")],-1)),t[1376]||(t[1376]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1378]||(t[1378]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirExternalPassCallbacks</span></span></code></pre></div><p>Structure of external <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirPass"><code>MlirPass</code></a> callbacks. All callbacks are required to be set unless otherwise specified.</p><table tabindex="0"><thead><tr><th style="text-align:left;">Field</th><th style="text-align:left;">Note</th></tr></thead><tbody><tr><td style="text-align:left;">construct</td><td style="text-align:left;">This callback is called from the pass is created. This is analogous to a C++ pass constructor.</td></tr><tr><td style="text-align:left;">destruct</td><td style="text-align:left;">This callback is called when the pass is destroyed This is analogous to a C++ pass destructor.</td></tr><tr><td style="text-align:left;">initialize</td><td style="text-align:left;">This callback is optional. The callback is called before the pass is run, allowing a chance to initialize any complex state necessary for running the pass. See Pass::initialize(MLIRContext *).</td></tr><tr><td style="text-align:left;">clone</td><td style="text-align:left;">This callback is called when the pass is cloned. See Pass::clonePass().</td></tr><tr><td style="text-align:left;">run</td><td style="text-align:left;">This callback is called when the pass is run. See Pass::runOnOperation().</td></tr></tbody></table>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1377]||(t[1377]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8710-L8722",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ml,[e("summary",null,[t[1379]||(t[1379]=e("a",{id:"Reactant.MLIR.API.MlirLlvmThreadPool",href:"#Reactant.MLIR.API.MlirLlvmThreadPool"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirLlvmThreadPool")],-1)),t[1380]||(t[1380]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1382]||(t[1382]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirLlvmThreadPool</span></span></code></pre></div><p>Re-export llvm::ThreadPool so as to avoid including the LLVM C API directly.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1381]||(t[1381]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L48-L52",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ll,[e("summary",null,[t[1383]||(t[1383]=e("a",{id:"Reactant.MLIR.API.MlirLocation",href:"#Reactant.MLIR.API.MlirLocation"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirLocation")],-1)),t[1384]||(t[1384]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1386]||(t[1386]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirLocation</span></span></code></pre></div><p>A location in MLIR.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1385]||(t[1385]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L301-L304",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",El,[e("summary",null,[t[1387]||(t[1387]=e("a",{id:"Reactant.MLIR.API.MlirLogicalResult",href:"#Reactant.MLIR.API.MlirLogicalResult"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirLogicalResult")],-1)),t[1388]||(t[1388]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1390]||(t[1390]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirLogicalResult</span></span></code></pre></div><p>A logical result value, essentially a boolean with named states. LLVM convention for using boolean values to designate success or failure of an operation is a moving target, so MLIR opted for an explicit class. Instances of <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirLogicalResult"><code>MlirLogicalResult</code></a> must only be inspected using the associated functions.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1389]||(t[1389]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L115-L119",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cl,[e("summary",null,[t[1391]||(t[1391]=e("a",{id:"Reactant.MLIR.API.MlirNamedAttribute",href:"#Reactant.MLIR.API.MlirNamedAttribute"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirNamedAttribute")],-1)),t[1392]||(t[1392]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1394]||(t[1394]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirNamedAttribute</span></span></code></pre></div><p>Named MLIR attribute.</p><p>A named attribute is essentially a (name, attribute) pair where the name is a string.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1393]||(t[1393]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L325-L331",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vl,[e("summary",null,[t[1395]||(t[1395]=e("a",{id:"Reactant.MLIR.API.MlirOperation",href:"#Reactant.MLIR.API.MlirOperation"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirOperation")],-1)),t[1396]||(t[1396]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1398]||(t[1398]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirOperation</span></span></code></pre></div>',1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1397]||(t[1397]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L263-L265",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pl,[e("summary",null,[t[1399]||(t[1399]=e("a",{id:"Reactant.MLIR.API.MlirOperationState",href:"#Reactant.MLIR.API.MlirOperationState"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirOperationState")],-1)),t[1400]||(t[1400]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1402]||(t[1402]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirOperationState</span></span></code></pre></div><p>An auxiliary class for constructing operations.</p><p>This class contains all the information necessary to construct the operation. It owns the MlirRegions it has pointers to and does not own anything else. By default, the state can be constructed from a name and location, the latter being also used to access the context, and has no other components. These components can be added progressively until the operation is constructed. Users are not expected to rely on the internals of this class and should use mlirOperationState* functions instead.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1401]||(t[1401]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1015-L1021",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xl,[e("summary",null,[t[1403]||(t[1403]=e("a",{id:"Reactant.MLIR.API.MlirOperationWalkCallback",href:"#Reactant.MLIR.API.MlirOperationWalkCallback"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirOperationWalkCallback")],-1)),t[1404]||(t[1404]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1406]||(t[1406]=e("p",null,[i("Operation walker type. The handler is passed an (opaque) reference to an operation and a pointer to a "),e("code",null,"userData"),i(".")],-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1405]||(t[1405]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1749-L1751",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sl,[e("summary",null,[t[1407]||(t[1407]=e("a",{id:"Reactant.MLIR.API.MlirPass",href:"#Reactant.MLIR.API.MlirPass"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirPass")],-1)),t[1408]||(t[1408]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1410]||(t[1410]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirPass</span></span></code></pre></div>',1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1409]||(t[1409]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8510-L8512",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dl,[e("summary",null,[t[1411]||(t[1411]=e("a",{id:"Reactant.MLIR.API.MlirShapedTypeComponentsCallback",href:"#Reactant.MLIR.API.MlirShapedTypeComponentsCallback"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirShapedTypeComponentsCallback")],-1)),t[1412]||(t[1412]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1414]||(t[1414]=e("p",null,"These callbacks are used to return multiple shaped type components from functions while transferring ownership to the caller. The first argument is the has rank boolean followed by the the rank and a pointer to the shape (if applicable). The next argument is the element type, then the attribute. The last argument is an opaque pointer forwarded to the callback by the caller. This callback will be called potentially multiple times for each shaped type components.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1413]||(t[1413]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8472-L8474",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fl,[e("summary",null,[t[1415]||(t[1415]=e("a",{id:"Reactant.MLIR.API.MlirSparseTensorLevelType",href:"#Reactant.MLIR.API.MlirSparseTensorLevelType"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirSparseTensorLevelType")],-1)),t[1416]||(t[1416]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1418]||(t[1418]=e("p",null,"Dimension level types (and properties) that define sparse tensors. See the documentation in SparseTensorAttrDefs.td for their meaning.",-1)),t[1419]||(t[1419]=e("p",null,"These correspond to SparseTensorEncodingAttr::LevelType in the C++ API. If updating, keep them in sync and update the static_assert in the impl file.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1417]||(t[1417]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7956-L7960",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vl,[e("summary",null,[t[1420]||(t[1420]=e("a",{id:"Reactant.MLIR.API.MlirStringCallback",href:"#Reactant.MLIR.API.MlirStringCallback"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirStringCallback")],-1)),t[1421]||(t[1421]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1423]||(t[1423]=e("p",null,"A callback for returning string references.",-1)),t[1424]||(t[1424]=e("p",null,[i("This function is called back by the functions that need to return a reference to the portion of the string with the following arguments: - an "),e("a",{href:"/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirStringRef"},[e("code",null,"MlirStringRef")]),i(" representing the current portion of the string - a pointer to user data forwarded from the printing call.")],-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1422]||(t[1422]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L108-L112",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ol,[e("summary",null,[t[1425]||(t[1425]=e("a",{id:"Reactant.MLIR.API.MlirStringRef",href:"#Reactant.MLIR.API.MlirStringRef"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirStringRef")],-1)),t[1426]||(t[1426]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1428]||(t[1428]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirStringRef</span></span></code></pre></div><p>A pointer to a sized fragment of a string, not necessarily null-terminated. Does not own the underlying string. This is equivalent to llvm::StringRef.</p><table tabindex="0"><thead><tr><th style="text-align:left;">Field</th><th style="text-align:left;">Note</th></tr></thead><tbody><tr><td style="text-align:left;">data</td><td style="text-align:left;">Pointer to the first symbol.</td></tr><tr><td style="text-align:left;">length</td><td style="text-align:left;">Length of the fragment.</td></tr></tbody></table>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1427]||(t[1427]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L65-L74",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bl,[e("summary",null,[t[1429]||(t[1429]=e("a",{id:"Reactant.MLIR.API.MlirType",href:"#Reactant.MLIR.API.MlirType"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirType")],-1)),t[1430]||(t[1430]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1432]||(t[1432]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirType</span></span></code></pre></div><p>A type in MLIR.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1431]||(t[1431]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L313-L316",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nl,[e("summary",null,[t[1433]||(t[1433]=e("a",{id:"Reactant.MLIR.API.MlirTypesCallback",href:"#Reactant.MLIR.API.MlirTypesCallback"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirTypesCallback")],-1)),t[1434]||(t[1434]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1436]||(t[1436]=e("p",null,"These callbacks are used to return multiple types from functions while transferring ownership to the caller. The first argument is the number of consecutive elements pointed to by the second argument. The third argument is an opaque pointer forwarded to the callback by the caller.",-1)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1435]||(t[1435]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8424-L8426",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gl,[e("summary",null,[t[1437]||(t[1437]=e("a",{id:"Reactant.MLIR.API.MlirWalkOrder",href:"#Reactant.MLIR.API.MlirWalkOrder"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirWalkOrder")],-1)),t[1438]||(t[1438]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1440]||(t[1440]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirWalkOrder</span></span></code></pre></div><p>Traversal order for operation walk.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1439]||(t[1439]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1738-L1742",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zl,[e("summary",null,[t[1441]||(t[1441]=e("a",{id:"Reactant.MLIR.API.MlirWalkResult",href:"#Reactant.MLIR.API.MlirWalkResult"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.MlirWalkResult")],-1)),t[1442]||(t[1442]=i()),a(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[1444]||(t[1444]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MlirWalkResult</span></span></code></pre></div><p>Operation walk result.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1443]||(t[1443]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1727-L1731",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wl,[e("summary",null,[t[1445]||(t[1445]=e("a",{id:"Reactant.MLIR.API.LLVMAddSymbol-Tuple{Any, Any}",href:"#Reactant.MLIR.API.LLVMAddSymbol-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMAddSymbol")],-1)),t[1446]||(t[1446]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1448]||(t[1448]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LLVMAddSymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolName, symbolValue)</span></span></code></pre></div><p>This functions permanently adds the symbol <code>symbolName</code> with the value <code>symbolValue</code>. These symbols are searched before any libraries.</p><p><strong>See also</strong></p><p>sys::DynamicLibrary::AddSymbol()</p>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1447]||(t[1447]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9486-L9493",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ul,[e("summary",null,[t[1449]||(t[1449]=e("a",{id:"Reactant.MLIR.API.LLVMLoadLibraryPermanently-Tuple{Any}",href:"#Reactant.MLIR.API.LLVMLoadLibraryPermanently-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMLoadLibraryPermanently")],-1)),t[1450]||(t[1450]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1452]||(t[1452]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LLVMLoadLibraryPermanently</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Filename)</span></span></code></pre></div><p>This function permanently loads the dynamic library at the given path. It is safe to call this function multiple times for the same library.</p><p><strong>See also</strong></p><p>sys::DynamicLibrary::LoadLibraryPermanently()</p>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1451]||(t[1451]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9448-L9455",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ql,[e("summary",null,[t[1453]||(t[1453]=e("a",{id:"Reactant.MLIR.API.LLVMParseCommandLineOptions-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.LLVMParseCommandLineOptions-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMParseCommandLineOptions")],-1)),t[1454]||(t[1454]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1456]||(t[1456]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LLVMParseCommandLineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argc, argv, Overview)</span></span></code></pre></div><p>This function parses the given arguments using the LLVM command line parser. Note that the only stable thing about this function is its signature; you cannot rely on any particular set of command line arguments being interpreted the same way across LLVM versions.</p><p><strong>See also</strong></p><p>llvm:🆑:ParseCommandLineOptions()</p>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1455]||(t[1455]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9460-L9467",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ql,[e("summary",null,[t[1457]||(t[1457]=e("a",{id:"Reactant.MLIR.API.LLVMSearchForAddressOfSymbol-Tuple{Any}",href:"#Reactant.MLIR.API.LLVMSearchForAddressOfSymbol-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.LLVMSearchForAddressOfSymbol")],-1)),t[1458]||(t[1458]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1460]||(t[1460]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LLVMSearchForAddressOfSymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolName)</span></span></code></pre></div><p>This function will search through all previously loaded dynamic libraries for the symbol <code>symbolName</code>. If it is found, the address of that symbol is returned. If not, null is returned.</p><p><strong>See also</strong></p><p>sys::DynamicLibrary::SearchForAddressOfSymbol()</p>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1459]||(t[1459]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9474-L9481",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wl,[e("summary",null,[t[1461]||(t[1461]=e("a",{id:"Reactant.MLIR.API.mlirAffineAddExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineAddExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineAddExprGet")],-1)),t[1462]||(t[1462]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1464]||(t[1464]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineAddExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine add expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1463]||(t[1463]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2859-L2863",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zl,[e("summary",null,[t[1465]||(t[1465]=e("a",{id:"Reactant.MLIR.API.mlirAffineBinaryOpExprGetLHS-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineBinaryOpExprGetLHS-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineBinaryOpExprGetLHS")],-1)),t[1466]||(t[1466]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1468]||(t[1468]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineBinaryOpExprGetLHS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the left hand side affine expression of the given affine binary operation expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1467]||(t[1467]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2959-L2963",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hl,[e("summary",null,[t[1469]||(t[1469]=e("a",{id:"Reactant.MLIR.API.mlirAffineBinaryOpExprGetRHS-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineBinaryOpExprGetRHS-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineBinaryOpExprGetRHS")],-1)),t[1470]||(t[1470]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1472]||(t[1472]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineBinaryOpExprGetRHS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the right hand side affine expression of the given affine binary operation expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1471]||(t[1471]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2968-L2972",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jl,[e("summary",null,[t[1473]||(t[1473]=e("a",{id:"Reactant.MLIR.API.mlirAffineCeilDivExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineCeilDivExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineCeilDivExprGet")],-1)),t[1474]||(t[1474]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1476]||(t[1476]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineCeilDivExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine ceildiv expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1475]||(t[1475]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2939-L2943",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kl,[e("summary",null,[t[1477]||(t[1477]=e("a",{id:"Reactant.MLIR.API.mlirAffineConstantExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineConstantExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineConstantExprGet")],-1)),t[1478]||(t[1478]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1480]||(t[1480]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineConstantExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, constant)</span></span></code></pre></div><p>Creates an affine constant expression with &#39;constant&#39; in the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1479]||(t[1479]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2830-L2834",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$l,[e("summary",null,[t[1481]||(t[1481]=e("a",{id:"Reactant.MLIR.API.mlirAffineConstantExprGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineConstantExprGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineConstantExprGetValue")],-1)),t[1482]||(t[1482]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1484]||(t[1484]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineConstantExprGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the value of the given affine constant expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1483]||(t[1483]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2841-L2845",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xl,[e("summary",null,[t[1485]||(t[1485]=e("a",{id:"Reactant.MLIR.API.mlirAffineDimExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineDimExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineDimExprGet")],-1)),t[1486]||(t[1486]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1488]||(t[1488]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineDimExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, position)</span></span></code></pre></div><p>Creates an affine dimension expression with &#39;position&#39; in the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1487]||(t[1487]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2774-L2778",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yl,[e("summary",null,[t[1489]||(t[1489]=e("a",{id:"Reactant.MLIR.API.mlirAffineDimExprGetPosition-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineDimExprGetPosition-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineDimExprGetPosition")],-1)),t[1490]||(t[1490]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1492]||(t[1492]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineDimExprGetPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the position of the given affine dimension expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1491]||(t[1491]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2783-L2787",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tn,[e("summary",null,[t[1493]||(t[1493]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprCompose-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineExprCompose-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprCompose")],-1)),t[1494]||(t[1494]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1496]||(t[1496]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprCompose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, affineMap)</span></span></code></pre></div><p>Composes the given map with the given expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1495]||(t[1495]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2721-L2725",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",en,[e("summary",null,[t[1497]||(t[1497]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprDump")],-1)),t[1498]||(t[1498]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1500]||(t[1500]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Prints the affine expression to the standard error stream.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1499]||(t[1499]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2659-L2663",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sn,[e("summary",null,[t[1501]||(t[1501]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineExprEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprEqual")],-1)),t[1502]||(t[1502]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1504]||(t[1504]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Returns <code>true</code> if the two affine expressions are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1503]||(t[1503]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2630-L2634",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",an,[e("summary",null,[t[1505]||(t[1505]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprGetContext")],-1)),t[1506]||(t[1506]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1508]||(t[1508]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Gets the context that owns the affine expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1507]||(t[1507]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2621-L2625",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ln,[e("summary",null,[t[1509]||(t[1509]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprGetLargestKnownDivisor-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprGetLargestKnownDivisor-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprGetLargestKnownDivisor")],-1)),t[1510]||(t[1510]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1512]||(t[1512]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprGetLargestKnownDivisor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the greatest known integral divisor of this affine expression. The result is always positive.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1511]||(t[1511]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2686-L2690",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nn,[e("summary",null,[t[1513]||(t[1513]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsAAdd-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsAAdd-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsAAdd")],-1)),t[1514]||(t[1514]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1516]||(t[1516]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsAAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an add expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1515]||(t[1515]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2850-L2854",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rn,[e("summary",null,[t[1517]||(t[1517]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsABinary-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsABinary-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsABinary")],-1)),t[1518]||(t[1518]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1520]||(t[1520]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsABinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is binary.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1519]||(t[1519]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2950-L2954",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",on,[e("summary",null,[t[1521]||(t[1521]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsACeilDiv-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsACeilDiv-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsACeilDiv")],-1)),t[1522]||(t[1522]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1524]||(t[1524]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsACeilDiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an ceildiv expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1523]||(t[1523]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2930-L2934",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pn,[e("summary",null,[t[1525]||(t[1525]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsAConstant-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsAConstant-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsAConstant")],-1)),t[1526]||(t[1526]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1528]||(t[1528]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsAConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a constant expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1527]||(t[1527]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2821-L2825",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dn,[e("summary",null,[t[1529]||(t[1529]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsADim-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsADim-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsADim")],-1)),t[1530]||(t[1530]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1532]||(t[1532]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsADim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a dimension expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1531]||(t[1531]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2765-L2769",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",un,[e("summary",null,[t[1533]||(t[1533]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsAFloorDiv-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsAFloorDiv-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsAFloorDiv")],-1)),t[1534]||(t[1534]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1536]||(t[1536]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsAFloorDiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an floordiv expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1535]||(t[1535]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2910-L2914",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cn,[e("summary",null,[t[1537]||(t[1537]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsAMod-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsAMod-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsAMod")],-1)),t[1538]||(t[1538]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1540]||(t[1540]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsAMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an mod expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1539]||(t[1539]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2890-L2894",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hn,[e("summary",null,[t[1541]||(t[1541]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsAMul-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsAMul-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsAMul")],-1)),t[1542]||(t[1542]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1544]||(t[1544]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsAMul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is an mul expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1543]||(t[1543]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2870-L2874",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bn,[e("summary",null,[t[1545]||(t[1545]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsASymbol-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsASymbol-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsASymbol")],-1)),t[1546]||(t[1546]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1548]||(t[1548]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsASymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a symbol expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1547]||(t[1547]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2792-L2796",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yn,[e("summary",null,[t[1549]||(t[1549]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsFunctionOfDim-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsFunctionOfDim-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsFunctionOfDim")],-1)),t[1550]||(t[1550]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1552]||(t[1552]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsFunctionOfDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, position)</span></span></code></pre></div><p>Checks whether the given affine expression involves AffineDimExpr &#39;position&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1551]||(t[1551]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2706-L2710",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gn,[e("summary",null,[t[1553]||(t[1553]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsMultipleOf-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsMultipleOf-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsMultipleOf")],-1)),t[1554]||(t[1554]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1556]||(t[1556]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsMultipleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, factor)</span></span></code></pre></div><p>Checks whether the given affine expression is a multiple of &#39;factor&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1555]||(t[1555]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2695-L2699",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mn,[e("summary",null,[t[1557]||(t[1557]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsNull")],-1)),t[1558]||(t[1558]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1560]||(t[1560]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns <code>true</code> if the given affine expression is a null expression. Note constant zero is not a null expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1559]||(t[1559]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2639-L2643",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kn,[e("summary",null,[t[1561]||(t[1561]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsPureAffine-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsPureAffine-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsPureAffine")],-1)),t[1562]||(t[1562]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1564]||(t[1564]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsPureAffine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is a pure affine expression, i.e. mul, floordiv, ceildic, and mod is only allowed w.r.t constants.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1563]||(t[1563]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2677-L2681",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fn,[e("summary",null,[t[1565]||(t[1565]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprIsSymbolicOrConstant-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineExprIsSymbolicOrConstant-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprIsSymbolicOrConstant")],-1)),t[1566]||(t[1566]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1568]||(t[1568]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprIsSymbolicOrConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Checks whether the given affine expression is made out of only symbols and constants.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1567]||(t[1567]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2668-L2672",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rn,[e("summary",null,[t[1569]||(t[1569]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAffineExprPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprPrint")],-1)),t[1570]||(t[1570]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1572]||(t[1572]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, callback, userData)</span></span></code></pre></div><p>Prints an affine expression by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1571]||(t[1571]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2648-L2652",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",In,[e("summary",null,[t[1573]||(t[1573]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprShiftDims-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirAffineExprShiftDims-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprShiftDims")],-1)),t[1574]||(t[1574]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1576]||(t[1576]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprShiftDims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, numDims, shift, offset)</span></span></code></pre></div><p>Replace dims[offset ... numDims) by dims[offset + shift ... shift + numDims).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1575]||(t[1575]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2732-L2736",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tn,[e("summary",null,[t[1577]||(t[1577]=e("a",{id:"Reactant.MLIR.API.mlirAffineExprShiftSymbols-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirAffineExprShiftSymbols-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineExprShiftSymbols")],-1)),t[1578]||(t[1578]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1580]||(t[1580]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineExprShiftSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr, numSymbols, shift, offset)</span></span></code></pre></div><p>Replace symbols[offset ... numSymbols) by symbols[offset + shift ... shift + numSymbols).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1579]||(t[1579]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2743-L2747",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",An,[e("summary",null,[t[1581]||(t[1581]=e("a",{id:"Reactant.MLIR.API.mlirAffineFloorDivExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineFloorDivExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineFloorDivExprGet")],-1)),t[1582]||(t[1582]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1584]||(t[1584]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineFloorDivExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine floordiv expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1583]||(t[1583]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2919-L2923",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jn,[e("summary",null,[t[1585]||(t[1585]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapAttrGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapAttrGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapAttrGet")],-1)),t[1586]||(t[1586]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1588]||(t[1588]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map)</span></span></code></pre></div><p>Creates an affine map attribute wrapping the given map. The attribute belongs to the same context as the affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1587]||(t[1587]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3477-L3481",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_n,[e("summary",null,[t[1589]||(t[1589]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirAffineMapAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapAttrGetTypeID")],-1)),t[1590]||(t[1590]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1592]||(t[1592]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an AffineMap attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1591]||(t[1591]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3495-L3499",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mn,[e("summary",null,[t[1593]||(t[1593]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapAttrGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapAttrGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapAttrGetValue")],-1)),t[1594]||(t[1594]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1596]||(t[1596]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the affine map wrapped in the given affine map attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1595]||(t[1595]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3486-L3490",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ln,[e("summary",null,[t[1597]||(t[1597]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapCompressUnusedSymbols-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirAffineMapCompressUnusedSymbols-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapCompressUnusedSymbols")],-1)),t[1598]||(t[1598]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1600]||(t[1600]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapCompressUnusedSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMaps, size, result, populateResult)</span></span></code></pre></div><p>Returns the simplified affine map resulting from dropping the symbols that do not appear in any of the individual maps in <code>affineMaps</code>. Asserts that all maps in <code>affineMaps</code> are normalized to the same number of dims and symbols. Takes a callback <code>populateResult</code> to fill the <code>res</code> container with value <code>m</code> at entry <code>idx</code>. This allows returning without worrying about ownership considerations.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1599]||(t[1599]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3261-L3265",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",En,[e("summary",null,[t[1601]||(t[1601]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapConstantGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapConstantGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapConstantGet")],-1)),t[1602]||(t[1602]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1604]||(t[1604]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapConstantGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, val)</span></span></code></pre></div><p>Creates a single constant result affine map in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1603]||(t[1603]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3059-L3063",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cn,[e("summary",null,[t[1605]||(t[1605]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapDump")],-1)),t[1606]||(t[1606]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1608]||(t[1608]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Prints the affine map to the standard error stream.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1607]||(t[1607]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3015-L3019",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vn,[e("summary",null,[t[1609]||(t[1609]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapEmptyGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapEmptyGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapEmptyGet")],-1)),t[1610]||(t[1610]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1612]||(t[1612]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapEmptyGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a zero result affine map with no dimensions or symbols in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1611]||(t[1611]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3024-L3028",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pn,[e("summary",null,[t[1613]||(t[1613]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapEqual")],-1)),t[1614]||(t[1614]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1616]||(t[1616]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a1, a2)</span></span></code></pre></div><p>Checks if two affine maps are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1615]||(t[1615]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2995-L2999",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xn,[e("summary",null,[t[1617]||(t[1617]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirAffineMapGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGet")],-1)),t[1618]||(t[1618]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1620]||(t[1620]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, dimCount, symbolCount, nAffineExprs, affineExprs)</span></span></code></pre></div><p>Creates an affine map with results defined by the given list of affine expressions. The map resulting map also has the requested number of input dimensions and symbols, regardless of them being used in the results.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1619]||(t[1619]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3044-L3048",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sn,[e("summary",null,[t[1621]||(t[1621]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetContext")],-1)),t[1622]||(t[1622]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1624]||(t[1624]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Gets the context that the given affine map was created with</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1623]||(t[1623]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2977-L2981",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dn,[e("summary",null,[t[1625]||(t[1625]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetMajorSubMap-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetMajorSubMap-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetMajorSubMap")],-1)),t[1626]||(t[1626]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1628]||(t[1628]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetMajorSubMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, numResults)</span></span></code></pre></div><p>Returns the affine map consisting of the most major <code>numResults</code> results. Returns the null AffineMap if the <code>numResults</code> is equal to zero. Returns the <code>affineMap</code> if <code>numResults</code> is greater or equals to number of results of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1627]||(t[1627]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3222-L3226",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fn,[e("summary",null,[t[1629]||(t[1629]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetMinorSubMap-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetMinorSubMap-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetMinorSubMap")],-1)),t[1630]||(t[1630]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1632]||(t[1632]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetMinorSubMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, numResults)</span></span></code></pre></div><p>Returns the affine map consisting of the most minor <code>numResults</code> results. Returns the null AffineMap if the <code>numResults</code> is equal to zero. Returns the <code>affineMap</code> if <code>numResults</code> is greater or equals to number of results of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1631]||(t[1631]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3233-L3237",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vn,[e("summary",null,[t[1633]||(t[1633]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetNumDims-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetNumDims-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetNumDims")],-1)),t[1634]||(t[1634]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1636]||(t[1636]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetNumDims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of dimensions of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1635]||(t[1635]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3146-L3150",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",On,[e("summary",null,[t[1637]||(t[1637]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetNumInputs-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetNumInputs-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetNumInputs")],-1)),t[1638]||(t[1638]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1640]||(t[1640]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetNumInputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of inputs (dimensions + symbols) of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1639]||(t[1639]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3184-L3188",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bn,[e("summary",null,[t[1641]||(t[1641]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetNumResults-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetNumResults-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetNumResults")],-1)),t[1642]||(t[1642]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1644]||(t[1644]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetNumResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of results of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1643]||(t[1643]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3164-L3168",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nn,[e("summary",null,[t[1645]||(t[1645]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetNumSymbols-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetNumSymbols-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetNumSymbols")],-1)),t[1646]||(t[1646]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1648]||(t[1648]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetNumSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the number of symbols of the given affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1647]||(t[1647]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3155-L3159",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gn,[e("summary",null,[t[1649]||(t[1649]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetResult-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetResult-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetResult")],-1)),t[1650]||(t[1650]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1652]||(t[1652]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, pos)</span></span></code></pre></div><p>Returns the result at the given position.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1651]||(t[1651]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3173-L3177",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zn,[e("summary",null,[t[1653]||(t[1653]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetSingleConstantResult-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetSingleConstantResult-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetSingleConstantResult")],-1)),t[1654]||(t[1654]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1656]||(t[1656]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetSingleConstantResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Returns the constant result of the given affine map. The function asserts that the map has a single constant result.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1655]||(t[1655]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3137-L3141",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wn,[e("summary",null,[t[1657]||(t[1657]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapGetSubMap-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapGetSubMap-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapGetSubMap")],-1)),t[1658]||(t[1658]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1660]||(t[1660]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapGetSubMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, size, resultPos)</span></span></code></pre></div><p>Returns the affine map consisting of the <code>resultPos</code> subset.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1659]||(t[1659]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3211-L3215",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Un,[e("summary",null,[t[1661]||(t[1661]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsEmpty-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsEmpty-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsEmpty")],-1)),t[1662]||(t[1662]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1664]||(t[1664]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is an empty affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1663]||(t[1663]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3119-L3123",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qn,[e("summary",null,[t[1665]||(t[1665]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsIdentity-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsIdentity-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsIdentity")],-1)),t[1666]||(t[1666]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1668]||(t[1668]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is an identity affine map. The function asserts that the number of dimensions is greater or equal to the number of results.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1667]||(t[1667]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3101-L3105",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qn,[e("summary",null,[t[1669]||(t[1669]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsMinorIdentity-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsMinorIdentity-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsMinorIdentity")],-1)),t[1670]||(t[1670]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1672]||(t[1672]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsMinorIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is a minor identity affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1671]||(t[1671]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3110-L3114",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wn,[e("summary",null,[t[1673]||(t[1673]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsNull")],-1)),t[1674]||(t[1674]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1676]||(t[1676]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether an affine map is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1675]||(t[1675]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2986-L2990",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zn,[e("summary",null,[t[1677]||(t[1677]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsPermutation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsPermutation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsPermutation")],-1)),t[1678]||(t[1678]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1680]||(t[1680]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsPermutation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map represents a symbol-less permutation map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1679]||(t[1679]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3202-L3206",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hn,[e("summary",null,[t[1681]||(t[1681]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsProjectedPermutation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsProjectedPermutation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsProjectedPermutation")],-1)),t[1682]||(t[1682]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1684]||(t[1684]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsProjectedPermutation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map represents a subset of a symbol-less permutation map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1683]||(t[1683]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3193-L3197",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jn,[e("summary",null,[t[1685]||(t[1685]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapIsSingleConstant-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineMapIsSingleConstant-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapIsSingleConstant")],-1)),t[1686]||(t[1686]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1688]||(t[1688]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapIsSingleConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap)</span></span></code></pre></div><p>Checks whether the given affine map is a single result constant affine map.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1687]||(t[1687]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3128-L3132",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kn,[e("summary",null,[t[1689]||(t[1689]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapMinorIdentityGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapMinorIdentityGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapMinorIdentityGet")],-1)),t[1690]||(t[1690]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1692]||(t[1692]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapMinorIdentityGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, dims, results)</span></span></code></pre></div><p>Creates an identity affine map on the most minor dimensions in the context. The affine map is owned by the context. The function asserts that the number of dimensions is greater or equal to the number of results.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1691]||(t[1691]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3079-L3083",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$n,[e("summary",null,[t[1693]||(t[1693]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapMultiDimIdentityGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapMultiDimIdentityGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapMultiDimIdentityGet")],-1)),t[1694]||(t[1694]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1696]||(t[1696]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapMultiDimIdentityGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, numDims)</span></span></code></pre></div><p>Creates an affine map with &#39;numDims&#39; identity in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1695]||(t[1695]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3068-L3072",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xn,[e("summary",null,[t[1697]||(t[1697]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapPermutationGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapPermutationGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapPermutationGet")],-1)),t[1698]||(t[1698]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1700]||(t[1700]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapPermutationGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, size, permutation)</span></span></code></pre></div><p>Creates an affine map with a permutation expression and its size in the context. The permutation expression is a non-empty vector of integers. The elements of the permutation vector must be continuous from 0 and cannot be repeated (i.e. <code>[1,2,0]</code> is a valid permutation. <code>[2,0]</code> or <code>[1,1,2]</code> is an invalid permutation.) The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1699]||(t[1699]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3090-L3094",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yn,[e("summary",null,[t[1701]||(t[1701]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapPrint")],-1)),t[1702]||(t[1702]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1704]||(t[1704]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, callback, userData)</span></span></code></pre></div><p>Prints an affine map by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1703]||(t[1703]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3004-L3008",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tr,[e("summary",null,[t[1705]||(t[1705]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapReplace-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirAffineMapReplace-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapReplace")],-1)),t[1706]||(t[1706]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1708]||(t[1708]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapReplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineMap, expression, replacement, numResultDims, numResultSyms)</span></span></code></pre></div><p>Apply AffineExpr::replace(<code>map</code>) to each of the results and return a new new AffineMap with the new results and the specified number of dims and symbols.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1707]||(t[1707]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3244-L3248",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",er,[e("summary",null,[t[1709]||(t[1709]=e("a",{id:"Reactant.MLIR.API.mlirAffineMapZeroResultGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMapZeroResultGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMapZeroResultGet")],-1)),t[1710]||(t[1710]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1712]||(t[1712]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMapZeroResultGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, dimCount, symbolCount)</span></span></code></pre></div><p>Creates a zero result affine map of the given dimensions and symbols in the context. The affine map is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1711]||(t[1711]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3033-L3037",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sr,[e("summary",null,[t[1713]||(t[1713]=e("a",{id:"Reactant.MLIR.API.mlirAffineModExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineModExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineModExprGet")],-1)),t[1714]||(t[1714]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1716]||(t[1716]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineModExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine mod expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1715]||(t[1715]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2899-L2903",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ar,[e("summary",null,[t[1717]||(t[1717]=e("a",{id:"Reactant.MLIR.API.mlirAffineMulExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineMulExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineMulExprGet")],-1)),t[1718]||(t[1718]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1720]||(t[1720]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineMulExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs)</span></span></code></pre></div><p>Creates an affine mul expression with &#39;lhs&#39; and &#39;rhs&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1719]||(t[1719]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2879-L2883",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ir,[e("summary",null,[t[1721]||(t[1721]=e("a",{id:"Reactant.MLIR.API.mlirAffineSymbolExprGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAffineSymbolExprGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineSymbolExprGet")],-1)),t[1722]||(t[1722]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1724]||(t[1724]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineSymbolExprGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, position)</span></span></code></pre></div><p>Creates an affine symbol expression with &#39;position&#39; in the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1723]||(t[1723]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2801-L2805",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lr,[e("summary",null,[t[1725]||(t[1725]=e("a",{id:"Reactant.MLIR.API.mlirAffineSymbolExprGetPosition-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAffineSymbolExprGetPosition-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAffineSymbolExprGetPosition")],-1)),t[1726]||(t[1726]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1728]||(t[1728]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAffineSymbolExprGetPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(affineExpr)</span></span></code></pre></div><p>Returns the position of the given affine symbol expression.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1727]||(t[1727]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2812-L2816",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nr,[e("summary",null,[t[1729]||(t[1729]=e("a",{id:"Reactant.MLIR.API.mlirAnyQuantizedTypeGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirAnyQuantizedTypeGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAnyQuantizedTypeGet")],-1)),t[1730]||(t[1730]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1732]||(t[1732]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAnyQuantizedTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, storageType, expressedType, storageTypeMin, storageTypeMax)</span></span></code></pre></div><p>Creates an instance of AnyQuantizedType with the given parameters in the same context as <code>storageType</code> and returns it. The instance is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1731]||(t[1731]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7642-L7646",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rr,[e("summary",null,[t[1733]||(t[1733]=e("a",{id:"Reactant.MLIR.API.mlirArrayAttrGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirArrayAttrGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirArrayAttrGet")],-1)),t[1734]||(t[1734]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1736]||(t[1736]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirArrayAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, numElements, elements)</span></span></code></pre></div><p>Creates an array element containing the given list of elements in the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1735]||(t[1735]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3513-L3517",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",or,[e("summary",null,[t[1737]||(t[1737]=e("a",{id:"Reactant.MLIR.API.mlirArrayAttrGetElement-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirArrayAttrGetElement-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirArrayAttrGetElement")],-1)),t[1738]||(t[1738]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1740]||(t[1740]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirArrayAttrGetElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, pos)</span></span></code></pre></div><p>Returns pos-th element stored in the given array attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1739]||(t[1739]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3533-L3537",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pr,[e("summary",null,[t[1741]||(t[1741]=e("a",{id:"Reactant.MLIR.API.mlirArrayAttrGetNumElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirArrayAttrGetNumElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirArrayAttrGetNumElements")],-1)),t[1742]||(t[1742]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1744]||(t[1744]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirArrayAttrGetNumElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the number of elements stored in the given array attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1743]||(t[1743]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3524-L3528",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dr,[e("summary",null,[t[1745]||(t[1745]=e("a",{id:"Reactant.MLIR.API.mlirArrayAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirArrayAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirArrayAttrGetTypeID")],-1)),t[1746]||(t[1746]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1748]||(t[1748]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirArrayAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Array attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1747]||(t[1747]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3542-L3546",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ur,[e("summary",null,[t[1749]||(t[1749]=e("a",{id:"Reactant.MLIR.API.mlirAsmStateCreateForOperation-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAsmStateCreateForOperation-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAsmStateCreateForOperation")],-1)),t[1750]||(t[1750]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1752]||(t[1752]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAsmStateCreateForOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, flags)</span></span></code></pre></div><p>Creates new AsmState, as with AsmState the IR should not be mutated in-between using this state. Must be freed with a call to <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirAsmStateDestroy-Tuple{Any}"><code>mlirAsmStateDestroy</code></a>().</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1751]||(t[1751]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1095-L1099",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cr,[e("summary",null,[t[1753]||(t[1753]=e("a",{id:"Reactant.MLIR.API.mlirAsmStateCreateForValue-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAsmStateCreateForValue-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAsmStateCreateForValue")],-1)),t[1754]||(t[1754]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1756]||(t[1756]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAsmStateCreateForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, flags)</span></span></code></pre></div><p>Creates new AsmState from value. Must be freed with a call to <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirAsmStateDestroy-Tuple{Any}"><code>mlirAsmStateDestroy</code></a>().</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1755]||(t[1755]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1106-L1110",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hr,[e("summary",null,[t[1757]||(t[1757]=e("a",{id:"Reactant.MLIR.API.mlirAsmStateDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAsmStateDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAsmStateDestroy")],-1)),t[1758]||(t[1758]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1760]||(t[1760]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAsmStateDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)</span></span></code></pre></div><p>Destroys printing flags created with mlirAsmStateCreate.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1759]||(t[1759]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1117-L1121",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",br,[e("summary",null,[t[1761]||(t[1761]=e("a",{id:"Reactant.MLIR.API.mlirAttributeDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeDump")],-1)),t[1762]||(t[1762]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1764]||(t[1764]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Prints the attribute to the standard error stream.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1763]||(t[1763]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2456-L2460",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yr,[e("summary",null,[t[1765]||(t[1765]=e("a",{id:"Reactant.MLIR.API.mlirAttributeEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAttributeEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeEqual")],-1)),t[1766]||(t[1766]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1768]||(t[1768]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a1, a2)</span></span></code></pre></div><p>Checks if two attributes are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1767]||(t[1767]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2436-L2440",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gr,[e("summary",null,[t[1769]||(t[1769]=e("a",{id:"Reactant.MLIR.API.mlirAttributeGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeGetContext")],-1)),t[1770]||(t[1770]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1772]||(t[1772]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the context that an attribute was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1771]||(t[1771]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2391-L2395",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mr,[e("summary",null,[t[1773]||(t[1773]=e("a",{id:"Reactant.MLIR.API.mlirAttributeGetDialect-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeGetDialect-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeGetDialect")],-1)),t[1774]||(t[1774]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1776]||(t[1776]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeGetDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the dialect of the attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1775]||(t[1775]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2418-L2422",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kr,[e("summary",null,[t[1777]||(t[1777]=e("a",{id:"Reactant.MLIR.API.mlirAttributeGetNull-Tuple{}",href:"#Reactant.MLIR.API.mlirAttributeGetNull-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeGetNull")],-1)),t[1778]||(t[1778]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1780]||(t[1780]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeGetNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns an empty attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1779]||(t[1779]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3455-L3459",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fr,[e("summary",null,[t[1781]||(t[1781]=e("a",{id:"Reactant.MLIR.API.mlirAttributeGetType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeGetType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeGetType")],-1)),t[1782]||(t[1782]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1784]||(t[1784]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeGetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the type of this attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1783]||(t[1783]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2400-L2404",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rr,[e("summary",null,[t[1785]||(t[1785]=e("a",{id:"Reactant.MLIR.API.mlirAttributeGetTypeID-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeGetTypeID-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeGetTypeID")],-1)),t[1786]||(t[1786]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1788]||(t[1788]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Gets the type id of the attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1787]||(t[1787]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2409-L2413",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ir,[e("summary",null,[t[1789]||(t[1789]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAAffineMap-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAAffineMap-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAAffineMap")],-1)),t[1790]||(t[1790]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1792]||(t[1792]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAAffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an affine map attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1791]||(t[1791]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3468-L3472",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tr,[e("summary",null,[t[1793]||(t[1793]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAArray-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAArray-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAArray")],-1)),t[1794]||(t[1794]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1796]||(t[1796]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an array attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1795]||(t[1795]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3504-L3508",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ar,[e("summary",null,[t[1797]||(t[1797]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsABool-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsABool-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsABool")],-1)),t[1798]||(t[1798]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1800]||(t[1800]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsABool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a bool attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1799]||(t[1799]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3714-L3718",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jr,[e("summary",null,[t[1801]||(t[1801]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsADenseBoolArray-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsADenseBoolArray-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsADenseBoolArray")],-1)),t[1802]||(t[1802]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1804]||(t[1804]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsADenseBoolArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a dense array attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1803]||(t[1803]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4088-L4092",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_r,[e("summary",null,[t[1805]||(t[1805]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsADenseElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsADenseElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsADenseElements")],-1)),t[1806]||(t[1806]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1808]||(t[1808]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsADenseElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a dense elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1807]||(t[1807]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4210-L4214",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mr,[e("summary",null,[t[1809]||(t[1809]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsADictionary-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsADictionary-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsADictionary")],-1)),t[1810]||(t[1810]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1812]||(t[1812]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsADictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a dictionary attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1811]||(t[1811]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3551-L3555",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lr,[e("summary",null,[t[1813]||(t[1813]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAElements")],-1)),t[1814]||(t[1814]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1816]||(t[1816]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1815]||(t[1815]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4044-L4048",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Er,[e("summary",null,[t[1817]||(t[1817]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAFlatSymbolRef-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAFlatSymbolRef-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAFlatSymbolRef")],-1)),t[1818]||(t[1818]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1820]||(t[1820]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAFlatSymbolRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a flat symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1819]||(t[1819]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3952-L3956",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cr,[e("summary",null,[t[1821]||(t[1821]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAFloat-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAFloat-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAFloat")],-1)),t[1822]||(t[1822]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1824]||(t[1824]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a floating point attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1823]||(t[1823]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3611-L3615",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vr,[e("summary",null,[t[1825]||(t[1825]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAInteger-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAInteger-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAInteger")],-1)),t[1826]||(t[1826]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1828]||(t[1828]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an integer attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1827]||(t[1827]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3660-L3664",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pr,[e("summary",null,[t[1829]||(t[1829]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAIntegerSet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAIntegerSet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAIntegerSet")],-1)),t[1830]||(t[1830]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1832]||(t[1832]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAIntegerSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an integer set attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1831]||(t[1831]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3741-L3745",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xr,[e("summary",null,[t[1833]||(t[1833]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAOpaque-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAOpaque-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAOpaque")],-1)),t[1834]||(t[1834]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1836]||(t[1836]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAOpaque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is an opaque attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1835]||(t[1835]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3777-L3781",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sr,[e("summary",null,[t[1837]||(t[1837]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsASparseElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsASparseElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsASparseElements")],-1)),t[1838]||(t[1838]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1840]||(t[1840]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsASparseElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a sparse elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1839]||(t[1839]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4800-L4804",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dr,[e("summary",null,[t[1841]||(t[1841]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsASparseTensorEncodingAttr-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsASparseTensorEncodingAttr-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsASparseTensorEncodingAttr")],-1)),t[1842]||(t[1842]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1844]||(t[1844]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsASparseTensorEncodingAttr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1843]||(t[1843]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7978-L7982",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fr,[e("summary",null,[t[1845]||(t[1845]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAString-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAString-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAString")],-1)),t[1846]||(t[1846]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1848]||(t[1848]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a string attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1847]||(t[1847]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3828-L3832",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vr,[e("summary",null,[t[1849]||(t[1849]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsASymbolRef-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsASymbolRef-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsASymbolRef")],-1)),t[1850]||(t[1850]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1852]||(t[1852]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsASymbolRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1851]||(t[1851]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3873-L3877",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Or,[e("summary",null,[t[1853]||(t[1853]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAType")],-1)),t[1854]||(t[1854]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1856]||(t[1856]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a type attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1855]||(t[1855]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3981-L3985",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Br,[e("summary",null,[t[1857]||(t[1857]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsAUnit-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsAUnit-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsAUnit")],-1)),t[1858]||(t[1858]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1860]||(t[1860]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsAUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given attribute is a unit attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1859]||(t[1859]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4017-L4021",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nr,[e("summary",null,[t[1861]||(t[1861]=e("a",{id:"Reactant.MLIR.API.mlirAttributeIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirAttributeIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeIsNull")],-1)),t[1862]||(t[1862]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1864]||(t[1864]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether an attribute is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1863]||(t[1863]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2427-L2431",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gr,[e("summary",null,[t[1865]||(t[1865]=e("a",{id:"Reactant.MLIR.API.mlirAttributeParseGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirAttributeParseGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributeParseGet")],-1)),t[1866]||(t[1866]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1868]||(t[1868]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributeParseGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, attr)</span></span></code></pre></div><p>Parses an attribute. The attribute is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1867]||(t[1867]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2380-L2384",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zr,[e("summary",null,[t[1869]||(t[1869]=e("a",{id:"Reactant.MLIR.API.mlirAttributePrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirAttributePrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirAttributePrint")],-1)),t[1870]||(t[1870]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1872]||(t[1872]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirAttributePrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, callback, userData)</span></span></code></pre></div><p>Prints an attribute by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1871]||(t[1871]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2445-L2449",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wr,[e("summary",null,[t[1873]||(t[1873]=e("a",{id:"Reactant.MLIR.API.mlirBF16TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBF16TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBF16TypeGet")],-1)),t[1874]||(t[1874]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1876]||(t[1876]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBF16TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a bf16 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1875]||(t[1875]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5319-L5323",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ur,[e("summary",null,[t[1877]||(t[1877]=e("a",{id:"Reactant.MLIR.API.mlirBFloat16TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirBFloat16TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBFloat16TypeGetTypeID")],-1)),t[1878]||(t[1878]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1880]||(t[1880]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBFloat16TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an BFloat16 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1879]||(t[1879]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5301-L5305",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qr,[e("summary",null,[t[1881]||(t[1881]=e("a",{id:"Reactant.MLIR.API.mlirBlockAddArgument-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirBlockAddArgument-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockAddArgument")],-1)),t[1882]||(t[1882]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1884]||(t[1884]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockAddArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, type, loc)</span></span></code></pre></div><p>Appends an argument of the specified type to the block. Returns the newly added argument.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1883]||(t[1883]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2027-L2031",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qr,[e("summary",null,[t[1885]||(t[1885]=e("a",{id:"Reactant.MLIR.API.mlirBlockAppendOwnedOperation-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBlockAppendOwnedOperation-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockAppendOwnedOperation")],-1)),t[1886]||(t[1886]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1888]||(t[1888]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockAppendOwnedOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and appends it to the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1887]||(t[1887]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1974-L1978",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wr,[e("summary",null,[t[1889]||(t[1889]=e("a",{id:"Reactant.MLIR.API.mlirBlockArgumentGetArgNumber-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockArgumentGetArgNumber-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockArgumentGetArgNumber")],-1)),t[1890]||(t[1890]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1892]||(t[1892]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockArgumentGetArgNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the position of the value in the argument list of its block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1891]||(t[1891]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2123-L2127",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zr,[e("summary",null,[t[1893]||(t[1893]=e("a",{id:"Reactant.MLIR.API.mlirBlockArgumentGetOwner-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockArgumentGetOwner-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockArgumentGetOwner")],-1)),t[1894]||(t[1894]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1896]||(t[1896]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockArgumentGetOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the block in which this value is defined as an argument. Asserts if the value is not a block argument.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1895]||(t[1895]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2114-L2118",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hr,[e("summary",null,[t[1897]||(t[1897]=e("a",{id:"Reactant.MLIR.API.mlirBlockArgumentSetType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBlockArgumentSetType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockArgumentSetType")],-1)),t[1898]||(t[1898]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1900]||(t[1900]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockArgumentSetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, type)</span></span></code></pre></div><p>Sets the type of the block argument to the given type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1899]||(t[1899]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2132-L2136",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jr,[e("summary",null,[t[1901]||(t[1901]=e("a",{id:"Reactant.MLIR.API.mlirBlockCreate-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirBlockCreate-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockCreate")],-1)),t[1902]||(t[1902]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1904]||(t[1904]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nArgs, args, locs)</span></span></code></pre></div><p>Creates a new empty block with the given argument types and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1903]||(t[1903]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1882-L1886",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kr,[e("summary",null,[t[1905]||(t[1905]=e("a",{id:"Reactant.MLIR.API.mlirBlockDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockDestroy")],-1)),t[1906]||(t[1906]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1908]||(t[1908]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Takes a block owned by the caller and destroys it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1907]||(t[1907]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1893-L1897",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$r,[e("summary",null,[t[1909]||(t[1909]=e("a",{id:"Reactant.MLIR.API.mlirBlockDetach-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockDetach-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockDetach")],-1)),t[1910]||(t[1910]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1912]||(t[1912]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockDetach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Detach a block from the owning region and assume ownership.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1911]||(t[1911]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1902-L1906",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xr,[e("summary",null,[t[1913]||(t[1913]=e("a",{id:"Reactant.MLIR.API.mlirBlockEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBlockEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockEqual")],-1)),t[1914]||(t[1914]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1916]||(t[1916]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, other)</span></span></code></pre></div><p>Checks whether two blocks handles point to the same block. This does not perform deep comparison.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1915]||(t[1915]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1920-L1924",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yr,[e("summary",null,[t[1917]||(t[1917]=e("a",{id:"Reactant.MLIR.API.mlirBlockEraseArgument-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBlockEraseArgument-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockEraseArgument")],-1)),t[1918]||(t[1918]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1920]||(t[1920]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockEraseArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, index)</span></span></code></pre></div><p>Erase the argument at &#39;index&#39; and remove it from the argument list.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1919]||(t[1919]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2038-L2042",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",to,[e("summary",null,[t[1921]||(t[1921]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetArgument-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBlockGetArgument-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetArgument")],-1)),t[1922]||(t[1922]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1924]||(t[1924]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th argument of the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1923]||(t[1923]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2058-L2062",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",eo,[e("summary",null,[t[1925]||(t[1925]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetFirstOperation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockGetFirstOperation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetFirstOperation")],-1)),t[1926]||(t[1926]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1928]||(t[1928]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetFirstOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the first operation in the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1927]||(t[1927]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1956-L1960",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",so,[e("summary",null,[t[1929]||(t[1929]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetNextInRegion-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockGetNextInRegion-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetNextInRegion")],-1)),t[1930]||(t[1930]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1932]||(t[1932]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetNextInRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the block immediately following the given block in its parent region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1931]||(t[1931]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1947-L1951",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ao,[e("summary",null,[t[1933]||(t[1933]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetNumArguments-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockGetNumArguments-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetNumArguments")],-1)),t[1934]||(t[1934]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1936]||(t[1936]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetNumArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the number of arguments of the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1935]||(t[1935]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2018-L2022",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",io,[e("summary",null,[t[1937]||(t[1937]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetParentOperation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockGetParentOperation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetParentOperation")],-1)),t[1938]||(t[1938]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1940]||(t[1940]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetParentOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg1)</span></span></code></pre></div><p>Returns the closest surrounding operation that contains this block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1939]||(t[1939]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1929-L1933",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lo,[e("summary",null,[t[1941]||(t[1941]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetParentRegion-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockGetParentRegion-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetParentRegion")],-1)),t[1942]||(t[1942]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1944]||(t[1944]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetParentRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the region that contains this block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1943]||(t[1943]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1938-L1942",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",no,[e("summary",null,[t[1945]||(t[1945]=e("a",{id:"Reactant.MLIR.API.mlirBlockGetTerminator-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockGetTerminator-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockGetTerminator")],-1)),t[1946]||(t[1946]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1948]||(t[1948]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockGetTerminator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Returns the terminator operation in the block or null if no terminator.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1947]||(t[1947]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1965-L1969",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ro,[e("summary",null,[t[1949]||(t[1949]=e("a",{id:"Reactant.MLIR.API.mlirBlockInsertArgument-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirBlockInsertArgument-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockInsertArgument")],-1)),t[1950]||(t[1950]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1952]||(t[1952]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockInsertArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, pos, type, loc)</span></span></code></pre></div><p>Inserts an argument of the specified type at a specified index to the block. Returns the newly added argument.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1951]||(t[1951]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2047-L2051",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oo,[e("summary",null,[t[1953]||(t[1953]=e("a",{id:"Reactant.MLIR.API.mlirBlockInsertOwnedOperation-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirBlockInsertOwnedOperation-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockInsertOwnedOperation")],-1)),t[1954]||(t[1954]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1956]||(t[1956]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockInsertOwnedOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, pos, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and inserts it as <code>pos</code> to the block. This is an expensive operation that scans the block linearly, prefer insertBefore/After instead.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1955]||(t[1955]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1985-L1989",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",po,[e("summary",null,[t[1957]||(t[1957]=e("a",{id:"Reactant.MLIR.API.mlirBlockInsertOwnedOperationAfter-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirBlockInsertOwnedOperationAfter-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockInsertOwnedOperationAfter")],-1)),t[1958]||(t[1958]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1960]||(t[1960]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockInsertOwnedOperationAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, reference, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and inserts it after the (non-owned) reference operation in the given block. If the reference is null, prepends the operation. Otherwise, the reference must belong to the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1959]||(t[1959]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1996-L2000",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uo,[e("summary",null,[t[1961]||(t[1961]=e("a",{id:"Reactant.MLIR.API.mlirBlockInsertOwnedOperationBefore-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirBlockInsertOwnedOperationBefore-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockInsertOwnedOperationBefore")],-1)),t[1962]||(t[1962]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1964]||(t[1964]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockInsertOwnedOperationBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, reference, operation)</span></span></code></pre></div><p>Takes an operation owned by the caller and inserts it before the (non-owned) reference operation in the given block. If the reference is null, appends the operation. Otherwise, the reference must belong to the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1963]||(t[1963]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2007-L2011",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",co,[e("summary",null,[t[1965]||(t[1965]=e("a",{id:"Reactant.MLIR.API.mlirBlockIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBlockIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockIsNull")],-1)),t[1966]||(t[1966]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1968]||(t[1968]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span></code></pre></div><p>Checks whether a block is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1967]||(t[1967]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1911-L1915",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ho,[e("summary",null,[t[1969]||(t[1969]=e("a",{id:"Reactant.MLIR.API.mlirBlockPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirBlockPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBlockPrint")],-1)),t[1970]||(t[1970]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1972]||(t[1972]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBlockPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block, callback, userData)</span></span></code></pre></div><p>Prints a block by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1971]||(t[1971]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2067-L2071",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bo,[e("summary",null,[t[1973]||(t[1973]=e("a",{id:"Reactant.MLIR.API.mlirBoolAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBoolAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBoolAttrGet")],-1)),t[1974]||(t[1974]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1976]||(t[1976]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBoolAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, value)</span></span></code></pre></div><p>Creates a bool attribute in the given context with the given value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1975]||(t[1975]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3723-L3727",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yo,[e("summary",null,[t[1977]||(t[1977]=e("a",{id:"Reactant.MLIR.API.mlirBoolAttrGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBoolAttrGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBoolAttrGetValue")],-1)),t[1978]||(t[1978]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1980]||(t[1980]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBoolAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given bool attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1979]||(t[1979]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3732-L3736",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",go,[e("summary",null,[t[1981]||(t[1981]=e("a",{id:"Reactant.MLIR.API.mlirBytecodeWriterConfigCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirBytecodeWriterConfigCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBytecodeWriterConfigCreate")],-1)),t[1982]||(t[1982]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1984]||(t[1984]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBytecodeWriterConfigCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates new printing flags with defaults, intended for customization. Must be freed with a call to <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirBytecodeWriterConfigDestroy-Tuple{Any}"><code>mlirBytecodeWriterConfigDestroy</code></a>().</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1983]||(t[1983]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1222-L1226",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mo,[e("summary",null,[t[1985]||(t[1985]=e("a",{id:"Reactant.MLIR.API.mlirBytecodeWriterConfigDesiredEmitVersion-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirBytecodeWriterConfigDesiredEmitVersion-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBytecodeWriterConfigDesiredEmitVersion")],-1)),t[1986]||(t[1986]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1988]||(t[1988]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBytecodeWriterConfigDesiredEmitVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, version)</span></span></code></pre></div><p>Sets the version to emit in the writer config.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1987]||(t[1987]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1240-L1244",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ko,[e("summary",null,[t[1989]||(t[1989]=e("a",{id:"Reactant.MLIR.API.mlirBytecodeWriterConfigDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirBytecodeWriterConfigDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirBytecodeWriterConfigDestroy")],-1)),t[1990]||(t[1990]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1992]||(t[1992]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirBytecodeWriterConfigDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span></code></pre></div><p>Destroys printing flags created with <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirBytecodeWriterConfigCreate-Tuple{}"><code>mlirBytecodeWriterConfigCreate</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1991]||(t[1991]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1231-L1235",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fo,[e("summary",null,[t[1993]||(t[1993]=e("a",{id:"Reactant.MLIR.API.mlirCalibratedQuantizedTypeGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirCalibratedQuantizedTypeGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirCalibratedQuantizedTypeGet")],-1)),t[1994]||(t[1994]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[1996]||(t[1996]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirCalibratedQuantizedTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expressedType, min, max)</span></span></code></pre></div><p>Creates an instance of CalibratedQuantizedType with the given parameters in the same context as <code>expressedType</code> and returns it. The instance is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1995]||(t[1995]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7907-L7911",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ro,[e("summary",null,[t[1997]||(t[1997]=e("a",{id:"Reactant.MLIR.API.mlirCalibratedQuantizedTypeGetMax-Tuple{Any}",href:"#Reactant.MLIR.API.mlirCalibratedQuantizedTypeGetMax-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirCalibratedQuantizedTypeGetMax")],-1)),t[1998]||(t[1998]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2e3]||(t[2e3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirCalibratedQuantizedTypeGetMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the max value of the given calibrated quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[1999]||(t[1999]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7927-L7931",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Io,[e("summary",null,[t[2001]||(t[2001]=e("a",{id:"Reactant.MLIR.API.mlirCalibratedQuantizedTypeGetMin-Tuple{Any}",href:"#Reactant.MLIR.API.mlirCalibratedQuantizedTypeGetMin-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirCalibratedQuantizedTypeGetMin")],-1)),t[2002]||(t[2002]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2004]||(t[2004]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirCalibratedQuantizedTypeGetMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the min value of the given calibrated quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2003]||(t[2003]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7918-L7922",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",To,[e("summary",null,[t[2005]||(t[2005]=e("a",{id:"Reactant.MLIR.API.mlirComplexTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirComplexTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirComplexTypeGet")],-1)),t[2006]||(t[2006]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2008]||(t[2008]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirComplexTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType)</span></span></code></pre></div><p>Creates a complex type with the given element type in the same context as the element type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2007]||(t[2007]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5481-L5485",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ao,[e("summary",null,[t[2009]||(t[2009]=e("a",{id:"Reactant.MLIR.API.mlirComplexTypeGetElementType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirComplexTypeGetElementType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirComplexTypeGetElementType")],-1)),t[2010]||(t[2010]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2012]||(t[2012]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirComplexTypeGetElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the element type of the given complex type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2011]||(t[2011]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5490-L5494",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jo,[e("summary",null,[t[2013]||(t[2013]=e("a",{id:"Reactant.MLIR.API.mlirComplexTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirComplexTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirComplexTypeGetTypeID")],-1)),t[2014]||(t[2014]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2016]||(t[2016]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirComplexTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Complex type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2015]||(t[2015]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5463-L5467",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_o,[e("summary",null,[t[2017]||(t[2017]=e("a",{id:"Reactant.MLIR.API.mlirContextAppendDialectRegistry-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextAppendDialectRegistry-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextAppendDialectRegistry")],-1)),t[2018]||(t[2018]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2020]||(t[2020]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextAppendDialectRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, registry)</span></span></code></pre></div><p>Append the contents of the given dialect registry to the registry associated with the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2019]||(t[2019]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L422-L426",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mo,[e("summary",null,[t[2021]||(t[2021]=e("a",{id:"Reactant.MLIR.API.mlirContextAttachDiagnosticHandler-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirContextAttachDiagnosticHandler-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextAttachDiagnosticHandler")],-1)),t[2022]||(t[2022]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2024]||(t[2024]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextAttachDiagnosticHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, handler, userData, deleteUserData)</span></span></code></pre></div><p>Attaches the diagnostic handler to the context. Handlers are invoked in the reverse order of attachment until one of them processes the diagnostic completely. When a handler is invoked it is passed the <code>userData</code> that was provided when it was attached. If non-NULL, <code>deleteUserData</code> is called once the system no longer needs to call the handler (for instance after the handler is detached or the context is destroyed). Returns an identifier that can be used to detach the handler.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2023]||(t[2023]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6235-L6239",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lo,[e("summary",null,[t[2025]||(t[2025]=e("a",{id:"Reactant.MLIR.API.mlirContextCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirContextCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextCreate")],-1)),t[2026]||(t[2026]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2028]||(t[2028]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates an MLIR context and transfers its ownership to the caller. This sets the default multithreading option (enabled).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2027]||(t[2027]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L337-L341",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Eo,[e("summary",null,[t[2029]||(t[2029]=e("a",{id:"Reactant.MLIR.API.mlirContextCreateWithRegistry-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextCreateWithRegistry-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextCreateWithRegistry")],-1)),t[2030]||(t[2030]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2032]||(t[2032]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextCreateWithRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry, threadingEnabled)</span></span></code></pre></div><p>Creates an MLIR context, setting the multithreading setting explicitly and pre-loading the dialects from the provided DialectRegistry.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2031]||(t[2031]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L355-L359",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Co,[e("summary",null,[t[2033]||(t[2033]=e("a",{id:"Reactant.MLIR.API.mlirContextCreateWithThreading-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextCreateWithThreading-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextCreateWithThreading")],-1)),t[2034]||(t[2034]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2036]||(t[2036]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextCreateWithThreading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(threadingEnabled)</span></span></code></pre></div><p>Creates an MLIR context with an explicit setting of the multithreading setting and transfers its ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2035]||(t[2035]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L346-L350",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vo,[e("summary",null,[t[2037]||(t[2037]=e("a",{id:"Reactant.MLIR.API.mlirContextDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextDestroy")],-1)),t[2038]||(t[2038]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2040]||(t[2040]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Takes an MLIR context owned by the caller and destroys it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2039]||(t[2039]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L384-L388",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Po,[e("summary",null,[t[2041]||(t[2041]=e("a",{id:"Reactant.MLIR.API.mlirContextDetachDiagnosticHandler-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextDetachDiagnosticHandler-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextDetachDiagnosticHandler")],-1)),t[2042]||(t[2042]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2044]||(t[2044]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextDetachDiagnosticHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, id)</span></span></code></pre></div><p>Detaches an attached diagnostic handler from the context given its identifier.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2043]||(t[2043]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6249-L6253",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xo,[e("summary",null,[t[2045]||(t[2045]=e("a",{id:"Reactant.MLIR.API.mlirContextEnableMultithreading-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextEnableMultithreading-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextEnableMultithreading")],-1)),t[2046]||(t[2046]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2048]||(t[2048]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextEnableMultithreading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, enable)</span></span></code></pre></div><p>Set threading mode (must be set to false to mlir-print-ir-after-all).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2047]||(t[2047]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L453-L457",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",So,[e("summary",null,[t[2049]||(t[2049]=e("a",{id:"Reactant.MLIR.API.mlirContextEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextEqual")],-1)),t[2050]||(t[2050]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2052]||(t[2052]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx1, ctx2)</span></span></code></pre></div><p>Checks if two contexts are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2051]||(t[2051]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L366-L370",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Do,[e("summary",null,[t[2053]||(t[2053]=e("a",{id:"Reactant.MLIR.API.mlirContextGetAllowUnregisteredDialects-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextGetAllowUnregisteredDialects-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextGetAllowUnregisteredDialects")],-1)),t[2054]||(t[2054]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2056]||(t[2056]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextGetAllowUnregisteredDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Returns whether the context allows unregistered dialects.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2055]||(t[2055]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L404-L408",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fo,[e("summary",null,[t[2057]||(t[2057]=e("a",{id:"Reactant.MLIR.API.mlirContextGetNumLoadedDialects-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextGetNumLoadedDialects-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextGetNumLoadedDialects")],-1)),t[2058]||(t[2058]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2060]||(t[2060]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextGetNumLoadedDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Returns the number of dialects loaded by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2059]||(t[2059]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L433-L437",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vo,[e("summary",null,[t[2061]||(t[2061]=e("a",{id:"Reactant.MLIR.API.mlirContextGetNumRegisteredDialects-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextGetNumRegisteredDialects-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextGetNumRegisteredDialects")],-1)),t[2062]||(t[2062]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2064]||(t[2064]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextGetNumRegisteredDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Returns the number of dialects registered with the given context. A registered dialect will be loaded if needed by the parser.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2063]||(t[2063]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L413-L417",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oo,[e("summary",null,[t[2065]||(t[2065]=e("a",{id:"Reactant.MLIR.API.mlirContextGetNumThreads-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextGetNumThreads-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextGetNumThreads")],-1)),t[2066]||(t[2066]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2068]||(t[2068]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextGetNumThreads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Gets the number of threads of the thread pool of the context when multithreading is enabled. Returns 1 if no multithreading.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2067]||(t[2067]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L493-L497",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bo,[e("summary",null,[t[2069]||(t[2069]=e("a",{id:"Reactant.MLIR.API.mlirContextGetOrLoadDialect-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextGetOrLoadDialect-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextGetOrLoadDialect")],-1)),t[2070]||(t[2070]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2072]||(t[2072]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextGetOrLoadDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, name)</span></span></code></pre></div><p>Gets the dialect instance owned by the given context using the dialect namespace to identify it, loads (i.e., constructs the instance of) the dialect if necessary. If the dialect is not registered with the context, returns null. Use mlirContextLoad&lt;Name&gt;Dialect to load an unregistered dialect.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2071]||(t[2071]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L442-L446",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",No,[e("summary",null,[t[2073]||(t[2073]=e("a",{id:"Reactant.MLIR.API.mlirContextGetThreadPool-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextGetThreadPool-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextGetThreadPool")],-1)),t[2074]||(t[2074]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2076]||(t[2076]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextGetThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Gets the thread pool of the context when enabled multithreading, otherwise an assertion is raised.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2075]||(t[2075]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L502-L506",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Go,[e("summary",null,[t[2077]||(t[2077]=e("a",{id:"Reactant.MLIR.API.mlirContextIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextIsNull")],-1)),t[2078]||(t[2078]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2080]||(t[2080]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Checks whether a context is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2079]||(t[2079]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L375-L379",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zo,[e("summary",null,[t[2081]||(t[2081]=e("a",{id:"Reactant.MLIR.API.mlirContextIsRegisteredOperation-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextIsRegisteredOperation-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextIsRegisteredOperation")],-1)),t[2082]||(t[2082]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2084]||(t[2084]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextIsRegisteredOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, name)</span></span></code></pre></div><p>Returns whether the given fully-qualified operation (i.e. &#39;dialect.operation&#39;) is registered with the context. This will return true if the dialect is loaded and the operation is registered within the dialect.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2083]||(t[2083]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L471-L475",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wo,[e("summary",null,[t[2085]||(t[2085]=e("a",{id:"Reactant.MLIR.API.mlirContextLoadAllAvailableDialects-Tuple{Any}",href:"#Reactant.MLIR.API.mlirContextLoadAllAvailableDialects-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextLoadAllAvailableDialects")],-1)),t[2086]||(t[2086]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2088]||(t[2088]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextLoadAllAvailableDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Eagerly loads all available dialects registered with a context, making them available for use for IR construction.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2087]||(t[2087]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L462-L466",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uo,[e("summary",null,[t[2089]||(t[2089]=e("a",{id:"Reactant.MLIR.API.mlirContextSetAllowUnregisteredDialects-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextSetAllowUnregisteredDialects-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextSetAllowUnregisteredDialects")],-1)),t[2090]||(t[2090]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2092]||(t[2092]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextSetAllowUnregisteredDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, allow)</span></span></code></pre></div><p>Sets whether unregistered dialects are allowed in this context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2091]||(t[2091]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L393-L397",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qo,[e("summary",null,[t[2093]||(t[2093]=e("a",{id:"Reactant.MLIR.API.mlirContextSetThreadPool-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirContextSetThreadPool-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirContextSetThreadPool")],-1)),t[2094]||(t[2094]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2096]||(t[2096]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirContextSetThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, threadPool)</span></span></code></pre></div><p>Sets the thread pool of the context explicitly, enabling multithreading in the process. This API should be used to avoid re-creating thread pools in long-running applications that perform multiple compilations, see the C++ documentation for MLIRContext for details.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2095]||(t[2095]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L482-L486",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qo,[e("summary",null,[t[2097]||(t[2097]=e("a",{id:"Reactant.MLIR.API.mlirCreateExternalPass-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirCreateExternalPass-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirCreateExternalPass")],-1)),t[2098]||(t[2098]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2100]||(t[2100]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirCreateExternalPass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passID, name, argument, description, opName, nDependentDialects, dependentDialects, callbacks, userData)</span></span></code></pre></div><p>Creates an external <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirPass"><code>MlirPass</code></a> that calls the supplied <code>callbacks</code> using the supplied <code>userData</code>. If <code>opName</code> is empty, the pass is a generic operation pass. Otherwise it is an operation pass specific to the specified pass name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2099]||(t[2099]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8731-L8735",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wo,[e("summary",null,[t[2101]||(t[2101]=e("a",{id:"Reactant.MLIR.API.mlirDenseArrayGetNumElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDenseArrayGetNumElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseArrayGetNumElements")],-1)),t[2102]||(t[2102]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2104]||(t[2104]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseArrayGetNumElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Get the size of a dense array.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2103]||(t[2103]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4168-L4172",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zo,[e("summary",null,[t[2105]||(t[2105]=e("a",{id:"Reactant.MLIR.API.mlirDenseBoolArrayGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDenseBoolArrayGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseBoolArrayGet")],-1)),t[2106]||(t[2106]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2108]||(t[2108]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseBoolArrayGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, size, values)</span></span></code></pre></div><p>Create a dense array attribute with the given elements.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2107]||(t[2107]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4121-L4125",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ho,[e("summary",null,[t[2109]||(t[2109]=e("a",{id:"Reactant.MLIR.API.mlirDenseBoolArrayGetElement-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDenseBoolArrayGetElement-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseBoolArrayGetElement")],-1)),t[2110]||(t[2110]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2112]||(t[2112]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseBoolArrayGetElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, pos)</span></span></code></pre></div><p>Get an element of a dense array.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2111]||(t[2111]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4177-L4181",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jo,[e("summary",null,[t[2113]||(t[2113]=e("a",{id:"Reactant.MLIR.API.mlirDenseBoolResourceElementsAttrGetValue-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDenseBoolResourceElementsAttrGetValue-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseBoolResourceElementsAttrGetValue")],-1)),t[2114]||(t[2114]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2116]||(t[2116]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseBoolResourceElementsAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, pos)</span></span></code></pre></div><p>Returns the pos-th value (flat contiguous indexing) of a specific type contained by the given dense resource elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2115]||(t[2115]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4729-L4733",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ko,[e("summary",null,[t[2117]||(t[2117]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrBoolGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrBoolGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrBoolGet")],-1)),t[2118]||(t[2118]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2120]||(t[2120]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrBoolGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, numElements, elements)</span></span></code></pre></div><p>Creates a dense elements attribute with the given shaped type from elements of a specific type. Expects the element type of the shaped type to match the data element type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2119]||(t[2119]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4327-L4331",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$o,[e("summary",null,[t[2121]||(t[2121]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrGet")],-1)),t[2122]||(t[2122]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2124]||(t[2124]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, numElements, elements)</span></span></code></pre></div><p>Creates a dense elements attribute with the given Shaped type and elements in the same context as the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2123]||(t[2123]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4236-L4240",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xo,[e("summary",null,[t[2125]||(t[2125]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrGetBoolValue-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrGetBoolValue-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrGetBoolValue")],-1)),t[2126]||(t[2126]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2128]||(t[2128]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrGetBoolValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, pos)</span></span></code></pre></div><p>Returns the pos-th value (flat contiguous indexing) of a specific type contained by the given dense elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2127]||(t[2127]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4492-L4496",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yo,[e("summary",null,[t[2129]||(t[2129]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrGetRawData-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrGetRawData-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrGetRawData")],-1)),t[2130]||(t[2130]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2132]||(t[2132]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrGetRawData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the raw data of the given dense elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2131]||(t[2131]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4575-L4579",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tp,[e("summary",null,[t[2133]||(t[2133]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrGetSplatValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrGetSplatValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrGetSplatValue")],-1)),t[2134]||(t[2134]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2136]||(t[2136]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrGetSplatValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the single replicated value (splat) of a specific type contained by the given dense elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2135]||(t[2135]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4441-L4445",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ep,[e("summary",null,[t[2137]||(t[2137]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrIsSplat-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrIsSplat-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrIsSplat")],-1)),t[2138]||(t[2138]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2140]||(t[2140]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrIsSplat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Checks whether the given dense elements attribute contains a single replicated value (splat).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2139]||(t[2139]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4432-L4436",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sp,[e("summary",null,[t[2141]||(t[2141]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrRawBufferGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrRawBufferGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrRawBufferGet")],-1)),t[2142]||(t[2142]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2144]||(t[2144]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrRawBufferGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, rawBufferSize, rawBuffer)</span></span></code></pre></div><p>Creates a dense elements attribute with the given Shaped type and elements populated from a packed, row-major opaque buffer of contents.</p><p>The format of the raw buffer is a densely packed array of values that can be bitcast to the storage format of the element type specified. Types that are not byte aligned will be: - For bitwidth &gt; 1: Rounded up to the next byte. - For bitwidth = 1: Packed into 8bit bytes with bits corresponding to the linear order of the shape type from MSB to LSB, padded to on the right.</p><p>A raw buffer of a single element (or for 1-bit, a byte of value 0 or 255) will be interpreted as a splat. User code should be prepared for additional, conformant patterns to be identified as splats in the future.</p>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2143]||(t[2143]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4247-L4255",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ap,[e("summary",null,[t[2145]||(t[2145]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrReshapeGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrReshapeGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrReshapeGet")],-1)),t[2146]||(t[2146]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2148]||(t[2148]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrReshapeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, shapedType)</span></span></code></pre></div><p>Creates a dense elements attribute that has the same data as the given dense elements attribute and a different shaped type. The new type must have the same total number of elements.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2147]||(t[2147]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4421-L4425",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ip,[e("summary",null,[t[2149]||(t[2149]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrSplatGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrSplatGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrSplatGet")],-1)),t[2150]||(t[2150]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2152]||(t[2152]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrSplatGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, element)</span></span></code></pre></div><p>Creates a dense elements attribute with the given Shaped type containing a single replicated element (splat).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2151]||(t[2151]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4262-L4266",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lp,[e("summary",null,[t[2153]||(t[2153]=e("a",{id:"Reactant.MLIR.API.mlirDenseElementsAttrStringGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDenseElementsAttrStringGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseElementsAttrStringGet")],-1)),t[2154]||(t[2154]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2156]||(t[2156]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseElementsAttrStringGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, numElements, strs)</span></span></code></pre></div><p>Creates a dense elements attribute with the given shaped type from string elements.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2155]||(t[2155]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4410-L4414",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",np,[e("summary",null,[t[2157]||(t[2157]=e("a",{id:"Reactant.MLIR.API.mlirDenseIntOrFPElementsAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirDenseIntOrFPElementsAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDenseIntOrFPElementsAttrGetTypeID")],-1)),t[2158]||(t[2158]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2160]||(t[2160]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDenseIntOrFPElementsAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an DenseIntOrFPElements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2159]||(t[2159]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4227-L4231",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rp,[e("summary",null,[t[2161]||(t[2161]=e("a",{id:"Reactant.MLIR.API.mlirDiagnosticGetLocation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDiagnosticGetLocation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDiagnosticGetLocation")],-1)),t[2162]||(t[2162]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2164]||(t[2164]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDiagnosticGetLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diagnostic)</span></span></code></pre></div><p>Returns the location at which the diagnostic is reported.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2163]||(t[2163]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6195-L6199",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",op,[e("summary",null,[t[2165]||(t[2165]=e("a",{id:"Reactant.MLIR.API.mlirDiagnosticGetNote-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDiagnosticGetNote-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDiagnosticGetNote")],-1)),t[2166]||(t[2166]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2168]||(t[2168]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDiagnosticGetNote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diagnostic, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th note attached to the diagnostic. Expects <code>pos</code> to be a valid zero-based index into the list of notes.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2167]||(t[2167]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6224-L6228",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pp,[e("summary",null,[t[2169]||(t[2169]=e("a",{id:"Reactant.MLIR.API.mlirDiagnosticGetNumNotes-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDiagnosticGetNumNotes-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDiagnosticGetNumNotes")],-1)),t[2170]||(t[2170]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2172]||(t[2172]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDiagnosticGetNumNotes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diagnostic)</span></span></code></pre></div><p>Returns the number of notes attached to the diagnostic.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2171]||(t[2171]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6215-L6219",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dp,[e("summary",null,[t[2173]||(t[2173]=e("a",{id:"Reactant.MLIR.API.mlirDiagnosticGetSeverity-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDiagnosticGetSeverity-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDiagnosticGetSeverity")],-1)),t[2174]||(t[2174]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2176]||(t[2176]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDiagnosticGetSeverity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diagnostic)</span></span></code></pre></div><p>Returns the severity of the diagnostic.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2175]||(t[2175]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6204-L6208",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",up,[e("summary",null,[t[2177]||(t[2177]=e("a",{id:"Reactant.MLIR.API.mlirDiagnosticPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDiagnosticPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDiagnosticPrint")],-1)),t[2178]||(t[2178]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2180]||(t[2180]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDiagnosticPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diagnostic, callback, userData)</span></span></code></pre></div><p>Prints a diagnostic using the provided callback.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2179]||(t[2179]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6184-L6188",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cp,[e("summary",null,[t[2181]||(t[2181]=e("a",{id:"Reactant.MLIR.API.mlirDialectEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDialectEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectEqual")],-1)),t[2182]||(t[2182]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2184]||(t[2184]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dialect1, dialect2)</span></span></code></pre></div><p>Checks if two dialects that belong to the same context are equal. Dialects from different contexts will not compare equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2183]||(t[2183]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L529-L533",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hp,[e("summary",null,[t[2185]||(t[2185]=e("a",{id:"Reactant.MLIR.API.mlirDialectGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDialectGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectGetContext")],-1)),t[2186]||(t[2186]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2188]||(t[2188]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dialect)</span></span></code></pre></div><p>Returns the context that owns the dialect.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2187]||(t[2187]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L511-L515",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bp,[e("summary",null,[t[2189]||(t[2189]=e("a",{id:"Reactant.MLIR.API.mlirDialectGetNamespace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDialectGetNamespace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectGetNamespace")],-1)),t[2190]||(t[2190]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2192]||(t[2192]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectGetNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dialect)</span></span></code></pre></div><p>Returns the namespace of the given dialect.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2191]||(t[2191]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L538-L542",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yp,[e("summary",null,[t[2193]||(t[2193]=e("a",{id:"Reactant.MLIR.API.mlirDialectHandleGetNamespace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDialectHandleGetNamespace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectHandleGetNamespace")],-1)),t[2194]||(t[2194]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2196]||(t[2196]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectHandleGetNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg1)</span></span></code></pre></div><p>Returns the namespace associated with the provided dialect handle.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2195]||(t[2195]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L547-L551",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gp,[e("summary",null,[t[2197]||(t[2197]=e("a",{id:"Reactant.MLIR.API.mlirDialectHandleInsertDialect-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDialectHandleInsertDialect-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectHandleInsertDialect")],-1)),t[2198]||(t[2198]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2200]||(t[2200]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectHandleInsertDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg1, arg2)</span></span></code></pre></div><p>Inserts the dialect associated with the provided dialect handle into the provided dialect registry</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2199]||(t[2199]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L556-L560",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mp,[e("summary",null,[t[2201]||(t[2201]=e("a",{id:"Reactant.MLIR.API.mlirDialectHandleLoadDialect-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDialectHandleLoadDialect-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectHandleLoadDialect")],-1)),t[2202]||(t[2202]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2204]||(t[2204]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectHandleLoadDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg1, arg2)</span></span></code></pre></div><p>Loads the dialect associated with the provided dialect handle.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2203]||(t[2203]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L578-L582",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kp,[e("summary",null,[t[2205]||(t[2205]=e("a",{id:"Reactant.MLIR.API.mlirDialectHandleRegisterDialect-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDialectHandleRegisterDialect-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectHandleRegisterDialect")],-1)),t[2206]||(t[2206]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2208]||(t[2208]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectHandleRegisterDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg1, arg2)</span></span></code></pre></div><p>Registers the dialect associated with the provided dialect handle.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2207]||(t[2207]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L567-L571",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fp,[e("summary",null,[t[2209]||(t[2209]=e("a",{id:"Reactant.MLIR.API.mlirDialectIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDialectIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectIsNull")],-1)),t[2210]||(t[2210]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2212]||(t[2212]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dialect)</span></span></code></pre></div><p>Checks if the dialect is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2211]||(t[2211]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L520-L524",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rp,[e("summary",null,[t[2213]||(t[2213]=e("a",{id:"Reactant.MLIR.API.mlirDialectRegistryCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirDialectRegistryCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectRegistryCreate")],-1)),t[2214]||(t[2214]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2216]||(t[2216]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectRegistryCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a dialect registry and transfers its ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2215]||(t[2215]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L589-L593",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ip,[e("summary",null,[t[2217]||(t[2217]=e("a",{id:"Reactant.MLIR.API.mlirDialectRegistryDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDialectRegistryDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectRegistryDestroy")],-1)),t[2218]||(t[2218]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2220]||(t[2220]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectRegistryDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry)</span></span></code></pre></div><p>Takes a dialect registry owned by the caller and destroys it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2219]||(t[2219]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L607-L611",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tp,[e("summary",null,[t[2221]||(t[2221]=e("a",{id:"Reactant.MLIR.API.mlirDialectRegistryIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDialectRegistryIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDialectRegistryIsNull")],-1)),t[2222]||(t[2222]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2224]||(t[2224]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDialectRegistryIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry)</span></span></code></pre></div><p>Checks if the dialect registry is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2223]||(t[2223]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L598-L602",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ap,[e("summary",null,[t[2225]||(t[2225]=e("a",{id:"Reactant.MLIR.API.mlirDictionaryAttrGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirDictionaryAttrGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDictionaryAttrGet")],-1)),t[2226]||(t[2226]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2228]||(t[2228]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDictionaryAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, numElements, elements)</span></span></code></pre></div><p>Creates a dictionary attribute containing the given list of elements in the provided context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2227]||(t[2227]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3560-L3564",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jp,[e("summary",null,[t[2229]||(t[2229]=e("a",{id:"Reactant.MLIR.API.mlirDictionaryAttrGetElement-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDictionaryAttrGetElement-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDictionaryAttrGetElement")],-1)),t[2230]||(t[2230]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2232]||(t[2232]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDictionaryAttrGetElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, pos)</span></span></code></pre></div><p>Returns pos-th element of the given dictionary attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2231]||(t[2231]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3580-L3584",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_p,[e("summary",null,[t[2233]||(t[2233]=e("a",{id:"Reactant.MLIR.API.mlirDictionaryAttrGetElementByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirDictionaryAttrGetElementByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDictionaryAttrGetElementByName")],-1)),t[2234]||(t[2234]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2236]||(t[2236]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDictionaryAttrGetElementByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, name)</span></span></code></pre></div><p>Returns the dictionary attribute element with the given name or NULL if the given name does not exist in the dictionary.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2235]||(t[2235]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3591-L3595",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mp,[e("summary",null,[t[2237]||(t[2237]=e("a",{id:"Reactant.MLIR.API.mlirDictionaryAttrGetNumElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDictionaryAttrGetNumElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDictionaryAttrGetNumElements")],-1)),t[2238]||(t[2238]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2240]||(t[2240]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDictionaryAttrGetNumElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the number of attributes contained in a dictionary attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2239]||(t[2239]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3571-L3575",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lp,[e("summary",null,[t[2241]||(t[2241]=e("a",{id:"Reactant.MLIR.API.mlirDictionaryAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirDictionaryAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDictionaryAttrGetTypeID")],-1)),t[2242]||(t[2242]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2244]||(t[2244]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDictionaryAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a Dictionary attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2243]||(t[2243]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3602-L3606",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ep,[e("summary",null,[t[2245]||(t[2245]=e("a",{id:"Reactant.MLIR.API.mlirDisctinctAttrCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirDisctinctAttrCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirDisctinctAttrCreate")],-1)),t[2246]||(t[2246]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2248]||(t[2248]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirDisctinctAttrCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(referencedAttr)</span></span></code></pre></div><p>Creates a DisctinctAttr with the referenced attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2247]||(t[2247]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3943-L3947",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cp,[e("summary",null,[t[2249]||(t[2249]=e("a",{id:"Reactant.MLIR.API.mlirElementsAttrGetNumElements-Tuple{Any}",href:"#Reactant.MLIR.API.mlirElementsAttrGetNumElements-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirElementsAttrGetNumElements")],-1)),t[2250]||(t[2250]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2252]||(t[2252]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirElementsAttrGetNumElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Gets the total number of elements in the given elements attribute. In order to iterate over the attribute, obtain its type, which must be a statically shaped type and use its sizes to build a multi-dimensional index.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2251]||(t[2251]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4075-L4079",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vp,[e("summary",null,[t[2253]||(t[2253]=e("a",{id:"Reactant.MLIR.API.mlirElementsAttrGetValue-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirElementsAttrGetValue-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirElementsAttrGetValue")],-1)),t[2254]||(t[2254]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2256]||(t[2256]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirElementsAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, rank, idxs)</span></span></code></pre></div><p>Returns the element at the given rank-dimensional index.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2255]||(t[2255]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4053-L4057",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pp,[e("summary",null,[t[2257]||(t[2257]=e("a",{id:"Reactant.MLIR.API.mlirElementsAttrIsValidIndex-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirElementsAttrIsValidIndex-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirElementsAttrIsValidIndex")],-1)),t[2258]||(t[2258]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2260]||(t[2260]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirElementsAttrIsValidIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, rank, idxs)</span></span></code></pre></div><p>Checks whether the given rank-dimensional index is valid in the given elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2259]||(t[2259]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4064-L4068",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xp,[e("summary",null,[t[2261]||(t[2261]=e("a",{id:"Reactant.MLIR.API.mlirEmitError-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirEmitError-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirEmitError")],-1)),t[2262]||(t[2262]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2264]||(t[2264]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirEmitError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, message)</span></span></code></pre></div><p>Emits an error at the given location through the diagnostics engine. Used for testing purposes.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2263]||(t[2263]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6260-L6264",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sp,[e("summary",null,[t[2265]||(t[2265]=e("a",{id:"Reactant.MLIR.API.mlirEnableGlobalDebug-Tuple{Any}",href:"#Reactant.MLIR.API.mlirEnableGlobalDebug-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirEnableGlobalDebug")],-1)),t[2266]||(t[2266]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2268]||(t[2268]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirEnableGlobalDebug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(enable)</span></span></code></pre></div><p>Sets the global debugging flag.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2267]||(t[2267]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6107-L6111",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dp,[e("summary",null,[t[2269]||(t[2269]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineCreate-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineCreate-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineCreate")],-1)),t[2270]||(t[2270]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2272]||(t[2272]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, optLevel, numPaths, sharedLibPaths, enableObjectDump)</span></span></code></pre></div><p>Creates an ExecutionEngine for the provided ModuleOp. The ModuleOp is expected to be &quot;translatable&quot; to LLVM IR (only contains operations in dialects that implement the <code>LLVMTranslationDialectInterface</code>). The module ownership stays with the client and can be destroyed as soon as the call returns. <code>optLevel</code> is the optimization level to be used for transformation and code generation. LLVM passes at <code>optLevel</code> are run before code generation. The number and array of paths corresponding to shared libraries that will be loaded are specified via <code>numPaths</code> and <code>sharedLibPaths</code> respectively. TODO: figure out other options.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2271]||(t[2271]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8304-L8308",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fp,[e("summary",null,[t[2273]||(t[2273]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineDestroy")],-1)),t[2274]||(t[2274]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2276]||(t[2276]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit)</span></span></code></pre></div><p>Destroy an ExecutionEngine instance.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2275]||(t[2275]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8319-L8323",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vp,[e("summary",null,[t[2277]||(t[2277]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineDumpToObjectFile-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineDumpToObjectFile-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineDumpToObjectFile")],-1)),t[2278]||(t[2278]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2280]||(t[2280]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineDumpToObjectFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit, fileName)</span></span></code></pre></div><p>Dump as an object in <code>fileName</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2279]||(t[2279]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8381-L8385",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Op,[e("summary",null,[t[2281]||(t[2281]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineInvokePacked-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineInvokePacked-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineInvokePacked")],-1)),t[2282]||(t[2282]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2284]||(t[2284]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineInvokePacked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit, name, arguments)</span></span></code></pre></div><p>Invoke a native function in the execution engine by name with the arguments and result of the invoked function passed as an array of pointers. The function must have been tagged with the <code>llvm.emit\\_c\\_interface</code> attribute. Returns a failure if the execution fails for any reason (the function name can&#39;t be resolved for instance).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2283]||(t[2283]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8337-L8341",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bp,[e("summary",null,[t[2285]||(t[2285]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineIsNull")],-1)),t[2286]||(t[2286]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2288]||(t[2288]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit)</span></span></code></pre></div><p>Checks whether an execution engine is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2287]||(t[2287]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8328-L8332",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Np,[e("summary",null,[t[2289]||(t[2289]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineLookup-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineLookup-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineLookup")],-1)),t[2290]||(t[2290]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2292]||(t[2292]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineLookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit, name)</span></span></code></pre></div><p>Lookup a native function in the execution engine by name, returns nullptr if the name can&#39;t be looked-up.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2291]||(t[2291]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8359-L8363",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gp,[e("summary",null,[t[2293]||(t[2293]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineLookupPacked-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineLookupPacked-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineLookupPacked")],-1)),t[2294]||(t[2294]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2296]||(t[2296]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineLookupPacked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit, name)</span></span></code></pre></div><p>Lookup the wrapper of the native function in the execution engine with the given name, returns nullptr if the function can&#39;t be looked-up.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2295]||(t[2295]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8348-L8352",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zp,[e("summary",null,[t[2297]||(t[2297]=e("a",{id:"Reactant.MLIR.API.mlirExecutionEngineRegisterSymbol-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirExecutionEngineRegisterSymbol-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExecutionEngineRegisterSymbol")],-1)),t[2298]||(t[2298]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2300]||(t[2300]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExecutionEngineRegisterSymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jit, name, sym)</span></span></code></pre></div><p>Register a symbol with the jit: this symbol will be accessible to the jitted code.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2299]||(t[2299]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8370-L8374",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wp,[e("summary",null,[t[2301]||(t[2301]=e("a",{id:"Reactant.MLIR.API.mlirExternalPassSignalFailure-Tuple{Any}",href:"#Reactant.MLIR.API.mlirExternalPassSignalFailure-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirExternalPassSignalFailure")],-1)),t[2302]||(t[2302]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2304]||(t[2304]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirExternalPassSignalFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pass)</span></span></code></pre></div><p>This signals that the pass has failed. This is only valid to call during the <code>run</code> callback of <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirExternalPassCallbacks"><code>MlirExternalPassCallbacks</code></a>. See Pass::signalPassFailure().</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2303]||(t[2303]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8760-L8764",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Up,[e("summary",null,[t[2305]||(t[2305]=e("a",{id:"Reactant.MLIR.API.mlirF16TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirF16TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirF16TypeGet")],-1)),t[2306]||(t[2306]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2308]||(t[2308]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirF16TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f16 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2307]||(t[2307]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5346-L5350",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qp,[e("summary",null,[t[2309]||(t[2309]=e("a",{id:"Reactant.MLIR.API.mlirF32TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirF32TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirF32TypeGet")],-1)),t[2310]||(t[2310]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2312]||(t[2312]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirF32TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f32 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2311]||(t[2311]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5373-L5377",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qp,[e("summary",null,[t[2313]||(t[2313]=e("a",{id:"Reactant.MLIR.API.mlirF64TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirF64TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirF64TypeGet")],-1)),t[2314]||(t[2314]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2316]||(t[2316]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirF64TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a f64 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2315]||(t[2315]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5400-L5404",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wp,[e("summary",null,[t[2317]||(t[2317]=e("a",{id:"Reactant.MLIR.API.mlirFlatSymbolRefAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirFlatSymbolRefAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFlatSymbolRefAttrGet")],-1)),t[2318]||(t[2318]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2320]||(t[2320]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFlatSymbolRefAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, symbol)</span></span></code></pre></div><p>Creates a flat symbol reference attribute in the given context referencing a symbol identified by the given string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2319]||(t[2319]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3961-L3965",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zp,[e("summary",null,[t[2321]||(t[2321]=e("a",{id:"Reactant.MLIR.API.mlirFlatSymbolRefAttrGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFlatSymbolRefAttrGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFlatSymbolRefAttrGetValue")],-1)),t[2322]||(t[2322]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2324]||(t[2324]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFlatSymbolRefAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the referenced symbol as a string reference. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2323]||(t[2323]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3972-L3976",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hp,[e("summary",null,[t[2325]||(t[2325]=e("a",{id:"Reactant.MLIR.API.mlirFloat16TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat16TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat16TypeGetTypeID")],-1)),t[2326]||(t[2326]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2328]||(t[2328]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat16TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float16 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2327]||(t[2327]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5328-L5332",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jp,[e("summary",null,[t[2329]||(t[2329]=e("a",{id:"Reactant.MLIR.API.mlirFloat32TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat32TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat32TypeGetTypeID")],-1)),t[2330]||(t[2330]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2332]||(t[2332]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat32TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float32 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2331]||(t[2331]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5355-L5359",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kp,[e("summary",null,[t[2333]||(t[2333]=e("a",{id:"Reactant.MLIR.API.mlirFloat4E2M1FNTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat4E2M1FNTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat4E2M1FNTypeGet")],-1)),t[2334]||(t[2334]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2336]||(t[2336]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat4E2M1FNTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f4E2M1FN type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2335]||(t[2335]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5022-L5026",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$p,[e("summary",null,[t[2337]||(t[2337]=e("a",{id:"Reactant.MLIR.API.mlirFloat4E2M1FNTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat4E2M1FNTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat4E2M1FNTypeGetTypeID")],-1)),t[2338]||(t[2338]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2340]||(t[2340]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat4E2M1FNTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float4E2M1FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2339]||(t[2339]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5004-L5008",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xp,[e("summary",null,[t[2341]||(t[2341]=e("a",{id:"Reactant.MLIR.API.mlirFloat64TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat64TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat64TypeGetTypeID")],-1)),t[2342]||(t[2342]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2344]||(t[2344]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat64TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float64 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2343]||(t[2343]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5382-L5386",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yp,[e("summary",null,[t[2345]||(t[2345]=e("a",{id:"Reactant.MLIR.API.mlirFloat6E2M3FNTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat6E2M3FNTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat6E2M3FNTypeGet")],-1)),t[2346]||(t[2346]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2348]||(t[2348]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat6E2M3FNTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f6E2M3FN type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2347]||(t[2347]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5049-L5053",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",td,[e("summary",null,[t[2349]||(t[2349]=e("a",{id:"Reactant.MLIR.API.mlirFloat6E2M3FNTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat6E2M3FNTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat6E2M3FNTypeGetTypeID")],-1)),t[2350]||(t[2350]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2352]||(t[2352]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat6E2M3FNTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float6E2M3FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2351]||(t[2351]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5031-L5035",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ed,[e("summary",null,[t[2353]||(t[2353]=e("a",{id:"Reactant.MLIR.API.mlirFloat6E3M2FNTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat6E3M2FNTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat6E3M2FNTypeGet")],-1)),t[2354]||(t[2354]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2356]||(t[2356]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat6E3M2FNTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f6E3M2FN type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2355]||(t[2355]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5076-L5080",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sd,[e("summary",null,[t[2357]||(t[2357]=e("a",{id:"Reactant.MLIR.API.mlirFloat6E3M2FNTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat6E3M2FNTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat6E3M2FNTypeGetTypeID")],-1)),t[2358]||(t[2358]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2360]||(t[2360]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat6E3M2FNTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float6E3M2FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2359]||(t[2359]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5058-L5062",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ad,[e("summary",null,[t[2361]||(t[2361]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E3M4TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E3M4TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E3M4TypeGet")],-1)),t[2362]||(t[2362]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2364]||(t[2364]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E3M4TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E3M4 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2363]||(t[2363]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5265-L5269",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",id,[e("summary",null,[t[2365]||(t[2365]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E3M4TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E3M4TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E3M4TypeGetTypeID")],-1)),t[2366]||(t[2366]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2368]||(t[2368]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E3M4TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E3M4 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2367]||(t[2367]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5247-L5251",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ld,[e("summary",null,[t[2369]||(t[2369]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3B11FNUZTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E4M3B11FNUZTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3B11FNUZTypeGet")],-1)),t[2370]||(t[2370]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2372]||(t[2372]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3B11FNUZTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E4M3B11FNUZ type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2371]||(t[2371]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5238-L5242",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nd,[e("summary",null,[t[2373]||(t[2373]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3B11FNUZTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E4M3B11FNUZTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3B11FNUZTypeGetTypeID")],-1)),t[2374]||(t[2374]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2376]||(t[2376]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3B11FNUZTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E4M3B11FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2375]||(t[2375]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5220-L5224",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rd,[e("summary",null,[t[2377]||(t[2377]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3FNTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E4M3FNTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3FNTypeGet")],-1)),t[2378]||(t[2378]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2380]||(t[2380]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3FNTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E4M3FN type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2379]||(t[2379]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5157-L5161",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",od,[e("summary",null,[t[2381]||(t[2381]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3FNTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E4M3FNTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3FNTypeGetTypeID")],-1)),t[2382]||(t[2382]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2384]||(t[2384]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3FNTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E4M3FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2383]||(t[2383]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5139-L5143",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pd,[e("summary",null,[t[2385]||(t[2385]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3FNUZTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E4M3FNUZTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3FNUZTypeGet")],-1)),t[2386]||(t[2386]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2388]||(t[2388]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3FNUZTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E4M3FNUZ type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2387]||(t[2387]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5211-L5215",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dd,[e("summary",null,[t[2389]||(t[2389]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3FNUZTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E4M3FNUZTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3FNUZTypeGetTypeID")],-1)),t[2390]||(t[2390]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2392]||(t[2392]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3FNUZTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E4M3FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2391]||(t[2391]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5193-L5197",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ud,[e("summary",null,[t[2393]||(t[2393]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E4M3TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3TypeGet")],-1)),t[2394]||(t[2394]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2396]||(t[2396]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E4M3 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2395]||(t[2395]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5130-L5134",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cd,[e("summary",null,[t[2397]||(t[2397]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E4M3TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E4M3TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E4M3TypeGetTypeID")],-1)),t[2398]||(t[2398]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2400]||(t[2400]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E4M3TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E4M3 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2399]||(t[2399]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5112-L5116",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hd,[e("summary",null,[t[2401]||(t[2401]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E5M2FNUZTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E5M2FNUZTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E5M2FNUZTypeGet")],-1)),t[2402]||(t[2402]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2404]||(t[2404]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E5M2FNUZTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E5M2FNUZ type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2403]||(t[2403]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5184-L5188",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bd,[e("summary",null,[t[2405]||(t[2405]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E5M2FNUZTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E5M2FNUZTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E5M2FNUZTypeGetTypeID")],-1)),t[2406]||(t[2406]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2408]||(t[2408]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E5M2FNUZTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E5M2FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2407]||(t[2407]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5166-L5170",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yd,[e("summary",null,[t[2409]||(t[2409]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E5M2TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E5M2TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E5M2TypeGet")],-1)),t[2410]||(t[2410]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2412]||(t[2412]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E5M2TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E5M2 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2411]||(t[2411]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5103-L5107",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gd,[e("summary",null,[t[2413]||(t[2413]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E5M2TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E5M2TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E5M2TypeGetTypeID")],-1)),t[2414]||(t[2414]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2416]||(t[2416]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E5M2TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E5M2 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2415]||(t[2415]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5085-L5089",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",md,[e("summary",null,[t[2417]||(t[2417]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E8M0FNUTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloat8E8M0FNUTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E8M0FNUTypeGet")],-1)),t[2418]||(t[2418]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2420]||(t[2420]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E8M0FNUTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an f8E8M0FNU type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2419]||(t[2419]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5292-L5296",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kd,[e("summary",null,[t[2421]||(t[2421]=e("a",{id:"Reactant.MLIR.API.mlirFloat8E8M0FNUTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloat8E8M0FNUTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloat8E8M0FNUTypeGetTypeID")],-1)),t[2422]||(t[2422]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2424]||(t[2424]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloat8E8M0FNUTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Float8E8M0FNU type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2423]||(t[2423]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5274-L5278",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fd,[e("summary",null,[t[2425]||(t[2425]=e("a",{id:"Reactant.MLIR.API.mlirFloatAttrDoubleGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirFloatAttrDoubleGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloatAttrDoubleGet")],-1)),t[2426]||(t[2426]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2428]||(t[2428]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloatAttrDoubleGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, type, value)</span></span></code></pre></div><p>Creates a floating point attribute in the given context with the given double value and double-precision FP semantics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2427]||(t[2427]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3620-L3624",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rd,[e("summary",null,[t[2429]||(t[2429]=e("a",{id:"Reactant.MLIR.API.mlirFloatAttrDoubleGetChecked-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirFloatAttrDoubleGetChecked-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloatAttrDoubleGetChecked")],-1)),t[2430]||(t[2430]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2432]||(t[2432]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloatAttrDoubleGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, type, value)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirFloatAttrDoubleGet-Tuple{Any, Any, Any}"><code>mlirFloatAttrDoubleGet</code></a>&quot;, but if the type is not valid for a construction of a FloatAttr, returns a null <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirAttribute"><code>MlirAttribute</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2431]||(t[2431]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3631-L3635",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Id,[e("summary",null,[t[2433]||(t[2433]=e("a",{id:"Reactant.MLIR.API.mlirFloatAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloatAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloatAttrGetTypeID")],-1)),t[2434]||(t[2434]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2436]||(t[2436]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloatAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a Float attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2435]||(t[2435]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3651-L3655",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Td,[e("summary",null,[t[2437]||(t[2437]=e("a",{id:"Reactant.MLIR.API.mlirFloatAttrGetValueDouble-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloatAttrGetValueDouble-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloatAttrGetValueDouble")],-1)),t[2438]||(t[2438]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2440]||(t[2440]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloatAttrGetValueDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given floating point attribute, interpreting the value as double.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2439]||(t[2439]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3642-L3646",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ad,[e("summary",null,[t[2441]||(t[2441]=e("a",{id:"Reactant.MLIR.API.mlirFloatTF32TypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFloatTF32TypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloatTF32TypeGetTypeID")],-1)),t[2442]||(t[2442]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2444]||(t[2444]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloatTF32TypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a TF32 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2443]||(t[2443]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5409-L5413",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jd,[e("summary",null,[t[2445]||(t[2445]=e("a",{id:"Reactant.MLIR.API.mlirFloatTypeGetWidth-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFloatTypeGetWidth-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFloatTypeGetWidth")],-1)),t[2446]||(t[2446]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2448]||(t[2448]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFloatTypeGetWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the bitwidth of a floating-point type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2447]||(t[2447]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4995-L4999",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_d,[e("summary",null,[t[2449]||(t[2449]=e("a",{id:"Reactant.MLIR.API.mlirFreezeRewritePattern-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFreezeRewritePattern-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFreezeRewritePattern")],-1)),t[2450]||(t[2450]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2452]||(t[2452]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFreezeRewritePattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>FrozenRewritePatternSet API</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2451]||(t[2451]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9227-L9231",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Md,[e("summary",null,[t[2453]||(t[2453]=e("a",{id:"Reactant.MLIR.API.mlirFuncSetArgAttr-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirFuncSetArgAttr-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFuncSetArgAttr")],-1)),t[2454]||(t[2454]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2456]||(t[2456]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFuncSetArgAttr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos, name, attr)</span></span></code></pre></div><p>Sets the argument attribute &#39;name&#39; of an argument at index &#39;pos&#39;. Asserts that the operation is a FuncOp.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2455]||(t[2455]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6427-L6431",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ld,[e("summary",null,[t[2457]||(t[2457]=e("a",{id:"Reactant.MLIR.API.mlirFunctionTypeGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirFunctionTypeGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFunctionTypeGet")],-1)),t[2458]||(t[2458]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2460]||(t[2460]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFunctionTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, numInputs, inputs, numResults, results)</span></span></code></pre></div><p>Creates a function type, mapping a list of input types to result types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2459]||(t[2459]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6009-L6013",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ed,[e("summary",null,[t[2461]||(t[2461]=e("a",{id:"Reactant.MLIR.API.mlirFunctionTypeGetInput-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirFunctionTypeGetInput-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFunctionTypeGetInput")],-1)),t[2462]||(t[2462]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2464]||(t[2464]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFunctionTypeGetInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns the pos-th input type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2463]||(t[2463]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6042-L6046",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cd,[e("summary",null,[t[2465]||(t[2465]=e("a",{id:"Reactant.MLIR.API.mlirFunctionTypeGetNumInputs-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFunctionTypeGetNumInputs-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFunctionTypeGetNumInputs")],-1)),t[2466]||(t[2466]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2468]||(t[2468]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFunctionTypeGetNumInputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of input types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2467]||(t[2467]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6024-L6028",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vd,[e("summary",null,[t[2469]||(t[2469]=e("a",{id:"Reactant.MLIR.API.mlirFunctionTypeGetNumResults-Tuple{Any}",href:"#Reactant.MLIR.API.mlirFunctionTypeGetNumResults-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFunctionTypeGetNumResults")],-1)),t[2470]||(t[2470]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2472]||(t[2472]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFunctionTypeGetNumResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of result types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2471]||(t[2471]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6033-L6037",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pd,[e("summary",null,[t[2473]||(t[2473]=e("a",{id:"Reactant.MLIR.API.mlirFunctionTypeGetResult-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirFunctionTypeGetResult-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFunctionTypeGetResult")],-1)),t[2474]||(t[2474]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2476]||(t[2476]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFunctionTypeGetResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns the pos-th result type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2475]||(t[2475]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6051-L6055",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xd,[e("summary",null,[t[2477]||(t[2477]=e("a",{id:"Reactant.MLIR.API.mlirFunctionTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirFunctionTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirFunctionTypeGetTypeID")],-1)),t[2478]||(t[2478]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2480]||(t[2480]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirFunctionTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Function type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2479]||(t[2479]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5991-L5995",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sd,[e("summary",null,[t[2481]||(t[2481]=e("a",{id:"Reactant.MLIR.API.mlirIRRewriterCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIRRewriterCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIRRewriterCreate")],-1)),t[2482]||(t[2482]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2484]||(t[2484]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIRRewriterCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Create an IRRewriter and transfer ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2483]||(t[2483]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9200-L9204",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dd,[e("summary",null,[t[2485]||(t[2485]=e("a",{id:"Reactant.MLIR.API.mlirIRRewriterCreateFromOp-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIRRewriterCreateFromOp-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIRRewriterCreateFromOp")],-1)),t[2486]||(t[2486]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2488]||(t[2488]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIRRewriterCreateFromOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Create an IRRewriter and transfer ownership to the caller. Additionally set the insertion point before the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2487]||(t[2487]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9209-L9213",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fd,[e("summary",null,[t[2489]||(t[2489]=e("a",{id:"Reactant.MLIR.API.mlirIRRewriterDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIRRewriterDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIRRewriterDestroy")],-1)),t[2490]||(t[2490]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2492]||(t[2492]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIRRewriterDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter)</span></span></code></pre></div><p>Takes an IRRewriter owned by the caller and destroys it. It is the responsibility of the user to only pass an IRRewriter class.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2491]||(t[2491]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9218-L9222",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vd,[e("summary",null,[t[2493]||(t[2493]=e("a",{id:"Reactant.MLIR.API.mlirIdentifierEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIdentifierEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIdentifierEqual")],-1)),t[2494]||(t[2494]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2496]||(t[2496]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIdentifierEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ident, other)</span></span></code></pre></div><p>Checks whether two identifiers are the same.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2495]||(t[2495]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2496-L2500",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Od,[e("summary",null,[t[2497]||(t[2497]=e("a",{id:"Reactant.MLIR.API.mlirIdentifierGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIdentifierGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIdentifierGet")],-1)),t[2498]||(t[2498]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2500]||(t[2500]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIdentifierGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, str)</span></span></code></pre></div><p>Gets an identifier with the given string value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2499]||(t[2499]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2476-L2480",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bd,[e("summary",null,[t[2501]||(t[2501]=e("a",{id:"Reactant.MLIR.API.mlirIdentifierGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIdentifierGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIdentifierGetContext")],-1)),t[2502]||(t[2502]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2504]||(t[2504]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIdentifierGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg1)</span></span></code></pre></div><p>Returns the context associated with this identifier</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2503]||(t[2503]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2487-L2491",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nd,[e("summary",null,[t[2505]||(t[2505]=e("a",{id:"Reactant.MLIR.API.mlirIdentifierStr-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIdentifierStr-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIdentifierStr")],-1)),t[2506]||(t[2506]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2508]||(t[2508]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIdentifierStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ident)</span></span></code></pre></div><p>Gets the string value of the identifier.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2507]||(t[2507]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2505-L2509",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gd,[e("summary",null,[t[2509]||(t[2509]=e("a",{id:"Reactant.MLIR.API.mlirIndexTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIndexTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIndexTypeGet")],-1)),t[2510]||(t[2510]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2512]||(t[2512]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIndexTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an index type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2511]||(t[2511]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4977-L4981",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zd,[e("summary",null,[t[2513]||(t[2513]=e("a",{id:"Reactant.MLIR.API.mlirIndexTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirIndexTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIndexTypeGetTypeID")],-1)),t[2514]||(t[2514]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2516]||(t[2516]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIndexTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Index type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2515]||(t[2515]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4959-L4963",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wd,[e("summary",null,[t[2517]||(t[2517]=e("a",{id:"Reactant.MLIR.API.mlirInferShapedTypeOpInterfaceInferReturnTypes-NTuple{11, Any}",href:"#Reactant.MLIR.API.mlirInferShapedTypeOpInterfaceInferReturnTypes-NTuple{11, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirInferShapedTypeOpInterfaceInferReturnTypes")],-1)),t[2518]||(t[2518]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2520]||(t[2520]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirInferShapedTypeOpInterfaceInferReturnTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opName, context, location, nOperands, operands, attributes, properties, nRegions, regions, callback, userData)</span></span></code></pre></div><p>Infers the return shaped type components of the operation. Calls <code>callback</code> with the types of inferred arguments on success. Returns failure otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2519]||(t[2519]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8477-L8481",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ud,[e("summary",null,[t[2521]||(t[2521]=e("a",{id:"Reactant.MLIR.API.mlirInferShapedTypeOpInterfaceTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirInferShapedTypeOpInterfaceTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirInferShapedTypeOpInterfaceTypeID")],-1)),t[2522]||(t[2522]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2524]||(t[2524]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirInferShapedTypeOpInterfaceTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the interface TypeID of the InferShapedTypeOpInterface.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2523]||(t[2523]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8462-L8466",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qd,[e("summary",null,[t[2525]||(t[2525]=e("a",{id:"Reactant.MLIR.API.mlirInferTypeOpInterfaceInferReturnTypes-NTuple{11, Any}",href:"#Reactant.MLIR.API.mlirInferTypeOpInterfaceInferReturnTypes-NTuple{11, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirInferTypeOpInterfaceInferReturnTypes")],-1)),t[2526]||(t[2526]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2528]||(t[2528]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirInferTypeOpInterfaceInferReturnTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opName, context, location, nOperands, operands, attributes, properties, nRegions, regions, callback, userData)</span></span></code></pre></div><p>Infers the return types of the operation identified by its canonical given the arguments that will be supplied to its generic builder. Calls <code>callback</code> with the types of inferred arguments, potentially several times, on success. Returns failure otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2527]||(t[2527]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8429-L8433",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qd,[e("summary",null,[t[2529]||(t[2529]=e("a",{id:"Reactant.MLIR.API.mlirInferTypeOpInterfaceTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirInferTypeOpInterfaceTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirInferTypeOpInterfaceTypeID")],-1)),t[2530]||(t[2530]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2532]||(t[2532]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirInferTypeOpInterfaceTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the interface TypeID of the InferTypeOpInterface.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2531]||(t[2531]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8414-L8418",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wd,[e("summary",null,[t[2533]||(t[2533]=e("a",{id:"Reactant.MLIR.API.mlirIntegerAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerAttrGet")],-1)),t[2534]||(t[2534]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2536]||(t[2536]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, value)</span></span></code></pre></div><p>Creates an integer attribute of the given type with the given integer value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2535]||(t[2535]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3669-L3673",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zd,[e("summary",null,[t[2537]||(t[2537]=e("a",{id:"Reactant.MLIR.API.mlirIntegerAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirIntegerAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerAttrGetTypeID")],-1)),t[2538]||(t[2538]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2540]||(t[2540]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Integer attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2539]||(t[2539]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3705-L3709",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hd,[e("summary",null,[t[2541]||(t[2541]=e("a",{id:"Reactant.MLIR.API.mlirIntegerAttrGetValueInt-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerAttrGetValueInt-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerAttrGetValueInt")],-1)),t[2542]||(t[2542]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2544]||(t[2544]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerAttrGetValueInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given integer attribute, assuming the value is of signless type and fits into a signed 64-bit integer.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2543]||(t[2543]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3678-L3682",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jd,[e("summary",null,[t[2545]||(t[2545]=e("a",{id:"Reactant.MLIR.API.mlirIntegerAttrGetValueSInt-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerAttrGetValueSInt-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerAttrGetValueSInt")],-1)),t[2546]||(t[2546]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2548]||(t[2548]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerAttrGetValueSInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given integer attribute, assuming the value is of signed type and fits into a signed 64-bit integer.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2547]||(t[2547]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3687-L3691",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kd,[e("summary",null,[t[2549]||(t[2549]=e("a",{id:"Reactant.MLIR.API.mlirIntegerAttrGetValueUInt-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerAttrGetValueUInt-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerAttrGetValueUInt")],-1)),t[2550]||(t[2550]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2552]||(t[2552]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerAttrGetValueUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the value stored in the given integer attribute, assuming the value is of unsigned type and fits into an unsigned 64-bit integer.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2551]||(t[2551]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3696-L3700",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$d,[e("summary",null,[t[2553]||(t[2553]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetAttrGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetAttrGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetAttrGet")],-1)),t[2554]||(t[2554]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2556]||(t[2556]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Creates an integer set attribute wrapping the given set. The attribute belongs to the same context as the integer set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2555]||(t[2555]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3750-L3754",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xd,[e("summary",null,[t[2557]||(t[2557]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirIntegerSetAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetAttrGetTypeID")],-1)),t[2558]||(t[2558]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2560]||(t[2560]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an IntegerSet attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2559]||(t[2559]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3768-L3772",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yd,[e("summary",null,[t[2561]||(t[2561]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetAttrGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetAttrGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetAttrGetValue")],-1)),t[2562]||(t[2562]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2564]||(t[2564]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the integer set wrapped in the given integer set attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2563]||(t[2563]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3759-L3763",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tu,[e("summary",null,[t[2565]||(t[2565]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetDump")],-1)),t[2566]||(t[2566]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2568]||(t[2568]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Prints an integer set to the standard error stream.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2567]||(t[2567]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3317-L3321",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",eu,[e("summary",null,[t[2569]||(t[2569]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetEmptyGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetEmptyGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetEmptyGet")],-1)),t[2570]||(t[2570]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2572]||(t[2572]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetEmptyGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, numDims, numSymbols)</span></span></code></pre></div><p>Gets or creates a new canonically empty integer set with the give number of dimensions and symbols in the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2571]||(t[2571]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3326-L3330",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",su,[e("summary",null,[t[2573]||(t[2573]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetEqual")],-1)),t[2574]||(t[2574]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2576]||(t[2576]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1, s2)</span></span></code></pre></div><p>Checks if two integer set objects are equal. This is a &quot;shallow&quot; comparison of two objects. Only the sets with some small number of constraints are uniqued and compare equal here. Set objects that represent the same integer set with different constraints may be considered non-equal by this check. Set difference followed by an (expensive) emptiness check should be used to check equivalence of the underlying integer sets.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2575]||(t[2575]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3297-L3301",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",au,[e("summary",null,[t[2577]||(t[2577]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGet-NTuple{6, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGet-NTuple{6, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGet")],-1)),t[2578]||(t[2578]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2580]||(t[2580]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, numDims, numSymbols, numConstraints, constraints, eqFlags)</span></span></code></pre></div><p>Gets or creates a new integer set in the given context. The set is defined by a list of affine constraints, with the given number of input dimensions and symbols, which are treated as either equalities (eqFlags is 1) or inequalities (eqFlags is 0). Both <code>constraints</code> and <code>eqFlags</code> are expected to point to at least <code>numConstraint</code> consecutive values.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2579]||(t[2579]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3337-L3341",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",iu,[e("summary",null,[t[2581]||(t[2581]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetConstraint-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetConstraint-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetConstraint")],-1)),t[2582]||(t[2582]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2584]||(t[2584]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th constraint of the set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2583]||(t[2583]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3435-L3439",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lu,[e("summary",null,[t[2585]||(t[2585]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetContext")],-1)),t[2586]||(t[2586]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2588]||(t[2588]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Gets the context in which the given integer set lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2587]||(t[2587]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3279-L3283",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nu,[e("summary",null,[t[2589]||(t[2589]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetNumConstraints-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetNumConstraints-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetNumConstraints")],-1)),t[2590]||(t[2590]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2592]||(t[2592]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetNumConstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of constraints (equalities + inequalities) in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2591]||(t[2591]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3408-L3412",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ru,[e("summary",null,[t[2593]||(t[2593]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetNumDims-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetNumDims-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetNumDims")],-1)),t[2594]||(t[2594]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2596]||(t[2596]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetNumDims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of dimensions in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2595]||(t[2595]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3381-L3385",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ou,[e("summary",null,[t[2597]||(t[2597]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetNumEqualities-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetNumEqualities-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetNumEqualities")],-1)),t[2598]||(t[2598]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2600]||(t[2600]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetNumEqualities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of equalities in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2599]||(t[2599]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3417-L3421",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pu,[e("summary",null,[t[2601]||(t[2601]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetNumInequalities-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetNumInequalities-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetNumInequalities")],-1)),t[2602]||(t[2602]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2604]||(t[2604]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetNumInequalities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of inequalities in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2603]||(t[2603]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3426-L3430",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",du,[e("summary",null,[t[2605]||(t[2605]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetNumInputs-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetNumInputs-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetNumInputs")],-1)),t[2606]||(t[2606]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2608]||(t[2608]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetNumInputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of inputs (dimensions + symbols) in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2607]||(t[2607]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3399-L3403",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uu,[e("summary",null,[t[2609]||(t[2609]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetGetNumSymbols-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetGetNumSymbols-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetGetNumSymbols")],-1)),t[2610]||(t[2610]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2612]||(t[2612]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetGetNumSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Returns the number of symbols in the given set.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2611]||(t[2611]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3390-L3394",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cu,[e("summary",null,[t[2613]||(t[2613]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetIsCanonicalEmpty-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetIsCanonicalEmpty-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetIsCanonicalEmpty")],-1)),t[2614]||(t[2614]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2616]||(t[2616]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetIsCanonicalEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Checks whether the given set is a canonical empty set, e.g., the set returned by <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirIntegerSetEmptyGet-Tuple{Any, Any, Any}"><code>Reactant.MLIR.API.mlirIntegerSetEmptyGet</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2615]||(t[2615]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3372-L3376",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hu,[e("summary",null,[t[2617]||(t[2617]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetIsConstraintEq-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetIsConstraintEq-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetIsConstraintEq")],-1)),t[2618]||(t[2618]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2620]||(t[2620]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetIsConstraintEq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, pos)</span></span></code></pre></div><p>Returns <code>true</code> of the <code>pos</code>-th constraint of the set is an equality constraint, <code>false</code> otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2619]||(t[2619]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3446-L3450",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bu,[e("summary",null,[t[2621]||(t[2621]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerSetIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetIsNull")],-1)),t[2622]||(t[2622]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2624]||(t[2624]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p>Checks whether an integer set is a null object.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2623]||(t[2623]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3288-L3292",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yu,[e("summary",null,[t[2625]||(t[2625]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetPrint")],-1)),t[2626]||(t[2626]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2628]||(t[2628]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, callback, userData)</span></span></code></pre></div><p>Prints an integer set by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2627]||(t[2627]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3306-L3310",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gu,[e("summary",null,[t[2629]||(t[2629]=e("a",{id:"Reactant.MLIR.API.mlirIntegerSetReplaceGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirIntegerSetReplaceGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerSetReplaceGet")],-1)),t[2630]||(t[2630]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2632]||(t[2632]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerSetReplaceGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set, dimReplacements, symbolReplacements, numResultDims, numResultSymbols)</span></span></code></pre></div><p>Gets or creates a new integer set in which the values and dimensions of the given set are replaced with the given affine expressions. <code>dimReplacements</code> and <code>symbolReplacements</code> are expected to point to at least as many consecutive expressions as the given set has dimensions and symbols, respectively. The new set will have <code>numResultDims</code> and <code>numResultSymbols</code> dimensions and symbols, respectively.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2631]||(t[2631]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3355-L3359",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mu,[e("summary",null,[t[2633]||(t[2633]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeGet")],-1)),t[2634]||(t[2634]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2636]||(t[2636]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, bitwidth)</span></span></code></pre></div><p>Creates a signless integer type of the given bitwidth in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2635]||(t[2635]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4896-L4900",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ku,[e("summary",null,[t[2637]||(t[2637]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirIntegerTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeGetTypeID")],-1)),t[2638]||(t[2638]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2640]||(t[2640]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Integer type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2639]||(t[2639]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4878-L4882",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fu,[e("summary",null,[t[2641]||(t[2641]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeGetWidth-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeGetWidth-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeGetWidth")],-1)),t[2642]||(t[2642]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2644]||(t[2644]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeGetWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the bitwidth of an integer type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2643]||(t[2643]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4923-L4927",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ru,[e("summary",null,[t[2645]||(t[2645]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeIsSigned-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeIsSigned-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeIsSigned")],-1)),t[2646]||(t[2646]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2648]||(t[2648]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeIsSigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given integer type is signed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2647]||(t[2647]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4941-L4945",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Iu,[e("summary",null,[t[2649]||(t[2649]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeIsSignless-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeIsSignless-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeIsSignless")],-1)),t[2650]||(t[2650]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2652]||(t[2652]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeIsSignless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given integer type is signless.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2651]||(t[2651]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4932-L4936",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tu,[e("summary",null,[t[2653]||(t[2653]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeIsUnsigned-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeIsUnsigned-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeIsUnsigned")],-1)),t[2654]||(t[2654]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2656]||(t[2656]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeIsUnsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given integer type is unsigned.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2655]||(t[2655]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4950-L4954",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Au,[e("summary",null,[t[2657]||(t[2657]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeSignedGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeSignedGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeSignedGet")],-1)),t[2658]||(t[2658]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2660]||(t[2660]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeSignedGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, bitwidth)</span></span></code></pre></div><p>Creates a signed integer type of the given bitwidth in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2659]||(t[2659]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4905-L4909",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ju,[e("summary",null,[t[2661]||(t[2661]=e("a",{id:"Reactant.MLIR.API.mlirIntegerTypeUnsignedGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirIntegerTypeUnsignedGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIntegerTypeUnsignedGet")],-1)),t[2662]||(t[2662]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2664]||(t[2664]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIntegerTypeUnsignedGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, bitwidth)</span></span></code></pre></div><p>Creates an unsigned integer type of the given bitwidth in the context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2663]||(t[2663]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4914-L4918",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_u,[e("summary",null,[t[2665]||(t[2665]=e("a",{id:"Reactant.MLIR.API.mlirIsCurrentDebugType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirIsCurrentDebugType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIsCurrentDebugType")],-1)),t[2666]||(t[2666]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2668]||(t[2668]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIsCurrentDebugType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks if <code>type</code> is set as the current debug type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2667]||(t[2667]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6143-L6147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mu,[e("summary",null,[t[2669]||(t[2669]=e("a",{id:"Reactant.MLIR.API.mlirIsGlobalDebugEnabled-Tuple{}",href:"#Reactant.MLIR.API.mlirIsGlobalDebugEnabled-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirIsGlobalDebugEnabled")],-1)),t[2670]||(t[2670]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2672]||(t[2672]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirIsGlobalDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Retuns <code>true</code> if the global debugging flag is set, false otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2671]||(t[2671]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6116-L6120",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lu,[e("summary",null,[t[2673]||(t[2673]=e("a",{id:"Reactant.MLIR.API.mlirLLVMArrayTypeGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMArrayTypeGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMArrayTypeGet")],-1)),t[2674]||(t[2674]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2676]||(t[2676]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMArrayTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, numElements)</span></span></code></pre></div><p>Creates an llvm.array type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2675]||(t[2675]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6570-L6574",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Eu,[e("summary",null,[t[2677]||(t[2677]=e("a",{id:"Reactant.MLIR.API.mlirLLVMArrayTypeGetElementType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMArrayTypeGetElementType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMArrayTypeGetElementType")],-1)),t[2678]||(t[2678]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2680]||(t[2680]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMArrayTypeGetElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the element type of the llvm.array type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2679]||(t[2679]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6579-L6583",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cu,[e("summary",null,[t[2681]||(t[2681]=e("a",{id:"Reactant.MLIR.API.mlirLLVMCConvAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMCConvAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMCConvAttrGet")],-1)),t[2682]||(t[2682]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2684]||(t[2684]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMCConvAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, cconv)</span></span></code></pre></div><p>Creates a LLVM CConv attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2683]||(t[2683]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6812-L6816",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vu,[e("summary",null,[t[2685]||(t[2685]=e("a",{id:"Reactant.MLIR.API.mlirLLVMComdatAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMComdatAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMComdatAttrGet")],-1)),t[2686]||(t[2686]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2688]||(t[2688]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMComdatAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, comdat)</span></span></code></pre></div><p>Creates a LLVM Comdat attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2687]||(t[2687]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6831-L6835",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pu,[e("summary",null,[t[2689]||(t[2689]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIAnnotationAttrGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIAnnotationAttrGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIAnnotationAttrGet")],-1)),t[2690]||(t[2690]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2692]||(t[2692]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIAnnotationAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, name, value)</span></span></code></pre></div><p>Creates a LLVM DIAnnotation attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2691]||(t[2691]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7211-L7215",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xu,[e("summary",null,[t[2693]||(t[2693]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIBasicTypeAttrGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIBasicTypeAttrGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIBasicTypeAttrGet")],-1)),t[2694]||(t[2694]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2696]||(t[2696]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIBasicTypeAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, tag, name, sizeInBits, encoding)</span></span></code></pre></div><p>Creates a LLVM DIBasicType attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2695]||(t[2695]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6921-L6925",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Su,[e("summary",null,[t[2697]||(t[2697]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDICompileUnitAttrGet-NTuple{8, Any}",href:"#Reactant.MLIR.API.mlirLLVMDICompileUnitAttrGet-NTuple{8, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDICompileUnitAttrGet")],-1)),t[2698]||(t[2698]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2700]||(t[2700]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDICompileUnitAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, id, sourceLanguage, file, producer, isOptimized, emissionKind, nameTableKind)</span></span></code></pre></div><p>Creates a LLVM DICompileUnit attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2699]||(t[2699]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7081-L7085",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Du,[e("summary",null,[t[2701]||(t[2701]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDICompositeTypeAttrGet-NTuple{18, Any}",href:"#Reactant.MLIR.API.mlirLLVMDICompositeTypeAttrGet-NTuple{18, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDICompositeTypeAttrGet")],-1)),t[2702]||(t[2702]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2704]||(t[2704]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDICompositeTypeAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, recId, isRecSelf, tag, name, file, line, scope, baseType, flags, sizeInBits, alignInBits, nElements, elements, dataLocation, rank, allocated, associated)</span></span></code></pre></div><p>Creates a LLVM DICompositeType attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2703]||(t[2703]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6945-L6949",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fu,[e("summary",null,[t[2705]||(t[2705]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDICompositeTypeAttrGetRecSelf-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDICompositeTypeAttrGetRecSelf-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDICompositeTypeAttrGetRecSelf")],-1)),t[2706]||(t[2706]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2708]||(t[2708]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDICompositeTypeAttrGetRecSelf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recId)</span></span></code></pre></div><p>Creates a self-referencing LLVM DICompositeType attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2707]||(t[2707]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6936-L6940",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vu,[e("summary",null,[t[2709]||(t[2709]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIDerivedTypeAttrGet-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIDerivedTypeAttrGet-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIDerivedTypeAttrGet")],-1)),t[2710]||(t[2710]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2712]||(t[2712]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIDerivedTypeAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, tag, name, baseType, sizeInBits, alignInBits, offsetInBits, dwarfAddressSpace, extraData)</span></span></code></pre></div><p>Creates a LLVM DIDerivedType attribute. Note that <code>dwarfAddressSpace</code> is an optional field, where <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MLIR_CAPI_DWARF_ADDRESS_SPACE_NULL"><code>MLIR_CAPI_DWARF_ADDRESS_SPACE_NULL</code></a> indicates null and non-negative values indicate a value present.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2711]||(t[2711]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6992-L6996",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ou,[e("summary",null,[t[2713]||(t[2713]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIDerivedTypeAttrGetBaseType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDIDerivedTypeAttrGetBaseType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIDerivedTypeAttrGetBaseType")],-1)),t[2714]||(t[2714]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2716]||(t[2716]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIDerivedTypeAttrGetBaseType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diDerivedType)</span></span></code></pre></div><p>Gets the base type from a LLVM DIDerivedType attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2715]||(t[2715]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7045-L7049",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bu,[e("summary",null,[t[2717]||(t[2717]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIExpressionAttrGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIExpressionAttrGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIExpressionAttrGet")],-1)),t[2718]||(t[2718]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2720]||(t[2720]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIExpressionAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, nOperations, operations)</span></span></code></pre></div><p>Creates a LLVM DIExpression attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2719]||(t[2719]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6887-L6891",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nu,[e("summary",null,[t[2721]||(t[2721]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIExpressionElemAttrGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIExpressionElemAttrGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIExpressionElemAttrGet")],-1)),t[2722]||(t[2722]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2724]||(t[2724]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIExpressionElemAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, opcode, nArguments, arguments)</span></span></code></pre></div><p>Creates a LLVM DIExpressionElem attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2723]||(t[2723]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6876-L6880",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gu,[e("summary",null,[t[2725]||(t[2725]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIFileAttrGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIFileAttrGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIFileAttrGet")],-1)),t[2726]||(t[2726]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2728]||(t[2728]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIFileAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, name, directory)</span></span></code></pre></div><p>Creates a LLVM DIFileAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2727]||(t[2727]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7056-L7060",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zu,[e("summary",null,[t[2729]||(t[2729]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIFlagsAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIFlagsAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIFlagsAttrGet")],-1)),t[2730]||(t[2730]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2732]||(t[2732]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIFlagsAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, value)</span></span></code></pre></div><p>Creates a LLVM DIFlags attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2731]||(t[2731]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7101-L7105",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wu,[e("summary",null,[t[2733]||(t[2733]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIImportedEntityAttrGet-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIImportedEntityAttrGet-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIImportedEntityAttrGet")],-1)),t[2734]||(t[2734]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2736]||(t[2736]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIImportedEntityAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, tag, scope, entity, file, line, name, nElements, elements)</span></span></code></pre></div><p>Creates a LLVM DIImportedEntityAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2735]||(t[2735]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7319-L7323",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uu,[e("summary",null,[t[2737]||(t[2737]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDILexicalBlockAttrGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirLLVMDILexicalBlockAttrGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDILexicalBlockAttrGet")],-1)),t[2738]||(t[2738]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2740]||(t[2740]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDILexicalBlockAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, scope, file, line, column)</span></span></code></pre></div><p>Creates a LLVM DILexicalBlock attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2739]||(t[2739]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7110-L7114",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qu,[e("summary",null,[t[2741]||(t[2741]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDILexicalBlockFileAttrGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMDILexicalBlockFileAttrGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDILexicalBlockFileAttrGet")],-1)),t[2742]||(t[2742]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2744]||(t[2744]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDILexicalBlockFileAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, scope, file, discriminator)</span></span></code></pre></div><p>Creates a LLVM DILexicalBlockFile attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2743]||(t[2743]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7125-L7129",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qu,[e("summary",null,[t[2745]||(t[2745]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDILocalVariableAttrGet-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirLLVMDILocalVariableAttrGet-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDILocalVariableAttrGet")],-1)),t[2746]||(t[2746]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2748]||(t[2748]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDILocalVariableAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, scope, name, diFile, line, arg, alignInBits, diType, flags)</span></span></code></pre></div><p>Creates a LLVM DILocalVariableAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2747]||(t[2747]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7136-L7140",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wu,[e("summary",null,[t[2749]||(t[2749]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIModuleAttrGet-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirLLVMDIModuleAttrGet-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIModuleAttrGet")],-1)),t[2750]||(t[2750]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2752]||(t[2752]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIModuleAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, file, scope, name, configMacros, includePath, apinotes, line, isDecl)</span></span></code></pre></div><p>Creates a LLVM DIModuleAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2751]||(t[2751]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7298-L7302",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zu,[e("summary",null,[t[2753]||(t[2753]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDIModuleAttrGetScope-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDIModuleAttrGetScope-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDIModuleAttrGetScope")],-1)),t[2754]||(t[2754]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2756]||(t[2756]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDIModuleAttrGetScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diModule)</span></span></code></pre></div><p>Gets the scope of this DIModuleAttr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2755]||(t[2755]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7340-L7344",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hu,[e("summary",null,[t[2757]||(t[2757]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDINullTypeAttrGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDINullTypeAttrGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDINullTypeAttrGet")],-1)),t[2758]||(t[2758]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2760]||(t[2760]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDINullTypeAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a LLVM DINullType attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2759]||(t[2759]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6867-L6871",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ju,[e("summary",null,[t[2761]||(t[2761]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGet-NTuple{17, Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGet-NTuple{17, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGet")],-1)),t[2762]||(t[2762]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2764]||(t[2764]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, recId, isRecSelf, id, compileUnit, scope, name, linkageName, file, line, scopeLine, subprogramFlags, type, nRetainedNodes, retainedNodes, nAnnotations, annotations)</span></span></code></pre></div><p>Creates a LLVM DISubprogramAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2763]||(t[2763]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7166-L7170",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ku,[e("summary",null,[t[2765]||(t[2765]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetCompileUnit-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetCompileUnit-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetCompileUnit")],-1)),t[2766]||(t[2766]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2768]||(t[2768]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetCompileUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diSubprogram)</span></span></code></pre></div><p>Gets the compile unit from this DISubprogram.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2767]||(t[2767]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7251-L7255",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$u,[e("summary",null,[t[2769]||(t[2769]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetFile-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetFile-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetFile")],-1)),t[2770]||(t[2770]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2772]||(t[2772]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diSubprogram)</span></span></code></pre></div><p>Gets the file from this DISubprogramAttr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2771]||(t[2771]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7262-L7266",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xu,[e("summary",null,[t[2773]||(t[2773]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetLine-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetLine-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetLine")],-1)),t[2774]||(t[2774]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2776]||(t[2776]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diSubprogram)</span></span></code></pre></div><p>Gets the line from this DISubprogramAttr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2775]||(t[2775]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7233-L7237",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yu,[e("summary",null,[t[2777]||(t[2777]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetRecSelf-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetRecSelf-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetRecSelf")],-1)),t[2778]||(t[2778]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2780]||(t[2780]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetRecSelf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recId)</span></span></code></pre></div><p>Creates a self-referencing LLVM DISubprogramAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2779]||(t[2779]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7157-L7161",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tc,[e("summary",null,[t[2781]||(t[2781]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetScope-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetScope-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetScope")],-1)),t[2782]||(t[2782]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2784]||(t[2784]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diSubprogram)</span></span></code></pre></div><p>Gets the scope from this DISubprogramAttr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2783]||(t[2783]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7222-L7226",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ec,[e("summary",null,[t[2785]||(t[2785]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetScopeLine-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetScopeLine-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetScopeLine")],-1)),t[2786]||(t[2786]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2788]||(t[2788]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetScopeLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diSubprogram)</span></span></code></pre></div><p>Gets the scope line from this DISubprogram.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2787]||(t[2787]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7242-L7246",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sc,[e("summary",null,[t[2789]||(t[2789]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubprogramAttrGetType")],-1)),t[2790]||(t[2790]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2792]||(t[2792]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubprogramAttrGetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diSubprogram)</span></span></code></pre></div><p>Gets the type from this DISubprogramAttr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2791]||(t[2791]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7273-L7277",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ac,[e("summary",null,[t[2793]||(t[2793]=e("a",{id:"Reactant.MLIR.API.mlirLLVMDISubroutineTypeAttrGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMDISubroutineTypeAttrGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMDISubroutineTypeAttrGet")],-1)),t[2794]||(t[2794]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2796]||(t[2796]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMDISubroutineTypeAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, callingConvention, nTypes, types)</span></span></code></pre></div><p>Creates a LLVM DISubroutineTypeAttr attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2795]||(t[2795]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7284-L7288",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ic,[e("summary",null,[t[2797]||(t[2797]=e("a",{id:"Reactant.MLIR.API.mlirLLVMFunctionTypeGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMFunctionTypeGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMFunctionTypeGet")],-1)),t[2798]||(t[2798]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2800]||(t[2800]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMFunctionTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resultType, nArgumentTypes, argumentTypes, isVarArg)</span></span></code></pre></div><p>Creates an llvm.func type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2799]||(t[2799]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6588-L6592",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lc,[e("summary",null,[t[2801]||(t[2801]=e("a",{id:"Reactant.MLIR.API.mlirLLVMFunctionTypeGetInput-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMFunctionTypeGetInput-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMFunctionTypeGetInput")],-1)),t[2802]||(t[2802]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2804]||(t[2804]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMFunctionTypeGetInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns the pos-th input type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2803]||(t[2803]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6611-L6615",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nc,[e("summary",null,[t[2805]||(t[2805]=e("a",{id:"Reactant.MLIR.API.mlirLLVMFunctionTypeGetNumInputs-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMFunctionTypeGetNumInputs-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMFunctionTypeGetNumInputs")],-1)),t[2806]||(t[2806]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2808]||(t[2808]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMFunctionTypeGetNumInputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of input types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2807]||(t[2807]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6602-L6606",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rc,[e("summary",null,[t[2809]||(t[2809]=e("a",{id:"Reactant.MLIR.API.mlirLLVMFunctionTypeGetReturnType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMFunctionTypeGetReturnType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMFunctionTypeGetReturnType")],-1)),t[2810]||(t[2810]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2812]||(t[2812]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMFunctionTypeGetReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the return type of the function type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2811]||(t[2811]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6620-L6624",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oc,[e("summary",null,[t[2813]||(t[2813]=e("a",{id:"Reactant.MLIR.API.mlirLLVMLinkageAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMLinkageAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMLinkageAttrGet")],-1)),t[2814]||(t[2814]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2816]||(t[2816]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMLinkageAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, linkage)</span></span></code></pre></div><p>Creates a LLVM Linkage attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2815]||(t[2815]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6856-L6860",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pc,[e("summary",null,[t[2817]||(t[2817]=e("a",{id:"Reactant.MLIR.API.mlirLLVMPointerTypeGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMPointerTypeGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMPointerTypeGet")],-1)),t[2818]||(t[2818]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2820]||(t[2820]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMPointerTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, addressSpace)</span></span></code></pre></div><p>Creates an llvm.ptr type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2819]||(t[2819]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6534-L6538",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dc,[e("summary",null,[t[2821]||(t[2821]=e("a",{id:"Reactant.MLIR.API.mlirLLVMPointerTypeGetAddressSpace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMPointerTypeGetAddressSpace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMPointerTypeGetAddressSpace")],-1)),t[2822]||(t[2822]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2824]||(t[2824]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMPointerTypeGetAddressSpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pointerType)</span></span></code></pre></div><p>Returns address space of llvm.ptr</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2823]||(t[2823]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6552-L6556",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uc,[e("summary",null,[t[2825]||(t[2825]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeGetElementType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeGetElementType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeGetElementType")],-1)),t[2826]||(t[2826]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2828]||(t[2828]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeGetElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, position)</span></span></code></pre></div><p>Returns the <code>positions</code>-th field of the struct. Asserts if the struct is opaque, not yet initialized or if the position is out of range.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2827]||(t[2827]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6656-L6660",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cc,[e("summary",null,[t[2829]||(t[2829]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeGetIdentifier-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeGetIdentifier-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeGetIdentifier")],-1)),t[2830]||(t[2830]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2832]||(t[2832]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeGetIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the identifier of the identified struct. Asserts that the struct is identified, i.e., not literal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2831]||(t[2831]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6676-L6680",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hc,[e("summary",null,[t[2833]||(t[2833]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeGetNumElementTypes-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeGetNumElementTypes-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeGetNumElementTypes")],-1)),t[2834]||(t[2834]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2836]||(t[2836]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeGetNumElementTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of fields in the struct. Asserts if the struct is opaque or not yet initialized.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2835]||(t[2835]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6647-L6651",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bc,[e("summary",null,[t[2837]||(t[2837]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedGet")],-1)),t[2838]||(t[2838]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2840]||(t[2840]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeIdentifiedGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, name)</span></span></code></pre></div><p>Creates an LLVM identified struct type with no body. If a struct type with this name already exists in the context, returns that type. Use <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedNewGet-NTuple{5, Any}"><code>mlirLLVMStructTypeIdentifiedNewGet</code></a> to create a fresh struct type, potentially renaming it. The body should be set separatelty by calling <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirLLVMStructTypeSetBody-NTuple{4, Any}"><code>mlirLLVMStructTypeSetBody</code></a>, if it isn&#39;t set already.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2839]||(t[2839]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6716-L6720",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yc,[e("summary",null,[t[2841]||(t[2841]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedNewGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedNewGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeIdentifiedNewGet")],-1)),t[2842]||(t[2842]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2844]||(t[2844]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeIdentifiedNewGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, name, nFieldTypes, fieldTypes, isPacked)</span></span></code></pre></div><p>Creates an LLVM identified struct type with no body and a name starting with the given prefix. If a struct with the exact name as the given prefix already exists, appends an unspecified suffix to the name so that the name is unique in context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2843]||(t[2843]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6727-L6731",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gc,[e("summary",null,[t[2845]||(t[2845]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeIsLiteral-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeIsLiteral-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeIsLiteral")],-1)),t[2846]||(t[2846]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2848]||(t[2848]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeIsLiteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the type is a literal (unnamed) LLVM struct type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2847]||(t[2847]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6638-L6642",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mc,[e("summary",null,[t[2849]||(t[2849]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeIsOpaque-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeIsOpaque-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeIsOpaque")],-1)),t[2850]||(t[2850]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2852]||(t[2852]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeIsOpaque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> is the struct is explicitly opaque (will not have a body) or uninitialized (will eventually have a body).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2851]||(t[2851]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6685-L6689",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kc,[e("summary",null,[t[2853]||(t[2853]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeIsPacked-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeIsPacked-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeIsPacked")],-1)),t[2854]||(t[2854]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2856]||(t[2856]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeIsPacked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the struct is packed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2855]||(t[2855]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6667-L6671",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fc,[e("summary",null,[t[2857]||(t[2857]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeLiteralGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeLiteralGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeLiteralGet")],-1)),t[2858]||(t[2858]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2860]||(t[2860]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeLiteralGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, nFieldTypes, fieldTypes, isPacked)</span></span></code></pre></div><p>Creates an LLVM literal (unnamed) struct type. This may assert if the fields have types not compatible with the LLVM dialect. For a graceful failure, use the checked version.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2859]||(t[2859]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6694-L6698",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rc,[e("summary",null,[t[2861]||(t[2861]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeLiteralGetChecked-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeLiteralGetChecked-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeLiteralGetChecked")],-1)),t[2862]||(t[2862]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2864]||(t[2864]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeLiteralGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, nFieldTypes, fieldTypes, isPacked)</span></span></code></pre></div><p>Creates an LLVM literal (unnamed) struct type if possible. Emits a diagnostic at the given location and returns null otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2863]||(t[2863]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6705-L6709",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ic,[e("summary",null,[t[2865]||(t[2865]=e("a",{id:"Reactant.MLIR.API.mlirLLVMStructTypeSetBody-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLLVMStructTypeSetBody-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMStructTypeSetBody")],-1)),t[2866]||(t[2866]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2868]||(t[2868]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMStructTypeSetBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(structType, nFieldTypes, fieldTypes, isPacked)</span></span></code></pre></div><p>Sets the body of the identified struct if it hasn&#39;t been set yet. Returns whether the operation was successful.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2867]||(t[2867]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6748-L6752",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tc,[e("summary",null,[t[2869]||(t[2869]=e("a",{id:"Reactant.MLIR.API.mlirLLVMVoidTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLLVMVoidTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLLVMVoidTypeGet")],-1)),t[2870]||(t[2870]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2872]||(t[2872]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLLVMVoidTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates an llmv.void type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2871]||(t[2871]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6561-L6565",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ac,[e("summary",null,[t[2873]||(t[2873]=e("a",{id:"Reactant.MLIR.API.mlirLinalgFillBuiltinNamedOpRegion-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLinalgFillBuiltinNamedOpRegion-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLinalgFillBuiltinNamedOpRegion")],-1)),t[2874]||(t[2874]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2876]||(t[2876]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLinalgFillBuiltinNamedOpRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mlirOp)</span></span></code></pre></div><p>Apply the special region builder for the builtin named Linalg op. Assert that <code>mlirOp</code> is a builtin named Linalg op.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2875]||(t[2875]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7349-L7353",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jc,[e("summary",null,[t[2877]||(t[2877]=e("a",{id:"Reactant.MLIR.API.mlirLlvmThreadPoolCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirLlvmThreadPoolCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLlvmThreadPoolCreate")],-1)),t[2878]||(t[2878]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2880]||(t[2880]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLlvmThreadPoolCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Create an LLVM thread pool. This is reexported here to avoid directly pulling in the LLVM headers directly.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2879]||(t[2879]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L160-L164",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_c,[e("summary",null,[t[2881]||(t[2881]=e("a",{id:"Reactant.MLIR.API.mlirLlvmThreadPoolDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLlvmThreadPoolDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLlvmThreadPoolDestroy")],-1)),t[2882]||(t[2882]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2884]||(t[2884]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLlvmThreadPoolDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pool)</span></span></code></pre></div><p>Destroy an LLVM thread pool.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2883]||(t[2883]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L169-L173",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mc,[e("summary",null,[t[2885]||(t[2885]=e("a",{id:"Reactant.MLIR.API.mlirLoadIRDLDialects-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLoadIRDLDialects-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLoadIRDLDialects")],-1)),t[2886]||(t[2886]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2888]||(t[2888]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLoadIRDLDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module)</span></span></code></pre></div><p>Loads all IRDL dialects in the provided module, registering the dialects in the module&#39;s associated context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2887]||(t[2887]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6517-L6521",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lc,[e("summary",null,[t[2889]||(t[2889]=e("a",{id:"Reactant.MLIR.API.mlirLocationCallSiteGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLocationCallSiteGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationCallSiteGet")],-1)),t[2890]||(t[2890]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2892]||(t[2892]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationCallSiteGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callee, caller)</span></span></code></pre></div><p>Creates a call site location with a callee and a caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2891]||(t[2891]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L728-L732",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ec,[e("summary",null,[t[2893]||(t[2893]=e("a",{id:"Reactant.MLIR.API.mlirLocationCallSiteGetCallee-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationCallSiteGetCallee-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationCallSiteGetCallee")],-1)),t[2894]||(t[2894]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2896]||(t[2896]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationCallSiteGetCallee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for callee of CallSite.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2895]||(t[2895]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L739-L743",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cc,[e("summary",null,[t[2897]||(t[2897]=e("a",{id:"Reactant.MLIR.API.mlirLocationCallSiteGetCaller-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationCallSiteGetCaller-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationCallSiteGetCaller")],-1)),t[2898]||(t[2898]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2900]||(t[2900]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationCallSiteGetCaller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for caller of CallSite.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2899]||(t[2899]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L748-L752",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vc,[e("summary",null,[t[2901]||(t[2901]=e("a",{id:"Reactant.MLIR.API.mlirLocationCallSiteGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirLocationCallSiteGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationCallSiteGetTypeID")],-1)),t[2902]||(t[2902]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2904]||(t[2904]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationCallSiteGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>TypeID Getter for CallSite.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2903]||(t[2903]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L757-L761",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pc,[e("summary",null,[t[2905]||(t[2905]=e("a",{id:"Reactant.MLIR.API.mlirLocationEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLocationEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationEqual")],-1)),t[2906]||(t[2906]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2908]||(t[2908]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l1, l2)</span></span></code></pre></div><p>Checks if two locations are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2907]||(t[2907]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L910-L914",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xc,[e("summary",null,[t[2909]||(t[2909]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColGet")],-1)),t[2910]||(t[2910]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2912]||(t[2912]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, filename, line, col)</span></span></code></pre></div><p>Creates an File/Line/Column location owned by the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2911]||(t[2911]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L634-L638",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sc,[e("summary",null,[t[2913]||(t[2913]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGet-NTuple{6, Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGet-NTuple{6, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGet")],-1)),t[2914]||(t[2914]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2916]||(t[2916]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, filename, start_line, start_col, end_line, end_col)</span></span></code></pre></div><p>Creates an File/Line/Column range location owned by the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2915]||(t[2915]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L645-L649",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dc,[e("summary",null,[t[2917]||(t[2917]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGetEndColumn-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGetEndColumn-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGetEndColumn")],-1)),t[2918]||(t[2918]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2920]||(t[2920]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGetEndColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for end_column of FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2919]||(t[2919]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L701-L705",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fc,[e("summary",null,[t[2921]||(t[2921]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGetEndLine-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGetEndLine-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGetEndLine")],-1)),t[2922]||(t[2922]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2924]||(t[2924]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGetEndLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for end_line of FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2923]||(t[2923]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L692-L696",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vc,[e("summary",null,[t[2925]||(t[2925]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGetFilename-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGetFilename-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGetFilename")],-1)),t[2926]||(t[2926]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2928]||(t[2928]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGetFilename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for filename of FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2927]||(t[2927]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L663-L667",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oc,[e("summary",null,[t[2929]||(t[2929]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGetStartColumn-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGetStartColumn-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGetStartColumn")],-1)),t[2930]||(t[2930]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2932]||(t[2932]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGetStartColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for start_column of FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2931]||(t[2931]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L683-L687",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bc,[e("summary",null,[t[2933]||(t[2933]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGetStartLine-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGetStartLine-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGetStartLine")],-1)),t[2934]||(t[2934]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2936]||(t[2936]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGetStartLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for start_line of FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2935]||(t[2935]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L674-L678",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nc,[e("summary",null,[t[2937]||(t[2937]=e("a",{id:"Reactant.MLIR.API.mlirLocationFileLineColRangeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirLocationFileLineColRangeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFileLineColRangeGetTypeID")],-1)),t[2938]||(t[2938]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2940]||(t[2940]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFileLineColRangeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>TypeID Getter for FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2939]||(t[2939]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L710-L714",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gc,[e("summary",null,[t[2941]||(t[2941]=e("a",{id:"Reactant.MLIR.API.mlirLocationFromAttribute-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFromAttribute-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFromAttribute")],-1)),t[2942]||(t[2942]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2944]||(t[2944]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFromAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attribute)</span></span></code></pre></div><p>Creates a location from a location attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2943]||(t[2943]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L625-L629",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zc,[e("summary",null,[t[2945]||(t[2945]=e("a",{id:"Reactant.MLIR.API.mlirLocationFusedGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirLocationFusedGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFusedGet")],-1)),t[2946]||(t[2946]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2948]||(t[2948]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFusedGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, nLocations, locations, metadata)</span></span></code></pre></div><p>Creates a fused location with an array of locations and metadata.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2947]||(t[2947]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L775-L779",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wc,[e("summary",null,[t[2949]||(t[2949]=e("a",{id:"Reactant.MLIR.API.mlirLocationFusedGetLocations-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirLocationFusedGetLocations-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFusedGetLocations")],-1)),t[2950]||(t[2950]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2952]||(t[2952]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFusedGetLocations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, locationsCPtr)</span></span></code></pre></div><p>Getter for locations of Fused. Requires pre-allocated memory of #fusedLocations X sizeof(<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirLocation"><code>MlirLocation</code></a>).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2951]||(t[2951]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L798-L802",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uc,[e("summary",null,[t[2953]||(t[2953]=e("a",{id:"Reactant.MLIR.API.mlirLocationFusedGetMetadata-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFusedGetMetadata-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFusedGetMetadata")],-1)),t[2954]||(t[2954]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2956]||(t[2956]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFusedGetMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for metadata of Fused.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2955]||(t[2955]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L809-L813",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qc,[e("summary",null,[t[2957]||(t[2957]=e("a",{id:"Reactant.MLIR.API.mlirLocationFusedGetNumLocations-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationFusedGetNumLocations-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFusedGetNumLocations")],-1)),t[2958]||(t[2958]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2960]||(t[2960]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFusedGetNumLocations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for number of locations fused together.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2959]||(t[2959]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L789-L793",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qc,[e("summary",null,[t[2961]||(t[2961]=e("a",{id:"Reactant.MLIR.API.mlirLocationFusedGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirLocationFusedGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationFusedGetTypeID")],-1)),t[2962]||(t[2962]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2964]||(t[2964]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationFusedGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>TypeID Getter for Fused.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2963]||(t[2963]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L818-L822",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wc,[e("summary",null,[t[2965]||(t[2965]=e("a",{id:"Reactant.MLIR.API.mlirLocationGetAttribute-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationGetAttribute-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationGetAttribute")],-1)),t[2966]||(t[2966]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2968]||(t[2968]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationGetAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Returns the underlying location attribute of this location.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2967]||(t[2967]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L616-L620",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zc,[e("summary",null,[t[2969]||(t[2969]=e("a",{id:"Reactant.MLIR.API.mlirLocationGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationGetContext")],-1)),t[2970]||(t[2970]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2972]||(t[2972]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Gets the context that a location was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2971]||(t[2971]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L892-L896",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hc,[e("summary",null,[t[2973]||(t[2973]=e("a",{id:"Reactant.MLIR.API.mlirLocationIsACallSite-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationIsACallSite-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationIsACallSite")],-1)),t[2974]||(t[2974]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2976]||(t[2976]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationIsACallSite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Checks whether the given location is an CallSite.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2975]||(t[2975]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L766-L770",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jc,[e("summary",null,[t[2977]||(t[2977]=e("a",{id:"Reactant.MLIR.API.mlirLocationIsAFileLineColRange-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationIsAFileLineColRange-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationIsAFileLineColRange")],-1)),t[2978]||(t[2978]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2980]||(t[2980]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationIsAFileLineColRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Checks whether the given location is an FileLineColRange.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2979]||(t[2979]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L719-L723",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kc,[e("summary",null,[t[2981]||(t[2981]=e("a",{id:"Reactant.MLIR.API.mlirLocationIsAFused-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationIsAFused-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationIsAFused")],-1)),t[2982]||(t[2982]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2984]||(t[2984]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationIsAFused</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Checks whether the given location is an Fused.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2983]||(t[2983]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L827-L831",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$c,[e("summary",null,[t[2985]||(t[2985]=e("a",{id:"Reactant.MLIR.API.mlirLocationIsAName-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationIsAName-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationIsAName")],-1)),t[2986]||(t[2986]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2988]||(t[2988]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationIsAName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Checks whether the given location is an Name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2987]||(t[2987]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L874-L878",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xc,[e("summary",null,[t[2989]||(t[2989]=e("a",{id:"Reactant.MLIR.API.mlirLocationIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationIsNull")],-1)),t[2990]||(t[2990]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2992]||(t[2992]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Checks if the location is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2991]||(t[2991]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L901-L905",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yc,[e("summary",null,[t[2993]||(t[2993]=e("a",{id:"Reactant.MLIR.API.mlirLocationNameGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirLocationNameGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationNameGet")],-1)),t[2994]||(t[2994]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[2996]||(t[2996]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationNameGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, name, childLoc)</span></span></code></pre></div><p>Creates a name location owned by the given context. Providing null location for childLoc is allowed and if childLoc is null location, then the behavior is the same as having unknown child location.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2995]||(t[2995]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L836-L840",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",th,[e("summary",null,[t[2997]||(t[2997]=e("a",{id:"Reactant.MLIR.API.mlirLocationNameGetChildLoc-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationNameGetChildLoc-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationNameGetChildLoc")],-1)),t[2998]||(t[2998]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3e3]||(t[3e3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationNameGetChildLoc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for childLoc of Name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2999]||(t[2999]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L856-L860",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",eh,[e("summary",null,[t[3001]||(t[3001]=e("a",{id:"Reactant.MLIR.API.mlirLocationNameGetName-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationNameGetName-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationNameGetName")],-1)),t[3002]||(t[3002]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3004]||(t[3004]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationNameGetName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Getter for name of Name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3003]||(t[3003]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L847-L851",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sh,[e("summary",null,[t[3005]||(t[3005]=e("a",{id:"Reactant.MLIR.API.mlirLocationNameGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirLocationNameGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationNameGetTypeID")],-1)),t[3006]||(t[3006]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3008]||(t[3008]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationNameGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>TypeID Getter for Name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3007]||(t[3007]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L865-L869",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ah,[e("summary",null,[t[3009]||(t[3009]=e("a",{id:"Reactant.MLIR.API.mlirLocationPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirLocationPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationPrint")],-1)),t[3010]||(t[3010]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3012]||(t[3012]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, callback, userData)</span></span></code></pre></div><p>Prints a location by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3011]||(t[3011]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L919-L923",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ih,[e("summary",null,[t[3013]||(t[3013]=e("a",{id:"Reactant.MLIR.API.mlirLocationUnknownGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLocationUnknownGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLocationUnknownGet")],-1)),t[3014]||(t[3014]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3016]||(t[3016]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLocationUnknownGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Creates a location with unknown position owned by the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3015]||(t[3015]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L883-L887",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lh,[e("summary",null,[t[3017]||(t[3017]=e("a",{id:"Reactant.MLIR.API.mlirLogicalResultFailure-Tuple{}",href:"#Reactant.MLIR.API.mlirLogicalResultFailure-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLogicalResultFailure")],-1)),t[3018]||(t[3018]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3020]||(t[3020]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLogicalResultFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a logical result representing a failure.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3019]||(t[3019]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L151-L155",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nh,[e("summary",null,[t[3021]||(t[3021]=e("a",{id:"Reactant.MLIR.API.mlirLogicalResultIsFailure-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLogicalResultIsFailure-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLogicalResultIsFailure")],-1)),t[3022]||(t[3022]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3024]||(t[3024]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLogicalResultIsFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div><p>Checks if the given logical result represents a failure.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3023]||(t[3023]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L133-L137",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rh,[e("summary",null,[t[3025]||(t[3025]=e("a",{id:"Reactant.MLIR.API.mlirLogicalResultIsSuccess-Tuple{Any}",href:"#Reactant.MLIR.API.mlirLogicalResultIsSuccess-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLogicalResultIsSuccess")],-1)),t[3026]||(t[3026]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3028]||(t[3028]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLogicalResultIsSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div><p>Checks if the given logical result represents a success.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3027]||(t[3027]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L124-L128",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oh,[e("summary",null,[t[3029]||(t[3029]=e("a",{id:"Reactant.MLIR.API.mlirLogicalResultSuccess-Tuple{}",href:"#Reactant.MLIR.API.mlirLogicalResultSuccess-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirLogicalResultSuccess")],-1)),t[3030]||(t[3030]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3032]||(t[3032]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirLogicalResultSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a logical result representing a success.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3031]||(t[3031]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L142-L146",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ph,[e("summary",null,[t[3033]||(t[3033]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeContiguousGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeContiguousGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeContiguousGet")],-1)),t[3034]||(t[3034]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3036]||(t[3036]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeContiguousGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, rank, shape, memorySpace)</span></span></code></pre></div><p>Creates a MemRef type with the given rank, shape, memory space and element type in the same context as the element type. The type has no affine maps, i.e. represents a default row-major contiguous memref. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3035]||(t[3035]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5849-L5853",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dh,[e("summary",null,[t[3037]||(t[3037]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeContiguousGetChecked-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeContiguousGetChecked-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeContiguousGetChecked")],-1)),t[3038]||(t[3038]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3040]||(t[3040]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeContiguousGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, elementType, rank, shape, memorySpace)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirMemRefTypeContiguousGet-NTuple{4, Any}"><code>mlirMemRefTypeContiguousGet</code></a>&quot; but returns a nullptr wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> on illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3039]||(t[3039]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5860-L5864",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uh,[e("summary",null,[t[3041]||(t[3041]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGet")],-1)),t[3042]||(t[3042]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3044]||(t[3044]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, rank, shape, layout, memorySpace)</span></span></code></pre></div><p>Creates a MemRef type with the given rank and shape, a potentially empty list of affine layout maps, the given memory space and element type, in the same context as element type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3043]||(t[3043]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5818-L5822",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ch,[e("summary",null,[t[3045]||(t[3045]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGetAffineMap-Tuple{Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeGetAffineMap-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGetAffineMap")],-1)),t[3046]||(t[3046]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3048]||(t[3048]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetAffineMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the affine map of the given MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3047]||(t[3047]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5906-L5910",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hh,[e("summary",null,[t[3049]||(t[3049]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGetChecked-NTuple{6, Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeGetChecked-NTuple{6, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGetChecked")],-1)),t[3050]||(t[3050]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3052]||(t[3052]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, elementType, rank, shape, layout, memorySpace)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirMemRefTypeGet-NTuple{5, Any}"><code>mlirMemRefTypeGet</code></a>&quot; but returns a nullptr-wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> o illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3051]||(t[3051]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5833-L5837",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bh,[e("summary",null,[t[3053]||(t[3053]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGetLayout-Tuple{Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeGetLayout-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGetLayout")],-1)),t[3054]||(t[3054]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3056]||(t[3056]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the layout of the given MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3055]||(t[3055]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5897-L5901",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yh,[e("summary",null,[t[3057]||(t[3057]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGetMemorySpace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeGetMemorySpace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGetMemorySpace")],-1)),t[3058]||(t[3058]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3060]||(t[3060]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetMemorySpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the memory space of the given MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3059]||(t[3059]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5915-L5919",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gh,[e("summary",null,[t[3061]||(t[3061]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGetStridesAndOffset-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirMemRefTypeGetStridesAndOffset-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGetStridesAndOffset")],-1)),t[3062]||(t[3062]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3064]||(t[3064]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetStridesAndOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, strides, offset)</span></span></code></pre></div><p>Returns the strides of the MemRef if the layout map is in strided form. Both strides and offset are out params. strides must point to pre-allocated memory of length equal to the rank of the memref.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3063]||(t[3063]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5924-L5928",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mh,[e("summary",null,[t[3065]||(t[3065]=e("a",{id:"Reactant.MLIR.API.mlirMemRefTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirMemRefTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMemRefTypeGetTypeID")],-1)),t[3066]||(t[3066]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3068]||(t[3068]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMemRefTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3067]||(t[3067]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5782-L5786",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kh,[e("summary",null,[t[3069]||(t[3069]=e("a",{id:"Reactant.MLIR.API.mlirMergeSymbolsIntoFromClone-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirMergeSymbolsIntoFromClone-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirMergeSymbolsIntoFromClone")],-1)),t[3070]||(t[3070]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3072]||(t[3072]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirMergeSymbolsIntoFromClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, other)</span></span></code></pre></div><p>Merge the symbols from <code>other</code> into <code>target</code>, potentially renaming them to avoid conflicts. Private symbols may be renamed during the merge, public symbols must have at most one declaration. A name conflict in public symbols is reported as an error before returning a failure.</p><p>Note that this clones the <code>other</code> operation unlike the C++ counterpart that takes ownership.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3071]||(t[3071]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8283-L8289",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fh,[e("summary",null,[t[3073]||(t[3073]=e("a",{id:"Reactant.MLIR.API.mlirModuleCreateEmpty-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleCreateEmpty-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleCreateEmpty")],-1)),t[3074]||(t[3074]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3076]||(t[3076]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleCreateEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location)</span></span></code></pre></div><p>Creates a new, empty module and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3075]||(t[3075]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L930-L934",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rh,[e("summary",null,[t[3077]||(t[3077]=e("a",{id:"Reactant.MLIR.API.mlirModuleCreateParse-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirModuleCreateParse-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleCreateParse")],-1)),t[3078]||(t[3078]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3080]||(t[3080]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleCreateParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, _module)</span></span></code></pre></div><p>Parses a module from the string and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3079]||(t[3079]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L939-L943",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ih,[e("summary",null,[t[3081]||(t[3081]=e("a",{id:"Reactant.MLIR.API.mlirModuleCreateParseFromFile-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirModuleCreateParseFromFile-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleCreateParseFromFile")],-1)),t[3082]||(t[3082]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3084]||(t[3084]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleCreateParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, fileName)</span></span></code></pre></div><p>Parses a module from file and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3083]||(t[3083]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L950-L954",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Th,[e("summary",null,[t[3085]||(t[3085]=e("a",{id:"Reactant.MLIR.API.mlirModuleDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleDestroy")],-1)),t[3086]||(t[3086]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3088]||(t[3088]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module)</span></span></code></pre></div><p>Takes a module owned by the caller and deletes it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3087]||(t[3087]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L988-L992",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ah,[e("summary",null,[t[3089]||(t[3089]=e("a",{id:"Reactant.MLIR.API.mlirModuleFromOperation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleFromOperation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleFromOperation")],-1)),t[3090]||(t[3090]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3092]||(t[3092]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleFromOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Views the generic operation as a module. The returned module is null when the input operation was not a ModuleOp.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3091]||(t[3091]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1006-L1010",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jh,[e("summary",null,[t[3093]||(t[3093]=e("a",{id:"Reactant.MLIR.API.mlirModuleGetBody-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleGetBody-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleGetBody")],-1)),t[3094]||(t[3094]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3096]||(t[3096]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleGetBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module)</span></span></code></pre></div><p>Gets the body of the module, i.e. the only block it contains.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3095]||(t[3095]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L970-L974",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_h,[e("summary",null,[t[3097]||(t[3097]=e("a",{id:"Reactant.MLIR.API.mlirModuleGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleGetContext")],-1)),t[3098]||(t[3098]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3100]||(t[3100]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module)</span></span></code></pre></div><p>Gets the context that a module was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3099]||(t[3099]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L961-L965",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mh,[e("summary",null,[t[3101]||(t[3101]=e("a",{id:"Reactant.MLIR.API.mlirModuleGetOperation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleGetOperation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleGetOperation")],-1)),t[3102]||(t[3102]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3104]||(t[3104]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleGetOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module)</span></span></code></pre></div><p>Views the module as a generic operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3103]||(t[3103]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L997-L1001",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lh,[e("summary",null,[t[3105]||(t[3105]=e("a",{id:"Reactant.MLIR.API.mlirModuleIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirModuleIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirModuleIsNull")],-1)),t[3106]||(t[3106]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3108]||(t[3108]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirModuleIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module)</span></span></code></pre></div><p>Checks whether a module is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3107]||(t[3107]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L979-L983",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Eh,[e("summary",null,[t[3109]||(t[3109]=e("a",{id:"Reactant.MLIR.API.mlirNamedAttributeGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirNamedAttributeGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirNamedAttributeGet")],-1)),t[3110]||(t[3110]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3112]||(t[3112]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirNamedAttributeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, attr)</span></span></code></pre></div><p>Associates an attribute with the name. Takes ownership of neither.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3111]||(t[3111]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2465-L2469",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ch,[e("summary",null,[t[3113]||(t[3113]=e("a",{id:"Reactant.MLIR.API.mlirNoneTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirNoneTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirNoneTypeGet")],-1)),t[3114]||(t[3114]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3116]||(t[3116]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirNoneTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a None type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3115]||(t[3115]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5454-L5458",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vh,[e("summary",null,[t[3117]||(t[3117]=e("a",{id:"Reactant.MLIR.API.mlirNoneTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirNoneTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirNoneTypeGetTypeID")],-1)),t[3118]||(t[3118]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3120]||(t[3120]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirNoneTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an None type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3119]||(t[3119]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5436-L5440",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ph,[e("summary",null,[t[3121]||(t[3121]=e("a",{id:"Reactant.MLIR.API.mlirOpOperandGetNextUse-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpOperandGetNextUse-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpOperandGetNextUse")],-1)),t[3122]||(t[3122]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3124]||(t[3124]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpOperandGetNextUse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns an op operand representing the next use of the value, or a null op operand if there is no next use.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3123]||(t[3123]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2297-L2301",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xh,[e("summary",null,[t[3125]||(t[3125]=e("a",{id:"Reactant.MLIR.API.mlirOpOperandGetOperandNumber-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpOperandGetOperandNumber-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpOperandGetOperandNumber")],-1)),t[3126]||(t[3126]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3128]||(t[3128]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpOperandGetOperandNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns the operand number of an op operand.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3127]||(t[3127]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2288-L2292",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sh,[e("summary",null,[t[3129]||(t[3129]=e("a",{id:"Reactant.MLIR.API.mlirOpOperandGetOwner-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpOperandGetOwner-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpOperandGetOwner")],-1)),t[3130]||(t[3130]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3132]||(t[3132]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpOperandGetOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns the owner operation of an op operand.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3131]||(t[3131]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2279-L2283",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dh,[e("summary",null,[t[3133]||(t[3133]=e("a",{id:"Reactant.MLIR.API.mlirOpOperandGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpOperandGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpOperandGetValue")],-1)),t[3134]||(t[3134]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3136]||(t[3136]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpOperandGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns the value of an op operand.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3135]||(t[3135]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2270-L2274",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fh,[e("summary",null,[t[3137]||(t[3137]=e("a",{id:"Reactant.MLIR.API.mlirOpOperandIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpOperandIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpOperandIsNull")],-1)),t[3138]||(t[3138]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3140]||(t[3140]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpOperandIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opOperand)</span></span></code></pre></div><p>Returns whether the op operand is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3139]||(t[3139]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2261-L2265",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vh,[e("summary",null,[t[3141]||(t[3141]=e("a",{id:"Reactant.MLIR.API.mlirOpPassManagerAddOwnedPass-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOpPassManagerAddOwnedPass-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPassManagerAddOwnedPass")],-1)),t[3142]||(t[3142]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3144]||(t[3144]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPassManagerAddOwnedPass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, pass)</span></span></code></pre></div><p>Add a pass and transfer ownership to the provided mlirOpPassManager. If the pass is not a generic operation pass or matching the type of the provided PassManager, a new OpPassManager is implicitly nested under the provided PassManager.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3143]||(t[3143]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8660-L8664",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oh,[e("summary",null,[t[3145]||(t[3145]=e("a",{id:"Reactant.MLIR.API.mlirOpPassManagerAddPipeline-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirOpPassManagerAddPipeline-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPassManagerAddPipeline")],-1)),t[3146]||(t[3146]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3148]||(t[3148]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPassManagerAddPipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, pipelineElements, callback, userData)</span></span></code></pre></div><p>Parse a sequence of textual MLIR pass pipeline elements and add them to the provided OpPassManager. If parsing fails an error message is reported using the provided callback.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3147]||(t[3147]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8671-L8675",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bh,[e("summary",null,[t[3149]||(t[3149]=e("a",{id:"Reactant.MLIR.API.mlirOpPassManagerGetNestedUnder-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOpPassManagerGetNestedUnder-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPassManagerGetNestedUnder")],-1)),t[3150]||(t[3150]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3152]||(t[3152]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPassManagerGetNestedUnder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, operationName)</span></span></code></pre></div><p>Nest an OpPassManager under the provided OpPassManager, the nested passmanager will only run on operations matching the provided name. The returned OpPassManager will be destroyed when the parent is destroyed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3151]||(t[3151]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8638-L8642",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nh,[e("summary",null,[t[3153]||(t[3153]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsAssumeVerified-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsAssumeVerified-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsAssumeVerified")],-1)),t[3154]||(t[3154]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3156]||(t[3156]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsAssumeVerified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags)</span></span></code></pre></div><p>Do not verify the operation when using custom operation printers.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3155]||(t[3155]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1204-L1208",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gh,[e("summary",null,[t[3157]||(t[3157]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsCreate")],-1)),t[3158]||(t[3158]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3160]||(t[3160]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates new printing flags with defaults, intended for customization. Must be freed with a call to <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOpPrintingFlagsDestroy-Tuple{Any}"><code>mlirOpPrintingFlagsDestroy</code></a>().</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3159]||(t[3159]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1126-L1130",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zh,[e("summary",null,[t[3161]||(t[3161]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsDestroy")],-1)),t[3162]||(t[3162]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3164]||(t[3164]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags)</span></span></code></pre></div><p>Destroys printing flags created with <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOpPrintingFlagsCreate-Tuple{}"><code>mlirOpPrintingFlagsCreate</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3163]||(t[3163]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1135-L1139",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wh,[e("summary",null,[t[3165]||(t[3165]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsElideLargeElementsAttrs-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsElideLargeElementsAttrs-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsElideLargeElementsAttrs")],-1)),t[3166]||(t[3166]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3168]||(t[3168]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsElideLargeElementsAttrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, largeElementLimit)</span></span></code></pre></div><p>Enables the elision of large elements attributes by printing a lexically valid but otherwise meaningless form instead of the element data. The <code>largeElementLimit</code> is used to configure what is considered to be a &quot;large&quot; ElementsAttr by providing an upper limit to the number of elements.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3167]||(t[3167]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1144-L1148",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uh,[e("summary",null,[t[3169]||(t[3169]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsElideLargeResourceString-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsElideLargeResourceString-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsElideLargeResourceString")],-1)),t[3170]||(t[3170]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3172]||(t[3172]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsElideLargeResourceString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, largeResourceLimit)</span></span></code></pre></div><p>Enables the elision of large resources strings by omitting them from the <code>dialect_resources</code> section. The <code>largeResourceLimit</code> is used to configure what is considered to be a &quot;large&quot; resource by providing an upper limit to the string size.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3171]||(t[3171]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1155-L1159",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qh,[e("summary",null,[t[3173]||(t[3173]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsEnableDebugInfo-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsEnableDebugInfo-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsEnableDebugInfo")],-1)),t[3174]||(t[3174]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3176]||(t[3176]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsEnableDebugInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, enable, prettyForm)</span></span></code></pre></div><p>Enable or disable printing of debug information (based on <code>enable</code>). If &#39;prettyForm&#39; is set to true, debug information is printed in a more readable &#39;pretty&#39; form. Note: The IR generated with &#39;prettyForm&#39; is not parsable.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3175]||(t[3175]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1166-L1170",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qh,[e("summary",null,[t[3177]||(t[3177]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsPrintGenericOpForm-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsPrintGenericOpForm-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsPrintGenericOpForm")],-1)),t[3178]||(t[3178]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3180]||(t[3180]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsPrintGenericOpForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags)</span></span></code></pre></div><p>Always print operations in the generic form.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3179]||(t[3179]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1177-L1181",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wh,[e("summary",null,[t[3181]||(t[3181]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsPrintNameLocAsPrefix-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsPrintNameLocAsPrefix-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsPrintNameLocAsPrefix")],-1)),t[3182]||(t[3182]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3184]||(t[3184]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsPrintNameLocAsPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags)</span></span></code></pre></div><p>Print the name and location, if NamedLoc, as a prefix to the SSA ID.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3183]||(t[3183]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1186-L1190",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zh,[e("summary",null,[t[3185]||(t[3185]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsSkipRegions-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsSkipRegions-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsSkipRegions")],-1)),t[3186]||(t[3186]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3188]||(t[3188]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsSkipRegions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags)</span></span></code></pre></div><p>Skip printing regions.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3187]||(t[3187]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1213-L1217",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hh,[e("summary",null,[t[3189]||(t[3189]=e("a",{id:"Reactant.MLIR.API.mlirOpPrintingFlagsUseLocalScope-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpPrintingFlagsUseLocalScope-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpPrintingFlagsUseLocalScope")],-1)),t[3190]||(t[3190]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3192]||(t[3192]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpPrintingFlagsUseLocalScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags)</span></span></code></pre></div><p>Use local scope when printing the operation. This allows for using the printer in a more localized and thread-safe setting, but may not necessarily be identical to what the IR will look like when dumping the full module.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3191]||(t[3191]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1195-L1199",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jh,[e("summary",null,[t[3193]||(t[3193]=e("a",{id:"Reactant.MLIR.API.mlirOpResultGetOwner-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpResultGetOwner-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpResultGetOwner")],-1)),t[3194]||(t[3194]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3196]||(t[3196]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpResultGetOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns an operation that produced this value as its result. Asserts if the value is not an op result.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3195]||(t[3195]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2141-L2145",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kh,[e("summary",null,[t[3197]||(t[3197]=e("a",{id:"Reactant.MLIR.API.mlirOpResultGetResultNumber-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpResultGetResultNumber-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpResultGetResultNumber")],-1)),t[3198]||(t[3198]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3200]||(t[3200]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpResultGetResultNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the position of the value in the list of results of the operation that produced it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3199]||(t[3199]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2150-L2154",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$h,[e("summary",null,[t[3201]||(t[3201]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueAttrGet-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirOpaqueAttrGet-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueAttrGet")],-1)),t[3202]||(t[3202]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3204]||(t[3204]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, dialectNamespace, dataLength, data, type)</span></span></code></pre></div><p>Creates an opaque attribute in the given context associated with the dialect identified by its namespace. The attribute contains opaque byte data of the specified length (data need not be null-terminated).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3203]||(t[3203]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3786-L3790",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xh,[e("summary",null,[t[3205]||(t[3205]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueAttrGetData-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpaqueAttrGetData-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueAttrGetData")],-1)),t[3206]||(t[3206]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3208]||(t[3208]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueAttrGetData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the raw data as a string reference. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3207]||(t[3207]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3810-L3814",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yh,[e("summary",null,[t[3209]||(t[3209]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueAttrGetDialectNamespace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpaqueAttrGetDialectNamespace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueAttrGetDialectNamespace")],-1)),t[3210]||(t[3210]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3212]||(t[3212]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueAttrGetDialectNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the namespace of the dialect with which the given opaque attribute is associated. The namespace string is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3211]||(t[3211]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3801-L3805",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tb,[e("summary",null,[t[3213]||(t[3213]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirOpaqueAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueAttrGetTypeID")],-1)),t[3214]||(t[3214]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3216]||(t[3216]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Opaque attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3215]||(t[3215]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3819-L3823",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",eb,[e("summary",null,[t[3217]||(t[3217]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueTypeGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOpaqueTypeGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueTypeGet")],-1)),t[3218]||(t[3218]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3220]||(t[3220]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, dialectNamespace, typeData)</span></span></code></pre></div><p>Creates an opaque type in the given context associated with the dialect identified by its namespace. The type contains opaque byte data of the specified length (data need not be null-terminated).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3219]||(t[3219]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6078-L6082",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sb,[e("summary",null,[t[3221]||(t[3221]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueTypeGetData-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpaqueTypeGetData-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueTypeGetData")],-1)),t[3222]||(t[3222]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3224]||(t[3224]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueTypeGetData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the raw data as a string reference. The data remains live as long as the context in which the type lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3223]||(t[3223]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6098-L6102",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ab,[e("summary",null,[t[3225]||(t[3225]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueTypeGetDialectNamespace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOpaqueTypeGetDialectNamespace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueTypeGetDialectNamespace")],-1)),t[3226]||(t[3226]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3228]||(t[3228]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueTypeGetDialectNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the namespace of the dialect with which the given opaque type is associated. The namespace string is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3227]||(t[3227]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6089-L6093",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ib,[e("summary",null,[t[3229]||(t[3229]=e("a",{id:"Reactant.MLIR.API.mlirOpaqueTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirOpaqueTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOpaqueTypeGetTypeID")],-1)),t[3230]||(t[3230]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3232]||(t[3232]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOpaqueTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Opaque type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3231]||(t[3231]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6060-L6064",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lb,[e("summary",null,[t[3233]||(t[3233]=e("a",{id:"Reactant.MLIR.API.mlirOperationClone-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationClone-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationClone")],-1)),t[3234]||(t[3234]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3236]||(t[3236]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Creates a deep copy of an operation. The operation is not inserted and ownership is transferred to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3235]||(t[3235]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1275-L1279",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nb,[e("summary",null,[t[3237]||(t[3237]=e("a",{id:"Reactant.MLIR.API.mlirOperationCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationCreate")],-1)),t[3238]||(t[3238]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3240]||(t[3240]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)</span></span></code></pre></div><p>Creates an operation and transfers ownership to the caller. Note that caller owned child objects are transferred in this call and must not be further used. Particularly, this applies to any regions added to the state (the implementation may invalidate any such pointers).</p><p>This call can fail under the following conditions, in which case, it will return a null operation and emit diagnostics: - Result type inference is enabled and cannot be performed.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3239]||(t[3239]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1251-L1257",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rb,[e("summary",null,[t[3241]||(t[3241]=e("a",{id:"Reactant.MLIR.API.mlirOperationCreateParse-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationCreateParse-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationCreateParse")],-1)),t[3242]||(t[3242]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3244]||(t[3244]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationCreateParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, sourceStr, sourceName)</span></span></code></pre></div><p>Parses an operation, giving ownership to the caller. If parsing fails a null operation will be returned, and an error diagnostic emitted.</p><p><code>sourceStr</code> may be either the text assembly format, or binary bytecode format. <code>sourceName</code> is used as the file name of the source; any IR without locations will get a <code>FileLineColLoc</code> location with <code>sourceName</code> as the file name.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3243]||(t[3243]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1262-L1268",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ob,[e("summary",null,[t[3245]||(t[3245]=e("a",{id:"Reactant.MLIR.API.mlirOperationDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationDestroy")],-1)),t[3246]||(t[3246]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3248]||(t[3248]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Takes an operation owned by the caller and destroys it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3247]||(t[3247]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1284-L1288",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pb,[e("summary",null,[t[3249]||(t[3249]=e("a",{id:"Reactant.MLIR.API.mlirOperationDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationDump")],-1)),t[3250]||(t[3250]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3252]||(t[3252]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Prints an operation to stderr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3251]||(t[3251]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1691-L1695",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",db,[e("summary",null,[t[3253]||(t[3253]=e("a",{id:"Reactant.MLIR.API.mlirOperationEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationEqual")],-1)),t[3254]||(t[3254]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3256]||(t[3256]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, other)</span></span></code></pre></div><p>Checks whether two operation handles point to the same operation. This does not perform deep comparison.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3255]||(t[3255]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1311-L1315",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ub,[e("summary",null,[t[3257]||(t[3257]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetAttribute-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetAttribute-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetAttribute")],-1)),t[3258]||(t[3258]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3260]||(t[3260]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos)</span></span></code></pre></div><p>Return <code>pos</code>-th attribute of the operation. Deprecated, please use <code>mlirOperationGetInherentAttribute</code> or <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationGetDiscardableAttribute-Tuple{Any, Any}"><code>mlirOperationGetDiscardableAttribute</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3259]||(t[3259]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1583-L1587",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cb,[e("summary",null,[t[3261]||(t[3261]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetAttributeByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetAttributeByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetAttributeByName")],-1)),t[3262]||(t[3262]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3264]||(t[3264]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Returns an attribute attached to the operation given its name. Deprecated, please use <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationGetInherentAttributeByName-Tuple{Any, Any}"><code>mlirOperationGetInherentAttributeByName</code></a> or <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationGetDiscardableAttributeByName-Tuple{Any, Any}"><code>mlirOperationGetDiscardableAttributeByName</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3263]||(t[3263]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1594-L1598",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hb,[e("summary",null,[t[3265]||(t[3265]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetBlock-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetBlock-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetBlock")],-1)),t[3266]||(t[3266]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3268]||(t[3268]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the block that owns this operation, returning null if the operation is not owned.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3267]||(t[3267]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1356-L1360",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bb,[e("summary",null,[t[3269]||(t[3269]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetContext")],-1)),t[3270]||(t[3270]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3272]||(t[3272]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the context this operation is associated with</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3271]||(t[3271]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1320-L1324",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yb,[e("summary",null,[t[3273]||(t[3273]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetDiscardableAttribute-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetDiscardableAttribute-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetDiscardableAttribute")],-1)),t[3274]||(t[3274]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3276]||(t[3276]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetDiscardableAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos)</span></span></code></pre></div><p>Return <code>pos</code>-th discardable attribute of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3275]||(t[3275]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1530-L1534",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gb,[e("summary",null,[t[3277]||(t[3277]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetDiscardableAttributeByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetDiscardableAttributeByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetDiscardableAttributeByName")],-1)),t[3278]||(t[3278]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3280]||(t[3280]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetDiscardableAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Returns a discardable attribute attached to the operation given its name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3279]||(t[3279]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1541-L1545",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mb,[e("summary",null,[t[3281]||(t[3281]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetFirstRegion-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetFirstRegion-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetFirstRegion")],-1)),t[3282]||(t[3282]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3284]||(t[3284]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetFirstRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns first region attached to the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3283]||(t[3283]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1855-L1859",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kb,[e("summary",null,[t[3285]||(t[3285]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetInherentAttributeByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetInherentAttributeByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetInherentAttributeByName")],-1)),t[3286]||(t[3286]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3288]||(t[3288]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetInherentAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Returns an inherent attribute attached to the operation given its name.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3287]||(t[3287]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1499-L1503",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fb,[e("summary",null,[t[3289]||(t[3289]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetLocation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetLocation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetLocation")],-1)),t[3290]||(t[3290]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3292]||(t[3292]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the location of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3291]||(t[3291]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1329-L1333",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rb,[e("summary",null,[t[3293]||(t[3293]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetName-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetName-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetName")],-1)),t[3294]||(t[3294]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3296]||(t[3296]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the name of the operation as an identifier.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3295]||(t[3295]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1347-L1351",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ib,[e("summary",null,[t[3297]||(t[3297]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNextInBlock-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNextInBlock-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNextInBlock")],-1)),t[3298]||(t[3298]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3300]||(t[3300]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNextInBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns an operation immediately following the given operation it its enclosing block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3299]||(t[3299]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1392-L1396",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tb,[e("summary",null,[t[3301]||(t[3301]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNumAttributes-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNumAttributes-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNumAttributes")],-1)),t[3302]||(t[3302]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3304]||(t[3304]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNumAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of attributes attached to the operation. Deprecated, please use <code>mlirOperationGetNumInherentAttributes</code> or <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationGetNumDiscardableAttributes-Tuple{Any}"><code>mlirOperationGetNumDiscardableAttributes</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3303]||(t[3303]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1574-L1578",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ab,[e("summary",null,[t[3305]||(t[3305]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNumDiscardableAttributes-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNumDiscardableAttributes-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNumDiscardableAttributes")],-1)),t[3306]||(t[3306]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3308]||(t[3308]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNumDiscardableAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of discardable attributes attached to the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3307]||(t[3307]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1521-L1525",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jb,[e("summary",null,[t[3309]||(t[3309]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNumOperands-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNumOperands-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNumOperands")],-1)),t[3310]||(t[3310]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3312]||(t[3312]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNumOperands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of operands of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3311]||(t[3311]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1401-L1405",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_b,[e("summary",null,[t[3313]||(t[3313]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNumRegions-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNumRegions-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNumRegions")],-1)),t[3314]||(t[3314]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3316]||(t[3316]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNumRegions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of regions attached to the given operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3315]||(t[3315]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1374-L1378",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mb,[e("summary",null,[t[3317]||(t[3317]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNumResults-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNumResults-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNumResults")],-1)),t[3318]||(t[3318]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3320]||(t[3320]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNumResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of results of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3319]||(t[3319]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1441-L1445",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lb,[e("summary",null,[t[3321]||(t[3321]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetNumSuccessors-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetNumSuccessors-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetNumSuccessors")],-1)),t[3322]||(t[3322]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3324]||(t[3324]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetNumSuccessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Returns the number of successor blocks of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3323]||(t[3323]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1459-L1463",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Eb,[e("summary",null,[t[3325]||(t[3325]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetOperand-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetOperand-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetOperand")],-1)),t[3326]||(t[3326]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3328]||(t[3328]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetOperand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th operand of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3327]||(t[3327]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1410-L1414",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cb,[e("summary",null,[t[3329]||(t[3329]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetParentOperation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetParentOperation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetParentOperation")],-1)),t[3330]||(t[3330]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3332]||(t[3332]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetParentOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the operation that owns this operation, returning null if the operation is not owned.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3331]||(t[3331]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1365-L1369",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vb,[e("summary",null,[t[3333]||(t[3333]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetRegion-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetRegion-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetRegion")],-1)),t[3334]||(t[3334]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3336]||(t[3336]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th region attached to the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3335]||(t[3335]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1383-L1387",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pb,[e("summary",null,[t[3337]||(t[3337]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetResult-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetResult-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetResult")],-1)),t[3338]||(t[3338]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3340]||(t[3340]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th result of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3339]||(t[3339]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1450-L1454",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xb,[e("summary",null,[t[3341]||(t[3341]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetSuccessor-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationGetSuccessor-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetSuccessor")],-1)),t[3342]||(t[3342]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3344]||(t[3344]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetSuccessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th successor of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3343]||(t[3343]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1468-L1472",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sb,[e("summary",null,[t[3345]||(t[3345]=e("a",{id:"Reactant.MLIR.API.mlirOperationGetTypeID-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationGetTypeID-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationGetTypeID")],-1)),t[3346]||(t[3346]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3348]||(t[3348]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Gets the type id of the operation. Returns null if the operation does not have a registered operation description.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3347]||(t[3347]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1338-L1342",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Db,[e("summary",null,[t[3349]||(t[3349]=e("a",{id:"Reactant.MLIR.API.mlirOperationHasInherentAttributeByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationHasInherentAttributeByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationHasInherentAttributeByName")],-1)),t[3350]||(t[3350]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3352]||(t[3352]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationHasInherentAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Returns true if this operation defines an inherent attribute with this name. Note: the attribute can be optional, so <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationGetInherentAttributeByName-Tuple{Any, Any}"><code>mlirOperationGetInherentAttributeByName</code></a> can still return a null attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3351]||(t[3351]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1488-L1492",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fb,[e("summary",null,[t[3353]||(t[3353]=e("a",{id:"Reactant.MLIR.API.mlirOperationImplementsInterface-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationImplementsInterface-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationImplementsInterface")],-1)),t[3354]||(t[3354]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3356]||(t[3356]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationImplementsInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation, interfaceTypeID)</span></span></code></pre></div><p>Returns <code>true</code> if the given operation implements an interface identified by its TypeID.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3355]||(t[3355]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8392-L8396",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vb,[e("summary",null,[t[3357]||(t[3357]=e("a",{id:"Reactant.MLIR.API.mlirOperationImplementsInterfaceStatic-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationImplementsInterfaceStatic-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationImplementsInterfaceStatic")],-1)),t[3358]||(t[3358]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3360]||(t[3360]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationImplementsInterfaceStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operationName, context, interfaceTypeID)</span></span></code></pre></div><p>Returns <code>true</code> if the operation identified by its canonical string name implements the interface identified by its TypeID in the given context. Note that interfaces may be attached to operations in some contexts and not others.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3359]||(t[3359]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8403-L8407",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ob,[e("summary",null,[t[3361]||(t[3361]=e("a",{id:"Reactant.MLIR.API.mlirOperationIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationIsNull")],-1)),t[3362]||(t[3362]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3364]||(t[3364]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Checks whether the underlying operation is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3363]||(t[3363]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1302-L1306",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bb,[e("summary",null,[t[3365]||(t[3365]=e("a",{id:"Reactant.MLIR.API.mlirOperationMoveAfter-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationMoveAfter-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationMoveAfter")],-1)),t[3366]||(t[3366]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3368]||(t[3368]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationMoveAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, other)</span></span></code></pre></div><p>Moves the given operation immediately after the other operation in its parent block. The given operation may be owned by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3367]||(t[3367]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1709-L1713",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nb,[e("summary",null,[t[3369]||(t[3369]=e("a",{id:"Reactant.MLIR.API.mlirOperationMoveBefore-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationMoveBefore-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationMoveBefore")],-1)),t[3370]||(t[3370]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3372]||(t[3372]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationMoveBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, other)</span></span></code></pre></div><p>Moves the given operation immediately before the other operation in its parent block. The given operation may be owner by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3371]||(t[3371]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1718-L1722",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gb,[e("summary",null,[t[3373]||(t[3373]=e("a",{id:"Reactant.MLIR.API.mlirOperationPrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationPrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationPrint")],-1)),t[3374]||(t[3374]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3376]||(t[3376]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, callback, userData)</span></span></code></pre></div><p>Prints an operation by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3375]||(t[3375]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1627-L1631",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zb,[e("summary",null,[t[3377]||(t[3377]=e("a",{id:"Reactant.MLIR.API.mlirOperationPrintWithFlags-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirOperationPrintWithFlags-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationPrintWithFlags")],-1)),t[3378]||(t[3378]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3380]||(t[3380]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationPrintWithFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, flags, callback, userData)</span></span></code></pre></div><p>Same as <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationPrint-Tuple{Any, Any, Any}"><code>mlirOperationPrint</code></a> but accepts flags controlling the printing behavior.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3379]||(t[3379]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1638-L1642",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wb,[e("summary",null,[t[3381]||(t[3381]=e("a",{id:"Reactant.MLIR.API.mlirOperationPrintWithState-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirOperationPrintWithState-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationPrintWithState")],-1)),t[3382]||(t[3382]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3384]||(t[3384]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationPrintWithState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, state, callback, userData)</span></span></code></pre></div><p>Same as <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationPrint-Tuple{Any, Any, Any}"><code>mlirOperationPrint</code></a> but accepts AsmState controlling the printing behavior as well as caching computed names.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3383]||(t[3383]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1652-L1656",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ub,[e("summary",null,[t[3385]||(t[3385]=e("a",{id:"Reactant.MLIR.API.mlirOperationRemoveAttributeByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationRemoveAttributeByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationRemoveAttributeByName")],-1)),t[3386]||(t[3386]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3388]||(t[3388]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationRemoveAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Removes an attribute by name. Returns false if the attribute was not found and true if removed. Deprecated, please use <code>mlirOperationRemoveInherentAttributeByName</code> or <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationRemoveDiscardableAttributeByName-Tuple{Any, Any}"><code>mlirOperationRemoveDiscardableAttributeByName</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3387]||(t[3387]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1616-L1620",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qb,[e("summary",null,[t[3389]||(t[3389]=e("a",{id:"Reactant.MLIR.API.mlirOperationRemoveDiscardableAttributeByName-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationRemoveDiscardableAttributeByName-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationRemoveDiscardableAttributeByName")],-1)),t[3390]||(t[3390]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3392]||(t[3392]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationRemoveDiscardableAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name)</span></span></code></pre></div><p>Removes a discardable attribute by name. Returns false if the attribute was not found and true if removed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3391]||(t[3391]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1563-L1567",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qb,[e("summary",null,[t[3393]||(t[3393]=e("a",{id:"Reactant.MLIR.API.mlirOperationRemoveFromParent-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationRemoveFromParent-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationRemoveFromParent")],-1)),t[3394]||(t[3394]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3396]||(t[3396]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationRemoveFromParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Removes the given operation from its parent block. The operation is not destroyed. The ownership of the operation is transferred to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3395]||(t[3395]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1293-L1297",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wb,[e("summary",null,[t[3397]||(t[3397]=e("a",{id:"Reactant.MLIR.API.mlirOperationSetAttributeByName-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationSetAttributeByName-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationSetAttributeByName")],-1)),t[3398]||(t[3398]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3400]||(t[3400]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationSetAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name, attr)</span></span></code></pre></div><p>Sets an attribute by name, replacing the existing if it exists or adding a new one otherwise. Deprecated, please use <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationSetInherentAttributeByName-Tuple{Any, Any, Any}"><code>mlirOperationSetInherentAttributeByName</code></a> or <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationSetDiscardableAttributeByName-Tuple{Any, Any, Any}"><code>mlirOperationSetDiscardableAttributeByName</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3399]||(t[3399]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1605-L1609",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zb,[e("summary",null,[t[3401]||(t[3401]=e("a",{id:"Reactant.MLIR.API.mlirOperationSetDiscardableAttributeByName-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationSetDiscardableAttributeByName-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationSetDiscardableAttributeByName")],-1)),t[3402]||(t[3402]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3404]||(t[3404]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationSetDiscardableAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name, attr)</span></span></code></pre></div><p>Sets a discardable attribute by name, replacing the existing if it exists or adding a new one otherwise. The new <code>attr</code> Attribute is not allowed to be null, use <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationRemoveDiscardableAttributeByName-Tuple{Any, Any}"><code>mlirOperationRemoveDiscardableAttributeByName</code></a> to remove an Attribute instead.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3403]||(t[3403]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1552-L1556",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hb,[e("summary",null,[t[3405]||(t[3405]=e("a",{id:"Reactant.MLIR.API.mlirOperationSetInherentAttributeByName-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationSetInherentAttributeByName-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationSetInherentAttributeByName")],-1)),t[3406]||(t[3406]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3408]||(t[3408]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationSetInherentAttributeByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, name, attr)</span></span></code></pre></div><p>Sets an inherent attribute by name, replacing the existing if it exists. This has no effect if &quot;name&quot; does not match an inherent attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3407]||(t[3407]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1510-L1514",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jb,[e("summary",null,[t[3409]||(t[3409]=e("a",{id:"Reactant.MLIR.API.mlirOperationSetOperand-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationSetOperand-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationSetOperand")],-1)),t[3410]||(t[3410]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3412]||(t[3412]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationSetOperand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos, newValue)</span></span></code></pre></div><p>Sets the <code>pos</code>-th operand of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3411]||(t[3411]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1419-L1423",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kb,[e("summary",null,[t[3413]||(t[3413]=e("a",{id:"Reactant.MLIR.API.mlirOperationSetOperands-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationSetOperands-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationSetOperands")],-1)),t[3414]||(t[3414]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3416]||(t[3416]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationSetOperands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, nOperands, operands)</span></span></code></pre></div><p>Replaces the operands of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3415]||(t[3415]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1430-L1434",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$b,[e("summary",null,[t[3417]||(t[3417]=e("a",{id:"Reactant.MLIR.API.mlirOperationSetSuccessor-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationSetSuccessor-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationSetSuccessor")],-1)),t[3418]||(t[3418]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3420]||(t[3420]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationSetSuccessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, pos, block)</span></span></code></pre></div><p>Set <code>pos</code>-th successor of the operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3419]||(t[3419]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1477-L1481",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xb,[e("summary",null,[t[3421]||(t[3421]=e("a",{id:"Reactant.MLIR.API.mlirOperationStateAddResults-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationStateAddResults-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationStateAddResults")],-1)),t[3422]||(t[3422]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3424]||(t[3424]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationStateAddResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, n, results)</span></span></code></pre></div><p>Adds a list of components to the operation state.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3423]||(t[3423]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1049-L1053",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yb,[e("summary",null,[t[3425]||(t[3425]=e("a",{id:"Reactant.MLIR.API.mlirOperationStateEnableResultTypeInference-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationStateEnableResultTypeInference-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationStateEnableResultTypeInference")],-1)),t[3426]||(t[3426]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3428]||(t[3428]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationStateEnableResultTypeInference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)</span></span></code></pre></div><p>Enables result type inference for the operation under construction. If enabled, then the caller must not have called <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationStateAddResults-Tuple{Any, Any, Any}"><code>mlirOperationStateAddResults</code></a>(). Note that if enabled, the <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationCreate-Tuple{Any}"><code>mlirOperationCreate</code></a>() call is failable: it will return a null operation on inference failure and will emit diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3427]||(t[3427]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1084-L1088",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ty,[e("summary",null,[t[3429]||(t[3429]=e("a",{id:"Reactant.MLIR.API.mlirOperationStateGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirOperationStateGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationStateGet")],-1)),t[3430]||(t[3430]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3432]||(t[3432]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationStateGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, loc)</span></span></code></pre></div><p>Constructs an operation state from a name and a location.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3431]||(t[3431]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1038-L1042",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ey,[e("summary",null,[t[3433]||(t[3433]=e("a",{id:"Reactant.MLIR.API.mlirOperationVerify-Tuple{Any}",href:"#Reactant.MLIR.API.mlirOperationVerify-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationVerify")],-1)),t[3434]||(t[3434]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3436]||(t[3436]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationVerify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op)</span></span></code></pre></div><p>Verify the operation and return true if it passes, false if it fails.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3435]||(t[3435]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1700-L1704",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sy,[e("summary",null,[t[3437]||(t[3437]=e("a",{id:"Reactant.MLIR.API.mlirOperationWalk-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirOperationWalk-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationWalk")],-1)),t[3438]||(t[3438]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3440]||(t[3440]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationWalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, callback, userData, walkOrder)</span></span></code></pre></div><p>Walks operation <code>op</code> in <code>walkOrder</code> and calls <code>callback</code> on that operation. <code>*userData</code> is passed to the callback as well and can be used to tunnel some context or other data into the callback.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3439]||(t[3439]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1754-L1758",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ay,[e("summary",null,[t[3441]||(t[3441]=e("a",{id:"Reactant.MLIR.API.mlirOperationWriteBytecode-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirOperationWriteBytecode-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationWriteBytecode")],-1)),t[3442]||(t[3442]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3444]||(t[3444]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationWriteBytecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, callback, userData)</span></span></code></pre></div><p>Same as <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationPrint-Tuple{Any, Any, Any}"><code>mlirOperationPrint</code></a> but writing the bytecode format.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3443]||(t[3443]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1666-L1670",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",iy,[e("summary",null,[t[3445]||(t[3445]=e("a",{id:"Reactant.MLIR.API.mlirOperationWriteBytecodeWithConfig-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirOperationWriteBytecodeWithConfig-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirOperationWriteBytecodeWithConfig")],-1)),t[3446]||(t[3446]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3448]||(t[3448]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirOperationWriteBytecodeWithConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op, config, callback, userData)</span></span></code></pre></div><p>Same as <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirOperationWriteBytecode-Tuple{Any, Any, Any}"><code>mlirOperationWriteBytecode</code></a> but with writer config and returns failure only if desired bytecode could not be honored.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3447]||(t[3447]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1677-L1681",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ly,[e("summary",null,[t[3449]||(t[3449]=e("a",{id:"Reactant.MLIR.API.mlirParsePassPipeline-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirParsePassPipeline-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirParsePassPipeline")],-1)),t[3450]||(t[3450]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3452]||(t[3452]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirParsePassPipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, pipeline, callback, userData)</span></span></code></pre></div><p>Parse a textual MLIR pass pipeline and assign it to the provided OpPassManager. If parsing fails an error message is reported using the provided callback.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3451]||(t[3451]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8696-L8700",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ny,[e("summary",null,[t[3453]||(t[3453]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerAddOwnedPass-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirPassManagerAddOwnedPass-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerAddOwnedPass")],-1)),t[3454]||(t[3454]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3456]||(t[3456]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerAddOwnedPass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, pass)</span></span></code></pre></div><p>Add a pass and transfer ownership to the provided top-level mlirPassManager. If the pass is not a generic operation pass or a ModulePass, a new OpPassManager is implicitly nested under the provided PassManager.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3455]||(t[3455]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8649-L8653",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ry,[e("summary",null,[t[3457]||(t[3457]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirPassManagerCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerCreate")],-1)),t[3458]||(t[3458]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3460]||(t[3460]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Create a new top-level PassManager with the default anchor.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3459]||(t[3459]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8529-L8533",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",oy,[e("summary",null,[t[3461]||(t[3461]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerCreateOnOperation-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirPassManagerCreateOnOperation-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerCreateOnOperation")],-1)),t[3462]||(t[3462]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3464]||(t[3464]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerCreateOnOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, anchorOp)</span></span></code></pre></div><p>Create a new top-level PassManager anchored on <code>anchorOp</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3463]||(t[3463]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8538-L8542",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",py,[e("summary",null,[t[3465]||(t[3465]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirPassManagerDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerDestroy")],-1)),t[3466]||(t[3466]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3468]||(t[3468]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager)</span></span></code></pre></div><p>Destroy the provided PassManager.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3467]||(t[3467]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8549-L8553",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dy,[e("summary",null,[t[3469]||(t[3469]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerEnableIRPrinting-NTuple{8, Any}",href:"#Reactant.MLIR.API.mlirPassManagerEnableIRPrinting-NTuple{8, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerEnableIRPrinting")],-1)),t[3470]||(t[3470]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3472]||(t[3472]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerEnableIRPrinting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, printBeforeAll, printAfterAll, printModuleScope, printAfterOnlyOnChange, printAfterOnlyOnFailure, flags, treePrintingPath)</span></span></code></pre></div><p>Enable IR printing. The treePrintingPath argument is an optional path to a directory where the dumps will be produced. If it isn&#39;t provided then dumps are produced to stderr.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3471]||(t[3471]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8589-L8593",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uy,[e("summary",null,[t[3473]||(t[3473]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerEnableVerifier-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirPassManagerEnableVerifier-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerEnableVerifier")],-1)),t[3474]||(t[3474]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3476]||(t[3476]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerEnableVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, enable)</span></span></code></pre></div><p>Enable / disable verify-each.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3475]||(t[3475]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8616-L8620",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cy,[e("summary",null,[t[3477]||(t[3477]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerGetAsOpPassManager-Tuple{Any}",href:"#Reactant.MLIR.API.mlirPassManagerGetAsOpPassManager-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerGetAsOpPassManager")],-1)),t[3478]||(t[3478]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3480]||(t[3480]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerGetAsOpPassManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager)</span></span></code></pre></div><p>Cast a top-level PassManager to a generic OpPassManager.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3479]||(t[3479]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8567-L8571",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hy,[e("summary",null,[t[3481]||(t[3481]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerGetNestedUnder-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirPassManagerGetNestedUnder-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerGetNestedUnder")],-1)),t[3482]||(t[3482]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3484]||(t[3484]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerGetNestedUnder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, operationName)</span></span></code></pre></div><p>Nest an OpPassManager under the top-level PassManager, the nested passmanager will only run on operations matching the provided name. The returned OpPassManager will be destroyed when the parent is destroyed. To further nest more OpPassManager under the newly returned one, see <code>mlirOpPassManagerNest</code> below.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3483]||(t[3483]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8627-L8631",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",by,[e("summary",null,[t[3485]||(t[3485]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirPassManagerIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerIsNull")],-1)),t[3486]||(t[3486]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3488]||(t[3488]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager)</span></span></code></pre></div><p>Checks if a PassManager is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3487]||(t[3487]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8558-L8562",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yy,[e("summary",null,[t[3489]||(t[3489]=e("a",{id:"Reactant.MLIR.API.mlirPassManagerRunOnOp-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirPassManagerRunOnOp-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPassManagerRunOnOp")],-1)),t[3490]||(t[3490]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3492]||(t[3492]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPassManagerRunOnOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, op)</span></span></code></pre></div><p>Run the provided <code>passManager</code> on the given <code>op</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3491]||(t[3491]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8578-L8582",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gy,[e("summary",null,[t[3493]||(t[3493]=e("a",{id:"Reactant.MLIR.API.mlirPrintPassPipeline-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirPrintPassPipeline-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirPrintPassPipeline")],-1)),t[3494]||(t[3494]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3496]||(t[3496]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirPrintPassPipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passManager, callback, userData)</span></span></code></pre></div><p>Print a textual MLIR pass pipeline by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3495]||(t[3495]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8685-L8689",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",my,[e("summary",null,[t[3497]||(t[3497]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeCastExpressedToStorageType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeCastExpressedToStorageType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeCastExpressedToStorageType")],-1)),t[3498]||(t[3498]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3500]||(t[3500]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeCastExpressedToStorageType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, candidate)</span></span></code></pre></div><p>Casts from a type based on the expressed type of the given quantized type to equivalent type based on storage type of the same quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3499]||(t[3499]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7622-L7626",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ky,[e("summary",null,[t[3501]||(t[3501]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeCastFromExpressedType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeCastFromExpressedType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeCastFromExpressedType")],-1)),t[3502]||(t[3502]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3504]||(t[3504]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeCastFromExpressedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, candidate)</span></span></code></pre></div><p>Casts from a type based on the expressed type of the given type to a corresponding type based on the given type. Returns a null type if the cast is not valid.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3503]||(t[3503]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7602-L7606",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fy,[e("summary",null,[t[3505]||(t[3505]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeCastFromStorageType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeCastFromStorageType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeCastFromStorageType")],-1)),t[3506]||(t[3506]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3508]||(t[3508]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeCastFromStorageType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, candidate)</span></span></code></pre></div><p>Casts from a type based on the storage type of the given type to a corresponding type based on the given type. Returns a null type if the cast is not valid.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3507]||(t[3507]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7582-L7586",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ry,[e("summary",null,[t[3509]||(t[3509]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeCastToExpressedType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeCastToExpressedType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeCastToExpressedType")],-1)),t[3510]||(t[3510]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3512]||(t[3512]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeCastToExpressedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Casts from a type based on a quantized type to a corresponding typed based on the expressed type. Returns a null type if the cast is not valid.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3511]||(t[3511]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7613-L7617",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Iy,[e("summary",null,[t[3513]||(t[3513]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeCastToStorageType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeCastToStorageType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeCastToStorageType")],-1)),t[3514]||(t[3514]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3516]||(t[3516]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeCastToStorageType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Casts from a type based on a quantized type to a corresponding typed based on the storage type. Returns a null type if the cast is not valid.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3515]||(t[3515]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7593-L7597",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ty,[e("summary",null,[t[3517]||(t[3517]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetDefaultMaximumForInteger-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetDefaultMaximumForInteger-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetDefaultMaximumForInteger")],-1)),t[3518]||(t[3518]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3520]||(t[3520]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetDefaultMaximumForInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isSigned, integralWidth)</span></span></code></pre></div><p>Returns the maximum possible value stored by a quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3519]||(t[3519]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7488-L7492",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ay,[e("summary",null,[t[3521]||(t[3521]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetDefaultMinimumForInteger-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetDefaultMinimumForInteger-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetDefaultMinimumForInteger")],-1)),t[3522]||(t[3522]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3524]||(t[3524]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetDefaultMinimumForInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isSigned, integralWidth)</span></span></code></pre></div><p>Returns the minimum possible value stored by a quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3523]||(t[3523]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7477-L7481",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jy,[e("summary",null,[t[3525]||(t[3525]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetExpressedType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetExpressedType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetExpressedType")],-1)),t[3526]||(t[3526]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3528]||(t[3528]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetExpressedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the original type approximated by the given quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3527]||(t[3527]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7499-L7503",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_y,[e("summary",null,[t[3529]||(t[3529]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetFlags-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetFlags-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetFlags")],-1)),t[3530]||(t[3530]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3532]||(t[3532]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the flags associated with the given quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3531]||(t[3531]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7508-L7512",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",My,[e("summary",null,[t[3533]||(t[3533]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetQuantizedElementType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetQuantizedElementType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetQuantizedElementType")],-1)),t[3534]||(t[3534]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3536]||(t[3536]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetQuantizedElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the element type of the given quantized type as another quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3535]||(t[3535]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7573-L7577",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ly,[e("summary",null,[t[3537]||(t[3537]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetSignedFlag-Tuple{}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetSignedFlag-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetSignedFlag")],-1)),t[3538]||(t[3538]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3540]||(t[3540]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetSignedFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the bit flag used to indicate signedness of a quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3539]||(t[3539]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7468-L7472",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ey,[e("summary",null,[t[3541]||(t[3541]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetStorageType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetStorageType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetStorageType")],-1)),t[3542]||(t[3542]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3544]||(t[3544]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetStorageType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the underlying type used to store the values.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3543]||(t[3543]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7526-L7530",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cy,[e("summary",null,[t[3545]||(t[3545]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeIntegralWidth-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeIntegralWidth-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeIntegralWidth")],-1)),t[3546]||(t[3546]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3548]||(t[3548]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetStorageTypeIntegralWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the integral bitwidth that the storage type of the given quantized type can represent exactly.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3547]||(t[3547]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7553-L7557",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vy,[e("summary",null,[t[3549]||(t[3549]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeMax-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeMax-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeMax")],-1)),t[3550]||(t[3550]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3552]||(t[3552]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetStorageTypeMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the maximum value that the storage type of the given quantized type can take.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3551]||(t[3551]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7544-L7548",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Py,[e("summary",null,[t[3553]||(t[3553]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeMin-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeMin-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeGetStorageTypeMin")],-1)),t[3554]||(t[3554]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3556]||(t[3556]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeGetStorageTypeMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the minimum value that the storage type of the given quantized type can take.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3555]||(t[3555]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7535-L7539",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xy,[e("summary",null,[t[3557]||(t[3557]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeIsCompatibleExpressedType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeIsCompatibleExpressedType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeIsCompatibleExpressedType")],-1)),t[3558]||(t[3558]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3560]||(t[3560]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeIsCompatibleExpressedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, candidate)</span></span></code></pre></div><p>Returns <code>true</code> if the <code>candidate</code> type is compatible with the given quantized <code>type</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3559]||(t[3559]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7562-L7566",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sy,[e("summary",null,[t[3561]||(t[3561]=e("a",{id:"Reactant.MLIR.API.mlirQuantizedTypeIsSigned-Tuple{Any}",href:"#Reactant.MLIR.API.mlirQuantizedTypeIsSigned-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirQuantizedTypeIsSigned")],-1)),t[3562]||(t[3562]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3564]||(t[3564]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirQuantizedTypeIsSigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is signed, <code>false</code> otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3563]||(t[3563]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7517-L7521",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dy,[e("summary",null,[t[3565]||(t[3565]=e("a",{id:"Reactant.MLIR.API.mlirRankedTensorTypeGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirRankedTensorTypeGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRankedTensorTypeGet")],-1)),t[3566]||(t[3566]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3568]||(t[3568]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRankedTensorTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rank, shape, elementType, encoding)</span></span></code></pre></div><p>Creates a tensor type of a fixed rank with the given shape, element type, and optional encoding in the same context as the element type. The type is owned by the context. Tensor types without any specific encoding field should assign <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirAttributeGetNull-Tuple{}"><code>Reactant.MLIR.API.mlirAttributeGetNull</code></a>() to this parameter.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3567]||(t[3567]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5727-L5731",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fy,[e("summary",null,[t[3569]||(t[3569]=e("a",{id:"Reactant.MLIR.API.mlirRankedTensorTypeGetChecked-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirRankedTensorTypeGetChecked-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRankedTensorTypeGetChecked")],-1)),t[3570]||(t[3570]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3572]||(t[3572]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRankedTensorTypeGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, rank, shape, elementType, encoding)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirRankedTensorTypeGet-NTuple{4, Any}"><code>mlirRankedTensorTypeGet</code></a>&quot; but returns a nullptr wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> on illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3571]||(t[3571]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5738-L5742",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vy,[e("summary",null,[t[3573]||(t[3573]=e("a",{id:"Reactant.MLIR.API.mlirRankedTensorTypeGetEncoding-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRankedTensorTypeGetEncoding-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRankedTensorTypeGetEncoding")],-1)),t[3574]||(t[3574]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3576]||(t[3576]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRankedTensorTypeGetEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the &#39;encoding&#39; attribute from the ranked tensor type, returning a null attribute if none.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3575]||(t[3575]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5753-L5757",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Oy,[e("summary",null,[t[3577]||(t[3577]=e("a",{id:"Reactant.MLIR.API.mlirRankedTensorTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirRankedTensorTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRankedTensorTypeGetTypeID")],-1)),t[3578]||(t[3578]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3580]||(t[3580]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRankedTensorTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an RankedTensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3579]||(t[3579]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5691-L5695",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",By,[e("summary",null,[t[3581]||(t[3581]=e("a",{id:"Reactant.MLIR.API.mlirRegionAppendOwnedBlock-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRegionAppendOwnedBlock-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionAppendOwnedBlock")],-1)),t[3582]||(t[3582]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3584]||(t[3584]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionAppendOwnedBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, block)</span></span></code></pre></div><p>Takes a block owned by the caller and appends it to the given region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3583]||(t[3583]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1813-L1817",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ny,[e("summary",null,[t[3585]||(t[3585]=e("a",{id:"Reactant.MLIR.API.mlirRegionCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirRegionCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionCreate")],-1)),t[3586]||(t[3586]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3588]||(t[3588]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a new empty region and transfers ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3587]||(t[3587]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1768-L1772",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gy,[e("summary",null,[t[3589]||(t[3589]=e("a",{id:"Reactant.MLIR.API.mlirRegionDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRegionDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionDestroy")],-1)),t[3590]||(t[3590]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3592]||(t[3592]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region)</span></span></code></pre></div><p>Takes a region owned by the caller and destroys it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3591]||(t[3591]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1777-L1781",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zy,[e("summary",null,[t[3593]||(t[3593]=e("a",{id:"Reactant.MLIR.API.mlirRegionEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRegionEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionEqual")],-1)),t[3594]||(t[3594]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3596]||(t[3596]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, other)</span></span></code></pre></div><p>Checks whether two region handles point to the same region. This does not perform deep comparison.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3595]||(t[3595]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1795-L1799",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wy,[e("summary",null,[t[3597]||(t[3597]=e("a",{id:"Reactant.MLIR.API.mlirRegionGetFirstBlock-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRegionGetFirstBlock-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionGetFirstBlock")],-1)),t[3598]||(t[3598]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3600]||(t[3600]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionGetFirstBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region)</span></span></code></pre></div><p>Gets the first block in the region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3599]||(t[3599]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1804-L1808",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uy,[e("summary",null,[t[3601]||(t[3601]=e("a",{id:"Reactant.MLIR.API.mlirRegionGetNextInOperation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRegionGetNextInOperation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionGetNextInOperation")],-1)),t[3602]||(t[3602]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3604]||(t[3604]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionGetNextInOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region)</span></span></code></pre></div><p>Returns the region immediately following the given region in its parent operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3603]||(t[3603]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1864-L1868",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qy,[e("summary",null,[t[3605]||(t[3605]=e("a",{id:"Reactant.MLIR.API.mlirRegionInsertOwnedBlock-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRegionInsertOwnedBlock-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionInsertOwnedBlock")],-1)),t[3606]||(t[3606]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3608]||(t[3608]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionInsertOwnedBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, pos, block)</span></span></code></pre></div><p>Takes a block owned by the caller and inserts it at <code>pos</code> to the given region. This is an expensive operation that linearly scans the region, prefer insertAfter/Before instead.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3607]||(t[3607]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1822-L1826",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qy,[e("summary",null,[t[3609]||(t[3609]=e("a",{id:"Reactant.MLIR.API.mlirRegionInsertOwnedBlockAfter-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRegionInsertOwnedBlockAfter-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionInsertOwnedBlockAfter")],-1)),t[3610]||(t[3610]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3612]||(t[3612]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionInsertOwnedBlockAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, reference, block)</span></span></code></pre></div><p>Takes a block owned by the caller and inserts it after the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, prepends the block to the region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3611]||(t[3611]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1833-L1837",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wy,[e("summary",null,[t[3613]||(t[3613]=e("a",{id:"Reactant.MLIR.API.mlirRegionInsertOwnedBlockBefore-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRegionInsertOwnedBlockBefore-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionInsertOwnedBlockBefore")],-1)),t[3614]||(t[3614]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3616]||(t[3616]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionInsertOwnedBlockBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region, reference, block)</span></span></code></pre></div><p>Takes a block owned by the caller and inserts it before the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, appends the block to the region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3615]||(t[3615]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1844-L1848",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zy,[e("summary",null,[t[3617]||(t[3617]=e("a",{id:"Reactant.MLIR.API.mlirRegionIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRegionIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionIsNull")],-1)),t[3618]||(t[3618]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3620]||(t[3620]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(region)</span></span></code></pre></div><p>Checks whether a region is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3619]||(t[3619]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1786-L1790",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hy,[e("summary",null,[t[3621]||(t[3621]=e("a",{id:"Reactant.MLIR.API.mlirRegionTakeBody-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRegionTakeBody-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegionTakeBody")],-1)),t[3622]||(t[3622]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3624]||(t[3624]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegionTakeBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, source)</span></span></code></pre></div><p>Moves the entire content of the source region to the target region.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3623]||(t[3623]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L1873-L1877",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jy,[e("summary",null,[t[3625]||(t[3625]=e("a",{id:"Reactant.MLIR.API.mlirRegisterAllDialects-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRegisterAllDialects-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegisterAllDialects")],-1)),t[3626]||(t[3626]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3628]||(t[3628]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegisterAllDialects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry)</span></span></code></pre></div><p>Appends all upstream dialects and extensions to the dialect registry.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3627]||(t[3627]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8769-L8773",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ky,[e("summary",null,[t[3629]||(t[3629]=e("a",{id:"Reactant.MLIR.API.mlirRegisterAllLLVMTranslations-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRegisterAllLLVMTranslations-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegisterAllLLVMTranslations")],-1)),t[3630]||(t[3630]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3632]||(t[3632]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegisterAllLLVMTranslations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span></code></pre></div><p>Register all translations to LLVM IR for dialects that can support it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3631]||(t[3631]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8778-L8782",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$y,[e("summary",null,[t[3633]||(t[3633]=e("a",{id:"Reactant.MLIR.API.mlirRegisterAllPasses-Tuple{}",href:"#Reactant.MLIR.API.mlirRegisterAllPasses-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRegisterAllPasses")],-1)),t[3634]||(t[3634]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3636]||(t[3636]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRegisterAllPasses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Register all compiler passes of MLIR.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3635]||(t[3635]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8787-L8791",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xy,[e("summary",null,[t[3637]||(t[3637]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseCancelOpModification-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseCancelOpModification-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseCancelOpModification")],-1)),t[3638]||(t[3638]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3640]||(t[3640]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseCancelOpModification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>This method cancels a pending in-place modification. This can only be called on operations that were provided to a call to <code>startOpModification</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3639]||(t[3639]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9111-L9115",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yy,[e("summary",null,[t[3641]||(t[3641]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseClearInsertionPoint-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseClearInsertionPoint-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseClearInsertionPoint")],-1)),t[3642]||(t[3642]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3644]||(t[3644]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseClearInsertionPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter)</span></span></code></pre></div><p>Reset the insertion point to no location. Creating an operation without a set insertion point is an error, but this can still be useful when the current insertion point a builder refers to is being removed.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3643]||(t[3643]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8821-L8825",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tg,[e("summary",null,[t[3645]||(t[3645]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseClone-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseClone-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseClone")],-1)),t[3646]||(t[3646]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3648]||(t[3648]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>Creates a deep copy of the specified operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3647]||(t[3647]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8931-L8935",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",eg,[e("summary",null,[t[3649]||(t[3649]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseCloneRegionBefore-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseCloneRegionBefore-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseCloneRegionBefore")],-1)),t[3650]||(t[3650]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3652]||(t[3652]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseCloneRegionBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, region, before)</span></span></code></pre></div><p>Clone the blocks that belong to &quot;region&quot; before the given position in another region &quot;parent&quot;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3651]||(t[3651]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8953-L8957",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sg,[e("summary",null,[t[3653]||(t[3653]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseCloneWithoutRegions-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseCloneWithoutRegions-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseCloneWithoutRegions")],-1)),t[3654]||(t[3654]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3656]||(t[3656]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseCloneWithoutRegions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>Creates a deep copy of this operation but keep the operation regions empty.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3655]||(t[3655]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8942-L8946",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ag,[e("summary",null,[t[3657]||(t[3657]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseCreateBlockBefore-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseCreateBlockBefore-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseCreateBlockBefore")],-1)),t[3658]||(t[3658]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3660]||(t[3660]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseCreateBlockBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, insertBefore, nArgTypes, argTypes, locations)</span></span></code></pre></div><p>Add new block with &#39;argTypes&#39; arguments and set the insertion point to the end of it. The block is placed before &#39;insertBefore&#39;. <code>locs</code> contains the locations of the inserted arguments, and should match the size of <code>argTypes</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3659]||(t[3659]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8903-L8907",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ig,[e("summary",null,[t[3661]||(t[3661]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseEraseBlock-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseEraseBlock-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseEraseBlock")],-1)),t[3662]||(t[3662]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3664]||(t[3664]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseEraseBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, block)</span></span></code></pre></div><p>Erases a block along with all operations inside it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3663]||(t[3663]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9011-L9015",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lg,[e("summary",null,[t[3665]||(t[3665]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseEraseOp-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseEraseOp-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseEraseOp")],-1)),t[3666]||(t[3666]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3668]||(t[3668]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseEraseOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>Erases an operation that is known to have no uses.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3667]||(t[3667]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9000-L9004",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ng,[e("summary",null,[t[3669]||(t[3669]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseFinalizeOpModification-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseFinalizeOpModification-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseFinalizeOpModification")],-1)),t[3670]||(t[3670]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3672]||(t[3672]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseFinalizeOpModification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>This method is used to signal the end of an in-place modification of the given operation. This can only be called on operations that were provided to a call to <code>startOpModification</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3671]||(t[3671]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9100-L9104",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rg,[e("summary",null,[t[3673]||(t[3673]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseGetBlock-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseGetBlock-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseGetBlock")],-1)),t[3674]||(t[3674]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3676]||(t[3676]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseGetBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter)</span></span></code></pre></div><p>Returns the current block of the rewriter.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3675]||(t[3675]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8894-L8898",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",og,[e("summary",null,[t[3677]||(t[3677]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseGetContext")],-1)),t[3678]||(t[3678]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3680]||(t[3680]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter)</span></span></code></pre></div><p>Get the MLIR context referenced by the rewriter.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3679]||(t[3679]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8812-L8816",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pg,[e("summary",null,[t[3681]||(t[3681]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseGetInsertionBlock-Tuple{Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseGetInsertionBlock-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseGetInsertionBlock")],-1)),t[3682]||(t[3682]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3684]||(t[3684]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseGetInsertionBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter)</span></span></code></pre></div><p>Return the block the current insertion point belongs to. Note that the insertion point is not necessarily the end of the block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3683]||(t[3683]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8885-L8889",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dg,[e("summary",null,[t[3685]||(t[3685]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseInlineBlockBefore-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseInlineBlockBefore-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseInlineBlockBefore")],-1)),t[3686]||(t[3686]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3688]||(t[3688]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseInlineBlockBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, source, op, nArgValues, argValues)</span></span></code></pre></div><p>Inline the operations of block &#39;source&#39; before the operation &#39;op&#39;. The source block will be deleted and must have no uses. &#39;argValues&#39; is used to replace the block arguments of &#39;source&#39;</p><p>The source block must have no successors. Otherwise, the resulting IR would have unreachable operations.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3687]||(t[3687]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9022-L9028",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ug,[e("summary",null,[t[3689]||(t[3689]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseInlineRegionBefore-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseInlineRegionBefore-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseInlineRegionBefore")],-1)),t[3690]||(t[3690]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3692]||(t[3692]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseInlineRegionBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, region, before)</span></span></code></pre></div><p>Move the blocks that belong to &quot;region&quot; before the given position in another region &quot;parent&quot;. The two regions must be different. The caller is responsible for creating or updating the operation transferring flow of control to the region and passing it the correct block arguments.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3691]||(t[3691]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8964-L8968",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cg,[e("summary",null,[t[3693]||(t[3693]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseInsert-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseInsert-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseInsert")],-1)),t[3694]||(t[3694]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3696]||(t[3696]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>Insert the given operation at the current insertion point and return it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3695]||(t[3695]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8920-L8924",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hg,[e("summary",null,[t[3697]||(t[3697]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseMergeBlocks-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseMergeBlocks-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseMergeBlocks")],-1)),t[3698]||(t[3698]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3700]||(t[3700]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseMergeBlocks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, source, dest, nArgValues, argValues)</span></span></code></pre></div><p>Inline the operations of block &#39;source&#39; into the end of block &#39;dest&#39;. The source block will be deleted and must have no uses. &#39;argValues&#39; is used to replace the block arguments of &#39;source&#39;</p><p>The dest block must have no successors. Otherwise, the resulting IR would have unreachable operation.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3699]||(t[3699]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9039-L9045",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bg,[e("summary",null,[t[3701]||(t[3701]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseMoveBlockBefore-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseMoveBlockBefore-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseMoveBlockBefore")],-1)),t[3702]||(t[3702]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3704]||(t[3704]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseMoveBlockBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, block, existingBlock)</span></span></code></pre></div><p>Unlink this block and insert it right before <code>existingBlock</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3703]||(t[3703]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9078-L9082",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yg,[e("summary",null,[t[3705]||(t[3705]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseMoveOpAfter-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseMoveOpAfter-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseMoveOpAfter")],-1)),t[3706]||(t[3706]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3708]||(t[3708]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseMoveOpAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op, existingOp)</span></span></code></pre></div><p>Unlink this operation from its current block and insert it right after <code>existingOp</code> which may be in the same or another block in the same function.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3707]||(t[3707]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9067-L9071",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gg,[e("summary",null,[t[3709]||(t[3709]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseMoveOpBefore-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseMoveOpBefore-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseMoveOpBefore")],-1)),t[3710]||(t[3710]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3712]||(t[3712]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseMoveOpBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op, existingOp)</span></span></code></pre></div><p>Unlink this operation from its current block and insert it right before <code>existingOp</code> which may be in the same or another block in the same function.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3711]||(t[3711]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9056-L9060",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mg,[e("summary",null,[t[3713]||(t[3713]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceAllOpUsesWithOperation-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceAllOpUsesWithOperation-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceAllOpUsesWithOperation")],-1)),t[3714]||(t[3714]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3716]||(t[3716]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceAllOpUsesWithOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, from, to)</span></span></code></pre></div><p>Find uses of <code>from</code> and replace them with <code>to</code>. Also notify the listener about every in-place op modification (for every use that was replaced) and that the <code>from</code> operation is about to be replaced.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3715]||(t[3715]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9158-L9162",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kg,[e("summary",null,[t[3717]||(t[3717]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceAllOpUsesWithValueRange-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceAllOpUsesWithValueRange-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceAllOpUsesWithValueRange")],-1)),t[3718]||(t[3718]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3720]||(t[3720]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceAllOpUsesWithValueRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, from, nTo, to)</span></span></code></pre></div><p>Find uses of <code>from</code> and replace them with <code>to</code>. Also notify the listener about every in-place op modification (for every use that was replaced) and that the <code>from</code> operation is about to be replaced.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3719]||(t[3719]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9147-L9151",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fg,[e("summary",null,[t[3721]||(t[3721]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceAllUsesExcept-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceAllUsesExcept-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceAllUsesExcept")],-1)),t[3722]||(t[3722]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3724]||(t[3724]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceAllUsesExcept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, from, to, exceptedUser)</span></span></code></pre></div><p>Find uses of <code>from</code> and replace them with <code>to</code> except if the user is <code>exceptedUser</code>. Also notify the listener about every in-place op modification (for every use that was replaced).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3723]||(t[3723]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9186-L9190",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rg,[e("summary",null,[t[3725]||(t[3725]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceAllUsesWith-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceAllUsesWith-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceAllUsesWith")],-1)),t[3726]||(t[3726]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3728]||(t[3728]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceAllUsesWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, from, to)</span></span></code></pre></div><p>Find uses of <code>from</code> and replace them with <code>to</code>. Also notify the listener about every in-place op modification (for every use that was replaced).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3727]||(t[3727]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9122-L9126",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ig,[e("summary",null,[t[3729]||(t[3729]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceAllValueRangeUsesWith-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceAllValueRangeUsesWith-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceAllValueRangeUsesWith")],-1)),t[3730]||(t[3730]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3732]||(t[3732]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceAllValueRangeUsesWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, nValues, from, to)</span></span></code></pre></div><p>Find uses of <code>from</code> and replace them with <code>to</code>. Also notify the listener about every in-place op modification (for every use that was replaced).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3731]||(t[3731]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9133-L9137",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tg,[e("summary",null,[t[3733]||(t[3733]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceOpUsesWithinBlock-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceOpUsesWithinBlock-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceOpUsesWithinBlock")],-1)),t[3734]||(t[3734]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3736]||(t[3736]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceOpUsesWithinBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op, nNewValues, newValues, block)</span></span></code></pre></div><p>Find uses of <code>from</code> within <code>block</code> and replace them with <code>to</code>. Also notify the listener about every in-place op modification (for every use that was replaced). The optional <code>allUsesReplaced</code> flag is set to &quot;true&quot; if all uses were replaced.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3735]||(t[3735]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9169-L9173",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ag,[e("summary",null,[t[3737]||(t[3737]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceOpWithOperation-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceOpWithOperation-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceOpWithOperation")],-1)),t[3738]||(t[3738]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3740]||(t[3740]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceOpWithOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op, newOp)</span></span></code></pre></div><p>Replace the results of the given (original) operation with the specified new op (replacement). The result types of the two ops must match. The original op is erased.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3739]||(t[3739]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8989-L8993",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jg,[e("summary",null,[t[3741]||(t[3741]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseReplaceOpWithValues-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseReplaceOpWithValues-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseReplaceOpWithValues")],-1)),t[3742]||(t[3742]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3744]||(t[3744]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseReplaceOpWithValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op, nValues, values)</span></span></code></pre></div><p>Replace the results of the given (original) operation with the specified list of values (replacements). The result types of the given op and the replacements must match. The original op is erased.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3743]||(t[3743]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8975-L8979",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_g,[e("summary",null,[t[3745]||(t[3745]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointAfter-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointAfter-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointAfter")],-1)),t[3746]||(t[3746]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3748]||(t[3748]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseSetInsertionPointAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>Sets the insertion point to the node after the specified operation, which will cause subsequent insertions to go right after it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3747]||(t[3747]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8841-L8845",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mg,[e("summary",null,[t[3749]||(t[3749]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointAfterValue-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointAfterValue-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointAfterValue")],-1)),t[3750]||(t[3750]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3752]||(t[3752]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseSetInsertionPointAfterValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, value)</span></span></code></pre></div><p>Sets the insertion point to the node after the specified value. If value has a defining operation, sets the insertion point to the node after such defining operation. This will cause subsequent insertions to go right after it. Otherwise, value is a BlockArgument. Sets the insertion point to the start of its block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3751]||(t[3751]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8852-L8856",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lg,[e("summary",null,[t[3753]||(t[3753]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointBefore-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointBefore-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointBefore")],-1)),t[3754]||(t[3754]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3756]||(t[3756]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseSetInsertionPointBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>Sets the insertion point to the specified operation, which will cause subsequent insertions to go right before it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3755]||(t[3755]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8830-L8834",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Eg,[e("summary",null,[t[3757]||(t[3757]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointToEnd-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointToEnd-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointToEnd")],-1)),t[3758]||(t[3758]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3760]||(t[3760]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseSetInsertionPointToEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, block)</span></span></code></pre></div><p>Sets the insertion point to the end of the specified block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3759]||(t[3759]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8874-L8878",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cg,[e("summary",null,[t[3761]||(t[3761]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointToStart-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointToStart-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseSetInsertionPointToStart")],-1)),t[3762]||(t[3762]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3764]||(t[3764]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseSetInsertionPointToStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, block)</span></span></code></pre></div><p>Sets the insertion point to the start of the specified block.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3763]||(t[3763]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8863-L8867",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vg,[e("summary",null,[t[3765]||(t[3765]=e("a",{id:"Reactant.MLIR.API.mlirRewriterBaseStartOpModification-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirRewriterBaseStartOpModification-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirRewriterBaseStartOpModification")],-1)),t[3766]||(t[3766]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3768]||(t[3768]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirRewriterBaseStartOpModification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rewriter, op)</span></span></code></pre></div><p>This method is used to notify the rewriter that an in-place operation modification is about to happen. A call to this function <em>must</em> be followed by a call to either <code>finalizeOpModification</code> or <code>cancelOpModification</code>. This is a minor efficiency win (it avoids creating a new operation and removing the old one) but also often allows simpler code in the client.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3767]||(t[3767]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9089-L9093",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pg,[e("summary",null,[t[3769]||(t[3769]=e("a",{id:"Reactant.MLIR.API.mlirSetGlobalDebugType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSetGlobalDebugType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSetGlobalDebugType")],-1)),t[3770]||(t[3770]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3772]||(t[3772]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSetGlobalDebugType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Sets the current debug type, similarly to <code>-debug-only=type</code> in the command-line tools. Note that global debug should be enabled for any output to be produced.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3771]||(t[3771]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6125-L6129",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xg,[e("summary",null,[t[3773]||(t[3773]=e("a",{id:"Reactant.MLIR.API.mlirSetGlobalDebugTypes-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSetGlobalDebugTypes-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSetGlobalDebugTypes")],-1)),t[3774]||(t[3774]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3776]||(t[3776]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSetGlobalDebugTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(types, n)</span></span></code></pre></div><p>Sets multiple current debug types, similarly to `-debug-only=type1,type2&quot; in the command-line tools. Note that global debug should be enabled for any output to be produced.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3775]||(t[3775]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6134-L6138",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sg,[e("summary",null,[t[3777]||(t[3777]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeGetDimSize-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirShapedTypeGetDimSize-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeGetDimSize")],-1)),t[3778]||(t[3778]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3780]||(t[3780]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeGetDimSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, dim)</span></span></code></pre></div><p>Returns the dim-th dimension of the given ranked shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3779]||(t[3779]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5553-L5557",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dg,[e("summary",null,[t[3781]||(t[3781]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeGetDynamicSize-Tuple{}",href:"#Reactant.MLIR.API.mlirShapedTypeGetDynamicSize-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeGetDynamicSize")],-1)),t[3782]||(t[3782]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3784]||(t[3784]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeGetDynamicSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the value indicating a dynamic size in a shaped type. Prefer <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirShapedTypeIsDynamicSize-Tuple{Any}"><code>mlirShapedTypeIsDynamicSize</code></a> to direct comparisons with this value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3783]||(t[3783]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5571-L5575",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fg,[e("summary",null,[t[3785]||(t[3785]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeGetDynamicStrideOrOffset-Tuple{}",href:"#Reactant.MLIR.API.mlirShapedTypeGetDynamicStrideOrOffset-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeGetDynamicStrideOrOffset")],-1)),t[3786]||(t[3786]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3788]||(t[3788]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeGetDynamicStrideOrOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the value indicating a dynamic stride or offset in a shaped type. Prefer <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirShapedTypeGetDynamicStrideOrOffset-Tuple{}"><code>mlirShapedTypeGetDynamicStrideOrOffset</code></a> to direct comparisons with this value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3787]||(t[3787]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5589-L5593",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vg,[e("summary",null,[t[3789]||(t[3789]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeGetElementType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirShapedTypeGetElementType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeGetElementType")],-1)),t[3790]||(t[3790]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3792]||(t[3792]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeGetElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the element type of the shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3791]||(t[3791]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5508-L5512",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Og,[e("summary",null,[t[3793]||(t[3793]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeGetRank-Tuple{Any}",href:"#Reactant.MLIR.API.mlirShapedTypeGetRank-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeGetRank")],-1)),t[3794]||(t[3794]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3796]||(t[3796]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeGetRank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the rank of the given ranked shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3795]||(t[3795]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5526-L5530",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bg,[e("summary",null,[t[3797]||(t[3797]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeHasRank-Tuple{Any}",href:"#Reactant.MLIR.API.mlirShapedTypeHasRank-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeHasRank")],-1)),t[3798]||(t[3798]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3800]||(t[3800]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeHasRank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given shaped type is ranked.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3799]||(t[3799]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5517-L5521",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ng,[e("summary",null,[t[3801]||(t[3801]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeHasStaticShape-Tuple{Any}",href:"#Reactant.MLIR.API.mlirShapedTypeHasStaticShape-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeHasStaticShape")],-1)),t[3802]||(t[3802]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3804]||(t[3804]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeHasStaticShape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given shaped type has a static shape.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3803]||(t[3803]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5535-L5539",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gg,[e("summary",null,[t[3805]||(t[3805]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeIsDynamicDim-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirShapedTypeIsDynamicDim-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeIsDynamicDim")],-1)),t[3806]||(t[3806]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3808]||(t[3808]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeIsDynamicDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, dim)</span></span></code></pre></div><p>Checks wither the dim-th dimension of the given shaped type is dynamic.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3807]||(t[3807]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5544-L5548",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zg,[e("summary",null,[t[3809]||(t[3809]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeIsDynamicSize-Tuple{Any}",href:"#Reactant.MLIR.API.mlirShapedTypeIsDynamicSize-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeIsDynamicSize")],-1)),t[3810]||(t[3810]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3812]||(t[3812]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeIsDynamicSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size)</span></span></code></pre></div><p>Checks whether the given value is used as a placeholder for dynamic sizes in shaped types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3811]||(t[3811]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5562-L5566",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wg,[e("summary",null,[t[3813]||(t[3813]=e("a",{id:"Reactant.MLIR.API.mlirShapedTypeIsDynamicStrideOrOffset-Tuple{Any}",href:"#Reactant.MLIR.API.mlirShapedTypeIsDynamicStrideOrOffset-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirShapedTypeIsDynamicStrideOrOffset")],-1)),t[3814]||(t[3814]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3816]||(t[3816]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirShapedTypeIsDynamicStrideOrOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span></code></pre></div><p>Checks whether the given value is used as a placeholder for dynamic strides and offsets in shaped types.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3815]||(t[3815]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5580-L5584",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ug,[e("summary",null,[t[3817]||(t[3817]=e("a",{id:"Reactant.MLIR.API.mlirSimplifyAffineExpr-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirSimplifyAffineExpr-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSimplifyAffineExpr")],-1)),t[3818]||(t[3818]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3820]||(t[3820]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSimplifyAffineExpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr, numDims, numSymbols)</span></span></code></pre></div><p>Simplify an affine expression by flattening and some amount of simple analysis. This has complexity linear in the number of nodes in &#39;expr&#39;. Returns the simplified expression, which is the same as the input expression if it can&#39;t be simplified. When <code>expr</code> is semi-affine, a simplified semi-affine expression is constructed in the sorted order of dimension and symbol positions.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3819]||(t[3819]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2754-L2758",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qg,[e("summary",null,[t[3821]||(t[3821]=e("a",{id:"Reactant.MLIR.API.mlirSparseElementsAttrGetIndices-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseElementsAttrGetIndices-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseElementsAttrGetIndices")],-1)),t[3822]||(t[3822]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3824]||(t[3824]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseElementsAttrGetIndices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the dense elements attribute containing 64-bit integer indices of non-null elements in the given sparse elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3823]||(t[3823]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4820-L4824",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qg,[e("summary",null,[t[3825]||(t[3825]=e("a",{id:"Reactant.MLIR.API.mlirSparseElementsAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirSparseElementsAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseElementsAttrGetTypeID")],-1)),t[3826]||(t[3826]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3828]||(t[3828]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseElementsAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a SparseElements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3827]||(t[3827]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4838-L4842",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wg,[e("summary",null,[t[3829]||(t[3829]=e("a",{id:"Reactant.MLIR.API.mlirSparseElementsAttrGetValues-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseElementsAttrGetValues-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseElementsAttrGetValues")],-1)),t[3830]||(t[3830]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3832]||(t[3832]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseElementsAttrGetValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the dense elements attribute containing the non-null elements in the given sparse elements attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3831]||(t[3831]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4829-L4833",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zg,[e("summary",null,[t[3833]||(t[3833]=e("a",{id:"Reactant.MLIR.API.mlirSparseElementsAttribute-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirSparseElementsAttribute-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseElementsAttribute")],-1)),t[3834]||(t[3834]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3836]||(t[3836]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseElementsAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, denseIndices, denseValues)</span></span></code></pre></div><p>Creates a sparse elements attribute of the given shape from a list of indices and a list of associated values. Both lists are expected to be dense elements attributes with the same number of elements. The list of indices is expected to contain 64-bit integers. The attribute is created in the same context as the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3835]||(t[3835]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4809-L4813",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hg,[e("summary",null,[t[3837]||(t[3837]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGet-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGet-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGet")],-1)),t[3838]||(t[3838]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3840]||(t[3840]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, lvlRank, lvlTypes, dimToLvl, lvlTodim, posWidth, crdWidth, explicitVal, implicitVal)</span></span></code></pre></div><p>Creates a <code>sparse\\_tensor.encoding</code> attribute with the given parameters.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3839]||(t[3839]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7987-L7991",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jg,[e("summary",null,[t[3841]||(t[3841]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetCrdWidth-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetCrdWidth-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetCrdWidth")],-1)),t[3842]||(t[3842]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3844]||(t[3844]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetCrdWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the coordinate bitwidth of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3843]||(t[3843]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8070-L8074",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kg,[e("summary",null,[t[3845]||(t[3845]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetDimToLvl-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetDimToLvl-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetDimToLvl")],-1)),t[3846]||(t[3846]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3848]||(t[3848]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetDimToLvl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the dimension-to-level mapping of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3847]||(t[3847]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8039-L8043",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$g,[e("summary",null,[t[3849]||(t[3849]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetExplicitVal-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetExplicitVal-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetExplicitVal")],-1)),t[3850]||(t[3850]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3852]||(t[3852]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetExplicitVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the explicit value of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3851]||(t[3851]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8079-L8083",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xg,[e("summary",null,[t[3853]||(t[3853]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetImplicitVal-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetImplicitVal-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetImplicitVal")],-1)),t[3854]||(t[3854]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3856]||(t[3856]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetImplicitVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the implicit value of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3855]||(t[3855]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8090-L8094",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yg,[e("summary",null,[t[3857]||(t[3857]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlFmt-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlFmt-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlFmt")],-1)),t[3858]||(t[3858]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3860]||(t[3860]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetLvlFmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, lvl)</span></span></code></pre></div><p>Returns a specified level-format of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3859]||(t[3859]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8028-L8032",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tm,[e("summary",null,[t[3861]||(t[3861]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlToDim-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlToDim-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlToDim")],-1)),t[3862]||(t[3862]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3864]||(t[3864]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetLvlToDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the level-to-dimension mapping of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3863]||(t[3863]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8050-L8054",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",em,[e("summary",null,[t[3865]||(t[3865]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetLvlType")],-1)),t[3866]||(t[3866]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3868]||(t[3868]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetLvlType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, lvl)</span></span></code></pre></div><p>Returns a specified level-type of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3867]||(t[3867]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8017-L8021",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sm,[e("summary",null,[t[3869]||(t[3869]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetPosWidth-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetPosWidth-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingAttrGetPosWidth")],-1)),t[3870]||(t[3870]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3872]||(t[3872]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingAttrGetPosWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the position bitwidth of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3871]||(t[3871]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8061-L8065",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",am,[e("summary",null,[t[3873]||(t[3873]=e("a",{id:"Reactant.MLIR.API.mlirSparseTensorEncodingGetLvlRank-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSparseTensorEncodingGetLvlRank-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSparseTensorEncodingGetLvlRank")],-1)),t[3874]||(t[3874]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3876]||(t[3876]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSparseTensorEncodingGetLvlRank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the level-rank of the <code>sparse\\_tensor.encoding</code> attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3875]||(t[3875]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8008-L8012",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",im,[e("summary",null,[t[3877]||(t[3877]=e("a",{id:"Reactant.MLIR.API.mlirStridedLayoutAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirStridedLayoutAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStridedLayoutAttrGetTypeID")],-1)),t[3878]||(t[3878]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3880]||(t[3880]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStridedLayoutAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a StridedLayout attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3879]||(t[3879]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4869-L4873",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lm,[e("summary",null,[t[3881]||(t[3881]=e("a",{id:"Reactant.MLIR.API.mlirStringAttrGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirStringAttrGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringAttrGet")],-1)),t[3882]||(t[3882]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3884]||(t[3884]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, str)</span></span></code></pre></div><p>Creates a string attribute in the given context containing the given string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3883]||(t[3883]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3837-L3841",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nm,[e("summary",null,[t[3885]||(t[3885]=e("a",{id:"Reactant.MLIR.API.mlirStringAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirStringAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringAttrGetTypeID")],-1)),t[3886]||(t[3886]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3888]||(t[3888]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a String attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3887]||(t[3887]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3864-L3868",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rm,[e("summary",null,[t[3889]||(t[3889]=e("a",{id:"Reactant.MLIR.API.mlirStringAttrGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirStringAttrGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringAttrGetValue")],-1)),t[3890]||(t[3890]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3892]||(t[3892]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the attribute values as a string reference. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3891]||(t[3891]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3855-L3859",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",om,[e("summary",null,[t[3893]||(t[3893]=e("a",{id:"Reactant.MLIR.API.mlirStringAttrTypedGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirStringAttrTypedGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringAttrTypedGet")],-1)),t[3894]||(t[3894]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3896]||(t[3896]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringAttrTypedGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, str)</span></span></code></pre></div><p>Creates a string attribute in the given context containing the given string. Additionally, the attribute has the given type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3895]||(t[3895]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3846-L3850",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pm,[e("summary",null,[t[3897]||(t[3897]=e("a",{id:"Reactant.MLIR.API.mlirStringRefCreate-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirStringRefCreate-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringRefCreate")],-1)),t[3898]||(t[3898]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3900]||(t[3900]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringRefCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str, length)</span></span></code></pre></div><p>Constructs a string reference from the pointer and length. The pointer need not reference to a null-terminated string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3899]||(t[3899]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L80-L84",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dm,[e("summary",null,[t[3901]||(t[3901]=e("a",{id:"Reactant.MLIR.API.mlirStringRefCreateFromCString-Tuple{Any}",href:"#Reactant.MLIR.API.mlirStringRefCreateFromCString-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringRefCreateFromCString")],-1)),t[3902]||(t[3902]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3904]||(t[3904]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringRefCreateFromCString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str)</span></span></code></pre></div><p>Constructs a string reference from a null-terminated C string. Prefer <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirStringRefCreate-Tuple{Any, Any}"><code>mlirStringRefCreate</code></a> if the length of the string is known.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3903]||(t[3903]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L89-L93",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",um,[e("summary",null,[t[3905]||(t[3905]=e("a",{id:"Reactant.MLIR.API.mlirStringRefEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirStringRefEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirStringRefEqual")],-1)),t[3906]||(t[3906]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3908]||(t[3908]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirStringRefEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string, other)</span></span></code></pre></div><p>Returns true if two string references are equal, false otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3907]||(t[3907]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L98-L102",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cm,[e("summary",null,[t[3909]||(t[3909]=e("a",{id:"Reactant.MLIR.API.mlirSymbolRefAttrGet-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirSymbolRefAttrGet-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolRefAttrGet")],-1)),t[3910]||(t[3910]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3912]||(t[3912]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolRefAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, symbol, numReferences, references)</span></span></code></pre></div><p>Creates a symbol reference attribute in the given context referencing a symbol identified by the given string inside a list of nested references. Each of the references in the list must not be nested.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3911]||(t[3911]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3882-L3886",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hm,[e("summary",null,[t[3913]||(t[3913]=e("a",{id:"Reactant.MLIR.API.mlirSymbolRefAttrGetLeafReference-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSymbolRefAttrGetLeafReference-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolRefAttrGetLeafReference")],-1)),t[3914]||(t[3914]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3916]||(t[3916]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolRefAttrGetLeafReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the string reference to the leaf referenced symbol. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3915]||(t[3915]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3905-L3909",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bm,[e("summary",null,[t[3917]||(t[3917]=e("a",{id:"Reactant.MLIR.API.mlirSymbolRefAttrGetNestedReference-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSymbolRefAttrGetNestedReference-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolRefAttrGetNestedReference")],-1)),t[3918]||(t[3918]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3920]||(t[3920]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolRefAttrGetNestedReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr, pos)</span></span></code></pre></div><p>Returns pos-th reference nested in the given symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3919]||(t[3919]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3923-L3927",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ym,[e("summary",null,[t[3921]||(t[3921]=e("a",{id:"Reactant.MLIR.API.mlirSymbolRefAttrGetNumNestedReferences-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSymbolRefAttrGetNumNestedReferences-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolRefAttrGetNumNestedReferences")],-1)),t[3922]||(t[3922]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3924]||(t[3924]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolRefAttrGetNumNestedReferences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the number of references nested in the given symbol reference attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3923]||(t[3923]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3914-L3918",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gm,[e("summary",null,[t[3925]||(t[3925]=e("a",{id:"Reactant.MLIR.API.mlirSymbolRefAttrGetRootReference-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSymbolRefAttrGetRootReference-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolRefAttrGetRootReference")],-1)),t[3926]||(t[3926]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3928]||(t[3928]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolRefAttrGetRootReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the string reference to the root referenced symbol. The data remains live as long as the context in which the attribute lives.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3927]||(t[3927]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3896-L3900",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mm,[e("summary",null,[t[3929]||(t[3929]=e("a",{id:"Reactant.MLIR.API.mlirSymbolRefAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirSymbolRefAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolRefAttrGetTypeID")],-1)),t[3930]||(t[3930]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3932]||(t[3932]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolRefAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an SymbolRef attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3931]||(t[3931]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3934-L3938",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",km,[e("summary",null,[t[3933]||(t[3933]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSymbolTableCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableCreate")],-1)),t[3934]||(t[3934]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3936]||(t[3936]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation)</span></span></code></pre></div><p>Creates a symbol table for the given operation. If the operation does not have the SymbolTable trait, returns a null symbol table.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3935]||(t[3935]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2532-L2536",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fm,[e("summary",null,[t[3937]||(t[3937]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSymbolTableDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableDestroy")],-1)),t[3938]||(t[3938]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3940]||(t[3940]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolTable)</span></span></code></pre></div><p>Destroys the symbol table created with <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirSymbolTableCreate-Tuple{Any}"><code>mlirSymbolTableCreate</code></a>. This does not affect the operations in the table.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3939]||(t[3939]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2550-L2554",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rm,[e("summary",null,[t[3941]||(t[3941]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableErase-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSymbolTableErase-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableErase")],-1)),t[3942]||(t[3942]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3944]||(t[3944]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableErase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolTable, operation)</span></span></code></pre></div><p>Removes the given operation from the symbol table and erases it.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3943]||(t[3943]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2581-L2585",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Im,[e("summary",null,[t[3945]||(t[3945]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableGetSymbolAttributeName-Tuple{}",href:"#Reactant.MLIR.API.mlirSymbolTableGetSymbolAttributeName-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableGetSymbolAttributeName")],-1)),t[3946]||(t[3946]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3948]||(t[3948]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableGetSymbolAttributeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the name of the attribute used to store symbol names compatible with symbol tables.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3947]||(t[3947]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2514-L2518",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tm,[e("summary",null,[t[3949]||(t[3949]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableGetVisibilityAttributeName-Tuple{}",href:"#Reactant.MLIR.API.mlirSymbolTableGetVisibilityAttributeName-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableGetVisibilityAttributeName")],-1)),t[3950]||(t[3950]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3952]||(t[3952]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableGetVisibilityAttributeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the name of the attribute used to store symbol visibility.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3951]||(t[3951]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2523-L2527",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Am,[e("summary",null,[t[3953]||(t[3953]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableInsert-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSymbolTableInsert-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableInsert")],-1)),t[3954]||(t[3954]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3956]||(t[3956]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolTable, operation)</span></span></code></pre></div><p>Inserts the given operation into the given symbol table. The operation must have the symbol trait. If the symbol table already has a symbol with the same name, renames the symbol being inserted to ensure name uniqueness. Note that this does not move the operation itself into the block of the symbol table operation, this should be done separately. Returns the name of the symbol after insertion.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3955]||(t[3955]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2570-L2574",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jm,[e("summary",null,[t[3957]||(t[3957]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirSymbolTableIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableIsNull")],-1)),t[3958]||(t[3958]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3960]||(t[3960]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolTable)</span></span></code></pre></div><p>Returns true if the symbol table is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3959]||(t[3959]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2541-L2545",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_m,[e("summary",null,[t[3961]||(t[3961]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableLookup-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirSymbolTableLookup-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableLookup")],-1)),t[3962]||(t[3962]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3964]||(t[3964]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableLookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbolTable, name)</span></span></code></pre></div><p>Looks up a symbol with the given name in the given symbol table and returns the operation that corresponds to the symbol. If the symbol cannot be found, returns a null operation.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3963]||(t[3963]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2559-L2563",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mm,[e("summary",null,[t[3965]||(t[3965]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableReplaceAllSymbolUses-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirSymbolTableReplaceAllSymbolUses-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableReplaceAllSymbolUses")],-1)),t[3966]||(t[3966]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3968]||(t[3968]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableReplaceAllSymbolUses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldSymbol, newSymbol, from)</span></span></code></pre></div><p>Attempt to replace all uses that are nested within the given operation of the given symbol &#39;oldSymbol&#39; with the provided &#39;newSymbol&#39;. This does not traverse into nested symbol tables. Will fail atomically if there are any unknown operations that may be potential symbol tables.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3967]||(t[3967]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2592-L2596",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lm,[e("summary",null,[t[3969]||(t[3969]=e("a",{id:"Reactant.MLIR.API.mlirSymbolTableWalkSymbolTables-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirSymbolTableWalkSymbolTables-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirSymbolTableWalkSymbolTables")],-1)),t[3970]||(t[3970]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3972]||(t[3972]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirSymbolTableWalkSymbolTables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from, allSymUsesVisible, callback, userData)</span></span></code></pre></div><p>Walks all symbol table operations nested within, and including, <code>op</code>. For each symbol table operation, the provided callback is invoked with the op and a boolean signifying if the symbols within that symbol table can be treated as if all uses within the IR are visible to the caller. <code>allSymUsesVisible</code> identifies whether all of the symbol uses of symbols within <code>op</code> are visible.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3971]||(t[3971]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2603-L2607",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Em,[e("summary",null,[t[3973]||(t[3973]=e("a",{id:"Reactant.MLIR.API.mlirTF32TypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTF32TypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTF32TypeGet")],-1)),t[3974]||(t[3974]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3976]||(t[3976]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTF32TypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a TF32 type in the given context. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3975]||(t[3975]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5427-L5431",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cm,[e("summary",null,[t[3977]||(t[3977]=e("a",{id:"Reactant.MLIR.API.mlirTransformApplyNamedSequence-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirTransformApplyNamedSequence-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformApplyNamedSequence")],-1)),t[3978]||(t[3978]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3980]||(t[3980]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformApplyNamedSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, transformRoot, transformModule, transformOptions)</span></span></code></pre></div><p>Applies the transformation script starting at the given transform root operation to the given payload operation. The module containing the transform root as well as the transform options should be provided. The transform operation must implement TransformOpInterface and the module must be a ModuleOp. Returns the status of the application.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3979]||(t[3979]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8267-L8271",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vm,[e("summary",null,[t[3981]||(t[3981]=e("a",{id:"Reactant.MLIR.API.mlirTransformOptionsCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirTransformOptionsCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformOptionsCreate")],-1)),t[3982]||(t[3982]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3984]||(t[3984]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformOptionsCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a default-initialized transform options object.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3983]||(t[3983]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8205-L8209",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pm,[e("summary",null,[t[3985]||(t[3985]=e("a",{id:"Reactant.MLIR.API.mlirTransformOptionsDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTransformOptionsDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformOptionsDestroy")],-1)),t[3986]||(t[3986]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3988]||(t[3988]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformOptionsDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transformOptions)</span></span></code></pre></div><p>Destroys a transform options object previously created by <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirTransformOptionsCreate-Tuple{}"><code>mlirTransformOptionsCreate</code></a>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3987]||(t[3987]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8258-L8262",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xm,[e("summary",null,[t[3989]||(t[3989]=e("a",{id:"Reactant.MLIR.API.mlirTransformOptionsEnableExpensiveChecks-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTransformOptionsEnableExpensiveChecks-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformOptionsEnableExpensiveChecks")],-1)),t[3990]||(t[3990]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3992]||(t[3992]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformOptionsEnableExpensiveChecks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transformOptions, enable)</span></span></code></pre></div><p>Enables or disables expensive checks in transform options.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3991]||(t[3991]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8214-L8218",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sm,[e("summary",null,[t[3993]||(t[3993]=e("a",{id:"Reactant.MLIR.API.mlirTransformOptionsEnforceSingleTopLevelTransformOp-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTransformOptionsEnforceSingleTopLevelTransformOp-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformOptionsEnforceSingleTopLevelTransformOp")],-1)),t[3994]||(t[3994]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3996]||(t[3996]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformOptionsEnforceSingleTopLevelTransformOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transformOptions, enable)</span></span></code></pre></div><p>Enables or disables the enforcement of the top-level transform op being single in transform options.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3995]||(t[3995]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8236-L8240",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dm,[e("summary",null,[t[3997]||(t[3997]=e("a",{id:"Reactant.MLIR.API.mlirTransformOptionsGetEnforceSingleTopLevelTransformOp-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTransformOptionsGetEnforceSingleTopLevelTransformOp-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformOptionsGetEnforceSingleTopLevelTransformOp")],-1)),t[3998]||(t[3998]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4e3]||(t[4e3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformOptionsGetEnforceSingleTopLevelTransformOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transformOptions)</span></span></code></pre></div><p>Returns true if the enforcement of the top-level transform op being single is enabled in transform options.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[3999]||(t[3999]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8247-L8251",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fm,[e("summary",null,[t[4001]||(t[4001]=e("a",{id:"Reactant.MLIR.API.mlirTransformOptionsGetExpensiveChecksEnabled-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTransformOptionsGetExpensiveChecksEnabled-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTransformOptionsGetExpensiveChecksEnabled")],-1)),t[4002]||(t[4002]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4004]||(t[4004]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTransformOptionsGetExpensiveChecksEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transformOptions)</span></span></code></pre></div><p>Returns true if expensive checks are enabled in transform options.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4003]||(t[4003]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L8225-L8229",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vm,[e("summary",null,[t[4005]||(t[4005]=e("a",{id:"Reactant.MLIR.API.mlirTranslateModuleToLLVMIR-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTranslateModuleToLLVMIR-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTranslateModuleToLLVMIR")],-1)),t[4006]||(t[4006]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4008]||(t[4008]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTranslateModuleToLLVMIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_module, context)</span></span></code></pre></div><p>Translate operation that satisfies LLVM dialect module requirements into an LLVM IR module living in the given context. This translates operations from any dilalect that has a registered implementation of LLVMTranslationDialectInterface.</p><p><strong>Returns</strong></p><p>the generated LLVM IR Module from the translated MLIR module, it is owned by the caller.</p>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4007]||(t[4007]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9498-L9505",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Om,[e("summary",null,[t[4009]||(t[4009]=e("a",{id:"Reactant.MLIR.API.mlirTupleTypeGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirTupleTypeGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTupleTypeGet")],-1)),t[4010]||(t[4010]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4012]||(t[4012]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTupleTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, numElements, elements)</span></span></code></pre></div><p>Creates a tuple type that consists of the given list of elemental types. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4011]||(t[4011]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5962-L5966",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bm,[e("summary",null,[t[4013]||(t[4013]=e("a",{id:"Reactant.MLIR.API.mlirTupleTypeGetNumTypes-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTupleTypeGetNumTypes-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTupleTypeGetNumTypes")],-1)),t[4014]||(t[4014]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4016]||(t[4016]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTupleTypeGetNumTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of types contained in a tuple.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4015]||(t[4015]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5973-L5977",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nm,[e("summary",null,[t[4017]||(t[4017]=e("a",{id:"Reactant.MLIR.API.mlirTupleTypeGetType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTupleTypeGetType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTupleTypeGetType")],-1)),t[4018]||(t[4018]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4020]||(t[4020]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTupleTypeGetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns the pos-th type in the tuple type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4019]||(t[4019]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5982-L5986",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gm,[e("summary",null,[t[4021]||(t[4021]=e("a",{id:"Reactant.MLIR.API.mlirTupleTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirTupleTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTupleTypeGetTypeID")],-1)),t[4022]||(t[4022]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4024]||(t[4024]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTupleTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Tuple type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4023]||(t[4023]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5944-L5948",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zm,[e("summary",null,[t[4025]||(t[4025]=e("a",{id:"Reactant.MLIR.API.mlirTypeAttrGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeAttrGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeAttrGet")],-1)),t[4026]||(t[4026]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4028]||(t[4028]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Creates a type attribute wrapping the given type in the same context as the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4027]||(t[4027]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3990-L3994",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wm,[e("summary",null,[t[4029]||(t[4029]=e("a",{id:"Reactant.MLIR.API.mlirTypeAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirTypeAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeAttrGetTypeID")],-1)),t[4030]||(t[4030]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4032]||(t[4032]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a Type attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4031]||(t[4031]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4008-L4012",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Um,[e("summary",null,[t[4033]||(t[4033]=e("a",{id:"Reactant.MLIR.API.mlirTypeAttrGetValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeAttrGetValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeAttrGetValue")],-1)),t[4034]||(t[4034]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4036]||(t[4036]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeAttrGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attr)</span></span></code></pre></div><p>Returns the type stored in the given type attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4035]||(t[4035]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L3999-L4003",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qm,[e("summary",null,[t[4037]||(t[4037]=e("a",{id:"Reactant.MLIR.API.mlirTypeDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeDump")],-1)),t[4038]||(t[4038]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4040]||(t[4040]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Prints the type to the standard error stream.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4039]||(t[4039]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2371-L2375",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qm,[e("summary",null,[t[4041]||(t[4041]=e("a",{id:"Reactant.MLIR.API.mlirTypeEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTypeEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeEqual")],-1)),t[4042]||(t[4042]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4044]||(t[4044]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t1, t2)</span></span></code></pre></div><p>Checks if two types are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4043]||(t[4043]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2351-L2355",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wm,[e("summary",null,[t[4045]||(t[4045]=e("a",{id:"Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorCreate")],-1)),t[4046]||(t[4046]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4048]||(t[4048]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeFromLLVMIRTranslatorCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Create an LLVM::TypeFromLLVMIRTranslator and transfer ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4047]||(t[4047]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9516-L9520",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zm,[e("summary",null,[t[4049]||(t[4049]=e("a",{id:"Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorDestroy")],-1)),t[4050]||(t[4050]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4052]||(t[4052]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeFromLLVMIRTranslatorDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(translator)</span></span></code></pre></div><p>Takes an LLVM::TypeFromLLVMIRTranslator owned by the caller and destroys it. It is the responsibility of the user to only pass an LLVM::TypeFromLLVMIRTranslator class.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4051]||(t[4051]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9527-L9531",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hm,[e("summary",null,[t[4053]||(t[4053]=e("a",{id:"Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorTranslateType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorTranslateType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeFromLLVMIRTranslatorTranslateType")],-1)),t[4054]||(t[4054]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4056]||(t[4056]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeFromLLVMIRTranslatorTranslateType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(translator, llvmType)</span></span></code></pre></div><p>Translates the given LLVM IR type to the MLIR LLVM dialect.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4055]||(t[4055]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9538-L9542",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jm,[e("summary",null,[t[4057]||(t[4057]=e("a",{id:"Reactant.MLIR.API.mlirTypeGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeGetContext")],-1)),t[4058]||(t[4058]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4060]||(t[4060]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the context that a type was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4059]||(t[4059]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2315-L2319",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Km,[e("summary",null,[t[4061]||(t[4061]=e("a",{id:"Reactant.MLIR.API.mlirTypeGetDialect-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeGetDialect-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeGetDialect")],-1)),t[4062]||(t[4062]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4064]||(t[4064]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeGetDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the dialect a type belongs to.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4063]||(t[4063]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2333-L2337",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$m,[e("summary",null,[t[4065]||(t[4065]=e("a",{id:"Reactant.MLIR.API.mlirTypeGetTypeID-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeGetTypeID-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeGetTypeID")],-1)),t[4066]||(t[4066]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4068]||(t[4068]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Gets the type ID of the type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4067]||(t[4067]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2324-L2328",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xm,[e("summary",null,[t[4069]||(t[4069]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDAllocatorAllocateTypeID-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIDAllocatorAllocateTypeID-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDAllocatorAllocateTypeID")],-1)),t[4070]||(t[4070]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4072]||(t[4072]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDAllocatorAllocateTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allocator)</span></span></code></pre></div><p>Allocates a type id that is valid for the lifetime of the allocator</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4071]||(t[4071]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L232-L236",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ym,[e("summary",null,[t[4073]||(t[4073]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDAllocatorCreate-Tuple{}",href:"#Reactant.MLIR.API.mlirTypeIDAllocatorCreate-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDAllocatorCreate")],-1)),t[4074]||(t[4074]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4076]||(t[4076]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDAllocatorCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Creates a type id allocator for dynamic type id creation</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4075]||(t[4075]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L214-L218",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tk,[e("summary",null,[t[4077]||(t[4077]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDAllocatorDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIDAllocatorDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDAllocatorDestroy")],-1)),t[4078]||(t[4078]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4080]||(t[4080]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDAllocatorDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allocator)</span></span></code></pre></div><p>Deallocates the allocator and all allocated type ids</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4079]||(t[4079]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L223-L227",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ek,[e("summary",null,[t[4081]||(t[4081]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIDCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDCreate")],-1)),t[4082]||(t[4082]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4084]||(t[4084]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ptr)</span></span></code></pre></div><p><code>ptr</code> must be 8 byte aligned and unique to a type valid for the duration of the returned type id&#39;s usage</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4083]||(t[4083]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L178-L182",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sk,[e("summary",null,[t[4085]||(t[4085]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTypeIDEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDEqual")],-1)),t[4086]||(t[4086]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4088]||(t[4088]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typeID1, typeID2)</span></span></code></pre></div><p>Checks if two type ids are equal.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4087]||(t[4087]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L196-L200",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ak,[e("summary",null,[t[4089]||(t[4089]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDHashValue-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIDHashValue-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDHashValue")],-1)),t[4090]||(t[4090]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4092]||(t[4092]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDHashValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typeID)</span></span></code></pre></div><p>Returns the hash value of the type id.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4091]||(t[4091]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L205-L209",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ik,[e("summary",null,[t[4093]||(t[4093]=e("a",{id:"Reactant.MLIR.API.mlirTypeIDIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIDIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIDIsNull")],-1)),t[4094]||(t[4094]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4096]||(t[4096]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIDIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typeID)</span></span></code></pre></div><p>Checks whether a type id is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4095]||(t[4095]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L187-L191",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lk,[e("summary",null,[t[4097]||(t[4097]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAAnyQuantizedType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAAnyQuantizedType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAAnyQuantizedType")],-1)),t[4098]||(t[4098]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4100]||(t[4100]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAAnyQuantizedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is an AnyQuantizedType.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4099]||(t[4099]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7633-L7637",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nk,[e("summary",null,[t[4101]||(t[4101]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsABF16-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsABF16-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsABF16")],-1)),t[4102]||(t[4102]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4104]||(t[4104]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsABF16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a bf16 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4103]||(t[4103]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5310-L5314",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rk,[e("summary",null,[t[4105]||(t[4105]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsACalibratedQuantizedType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsACalibratedQuantizedType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsACalibratedQuantizedType")],-1)),t[4106]||(t[4106]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4108]||(t[4108]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsACalibratedQuantizedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is a CalibratedQuantizedType.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4107]||(t[4107]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7898-L7902",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ok,[e("summary",null,[t[4109]||(t[4109]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAComplex-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAComplex-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAComplex")],-1)),t[4110]||(t[4110]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4112]||(t[4112]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAComplex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Complex type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4111]||(t[4111]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5472-L5476",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pk,[e("summary",null,[t[4113]||(t[4113]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAF16-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAF16-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAF16")],-1)),t[4114]||(t[4114]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4116]||(t[4116]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAF16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f16 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4115]||(t[4115]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5337-L5341",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",dk,[e("summary",null,[t[4117]||(t[4117]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAF32-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAF32-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAF32")],-1)),t[4118]||(t[4118]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4120]||(t[4120]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAF32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f32 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4119]||(t[4119]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5364-L5368",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uk,[e("summary",null,[t[4121]||(t[4121]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAF64-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAF64-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAF64")],-1)),t[4122]||(t[4122]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4124]||(t[4124]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAF64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f64 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4123]||(t[4123]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5391-L5395",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ck,[e("summary",null,[t[4125]||(t[4125]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat")],-1)),t[4126]||(t[4126]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4128]||(t[4128]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a floating-point type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4127]||(t[4127]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4986-L4990",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hk,[e("summary",null,[t[4129]||(t[4129]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat4E2M1FN-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat4E2M1FN-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat4E2M1FN")],-1)),t[4130]||(t[4130]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4132]||(t[4132]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat4E2M1FN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f4E2M1FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4131]||(t[4131]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5013-L5017",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bk,[e("summary",null,[t[4133]||(t[4133]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat6E2M3FN-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat6E2M3FN-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat6E2M3FN")],-1)),t[4134]||(t[4134]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4136]||(t[4136]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat6E2M3FN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f6E2M3FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4135]||(t[4135]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5040-L5044",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yk,[e("summary",null,[t[4137]||(t[4137]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat6E3M2FN-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat6E3M2FN-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat6E3M2FN")],-1)),t[4138]||(t[4138]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4140]||(t[4140]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat6E3M2FN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f6E3M2FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4139]||(t[4139]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5067-L5071",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gk,[e("summary",null,[t[4141]||(t[4141]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E3M4-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E3M4-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E3M4")],-1)),t[4142]||(t[4142]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4144]||(t[4144]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E3M4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E3M4 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4143]||(t[4143]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5256-L5260",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mk,[e("summary",null,[t[4145]||(t[4145]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E4M3-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3")],-1)),t[4146]||(t[4146]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4148]||(t[4148]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E4M3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4147]||(t[4147]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5121-L5125",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kk,[e("summary",null,[t[4149]||(t[4149]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3B11FNUZ-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E4M3B11FNUZ-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3B11FNUZ")],-1)),t[4150]||(t[4150]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4152]||(t[4152]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E4M3B11FNUZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3B11FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4151]||(t[4151]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5229-L5233",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",fk,[e("summary",null,[t[4153]||(t[4153]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3FN-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E4M3FN-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3FN")],-1)),t[4154]||(t[4154]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4156]||(t[4156]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E4M3FN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3FN type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4155]||(t[4155]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5148-L5152",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rk,[e("summary",null,[t[4157]||(t[4157]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3FNUZ-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E4M3FNUZ-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E4M3FNUZ")],-1)),t[4158]||(t[4158]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4160]||(t[4160]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E4M3FNUZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E4M3FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4159]||(t[4159]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5202-L5206",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ik,[e("summary",null,[t[4161]||(t[4161]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E5M2-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E5M2-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E5M2")],-1)),t[4162]||(t[4162]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4164]||(t[4164]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E5M2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E5M2 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4163]||(t[4163]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5094-L5098",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tk,[e("summary",null,[t[4165]||(t[4165]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E5M2FNUZ-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E5M2FNUZ-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E5M2FNUZ")],-1)),t[4166]||(t[4166]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4168]||(t[4168]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E5M2FNUZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E5M2FNUZ type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4167]||(t[4167]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5175-L5179",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ak,[e("summary",null,[t[4169]||(t[4169]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFloat8E8M0FNU-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFloat8E8M0FNU-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFloat8E8M0FNU")],-1)),t[4170]||(t[4170]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4172]||(t[4172]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFloat8E8M0FNU</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an f8E8M0FNU type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4171]||(t[4171]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5283-L5287",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jk,[e("summary",null,[t[4173]||(t[4173]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAFunction-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAFunction-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAFunction")],-1)),t[4174]||(t[4174]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4176]||(t[4176]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a function type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4175]||(t[4175]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6000-L6004",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_k,[e("summary",null,[t[4177]||(t[4177]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAIndex-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAIndex-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAIndex")],-1)),t[4178]||(t[4178]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4180]||(t[4180]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an index type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4179]||(t[4179]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4968-L4972",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mk,[e("summary",null,[t[4181]||(t[4181]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAInteger-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAInteger-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAInteger")],-1)),t[4182]||(t[4182]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4184]||(t[4184]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an integer type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4183]||(t[4183]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4887-L4891",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lk,[e("summary",null,[t[4185]||(t[4185]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsALLVMPointerType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsALLVMPointerType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsALLVMPointerType")],-1)),t[4186]||(t[4186]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4188]||(t[4188]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsALLVMPointerType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the type is an LLVM dialect pointer type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4187]||(t[4187]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6543-L6547",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ek,[e("summary",null,[t[4189]||(t[4189]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsALLVMStructType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsALLVMStructType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsALLVMStructType")],-1)),t[4190]||(t[4190]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4192]||(t[4192]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsALLVMStructType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the type is an LLVM dialect struct type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4191]||(t[4191]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6629-L6633",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ck,[e("summary",null,[t[4193]||(t[4193]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAMemRef-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAMemRef-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAMemRef")],-1)),t[4194]||(t[4194]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4196]||(t[4196]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAMemRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4195]||(t[4195]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5791-L5795",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vk,[e("summary",null,[t[4197]||(t[4197]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsANone-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsANone-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsANone")],-1)),t[4198]||(t[4198]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4200]||(t[4200]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsANone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a None type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4199]||(t[4199]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5445-L5449",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pk,[e("summary",null,[t[4201]||(t[4201]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAOpaque-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAOpaque-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAOpaque")],-1)),t[4202]||(t[4202]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4204]||(t[4204]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAOpaque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an opaque type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4203]||(t[4203]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L6069-L6073",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xk,[e("summary",null,[t[4205]||(t[4205]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAQuantizedType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAQuantizedType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAQuantizedType")],-1)),t[4206]||(t[4206]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4208]||(t[4208]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAQuantizedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is a quantization dialect type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4207]||(t[4207]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7459-L7463",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sk,[e("summary",null,[t[4209]||(t[4209]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsARankedTensor-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsARankedTensor-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsARankedTensor")],-1)),t[4210]||(t[4210]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4212]||(t[4212]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsARankedTensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a ranked tensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4211]||(t[4211]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5700-L5704",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Dk,[e("summary",null,[t[4213]||(t[4213]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAShaped-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAShaped-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAShaped")],-1)),t[4214]||(t[4214]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4216]||(t[4216]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAShaped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Shaped type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4215]||(t[4215]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5499-L5503",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Fk,[e("summary",null,[t[4217]||(t[4217]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsATF32-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsATF32-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsATF32")],-1)),t[4218]||(t[4218]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4220]||(t[4220]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsATF32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an TF32 type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4219]||(t[4219]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5418-L5422",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vk,[e("summary",null,[t[4221]||(t[4221]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsATensor-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsATensor-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsATensor")],-1)),t[4222]||(t[4222]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4224]||(t[4224]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsATensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Tensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4223]||(t[4223]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5682-L5686",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ok,[e("summary",null,[t[4225]||(t[4225]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsATuple-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsATuple-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsATuple")],-1)),t[4226]||(t[4226]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4228]||(t[4228]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsATuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a tuple type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4227]||(t[4227]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5953-L5957",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bk,[e("summary",null,[t[4229]||(t[4229]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAUniformQuantizedPerAxisType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAUniformQuantizedPerAxisType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAUniformQuantizedPerAxisType")],-1)),t[4230]||(t[4230]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4232]||(t[4232]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAUniformQuantizedPerAxisType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is a UniformQuantizedPerAxisType.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4231]||(t[4231]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7714-L7718",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nk,[e("summary",null,[t[4233]||(t[4233]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAUniformQuantizedSubChannelType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAUniformQuantizedSubChannelType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAUniformQuantizedSubChannelType")],-1)),t[4234]||(t[4234]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4236]||(t[4236]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAUniformQuantizedSubChannelType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is a UniformQuantizedSubChannel.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4235]||(t[4235]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7803-L7807",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gk,[e("summary",null,[t[4237]||(t[4237]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAUniformQuantizedType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAUniformQuantizedType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAUniformQuantizedType")],-1)),t[4238]||(t[4238]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4240]||(t[4240]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAUniformQuantizedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given type is a UniformQuantizedType.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4239]||(t[4239]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7659-L7663",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zk,[e("summary",null,[t[4241]||(t[4241]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAUnrankedMemRef-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAUnrankedMemRef-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAUnrankedMemRef")],-1)),t[4242]||(t[4242]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4244]||(t[4244]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAUnrankedMemRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an UnrankedMemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4243]||(t[4243]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5809-L5813",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wk,[e("summary",null,[t[4245]||(t[4245]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAUnrankedTensor-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAUnrankedTensor-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAUnrankedTensor")],-1)),t[4246]||(t[4246]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4248]||(t[4248]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAUnrankedTensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is an unranked tensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4247]||(t[4247]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5718-L5722",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uk,[e("summary",null,[t[4249]||(t[4249]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsAVector-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsAVector-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsAVector")],-1)),t[4250]||(t[4250]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4252]||(t[4252]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsAVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given type is a Vector type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4251]||(t[4251]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5607-L5611",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",qk,[e("summary",null,[t[4253]||(t[4253]=e("a",{id:"Reactant.MLIR.API.mlirTypeIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeIsNull")],-1)),t[4254]||(t[4254]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4256]||(t[4256]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether a type is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4255]||(t[4255]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2342-L2346",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Qk,[e("summary",null,[t[4257]||(t[4257]=e("a",{id:"Reactant.MLIR.API.mlirTypeParseGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTypeParseGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeParseGet")],-1)),t[4258]||(t[4258]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4260]||(t[4260]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeParseGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, type)</span></span></code></pre></div><p>Parses a type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4259]||(t[4259]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2306-L2310",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Wk,[e("summary",null,[t[4261]||(t[4261]=e("a",{id:"Reactant.MLIR.API.mlirTypePrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirTypePrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypePrint")],-1)),t[4262]||(t[4262]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4264]||(t[4264]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypePrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, callback, userData)</span></span></code></pre></div><p>Prints a location by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4263]||(t[4263]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2360-L2364",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Zk,[e("summary",null,[t[4265]||(t[4265]=e("a",{id:"Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorCreate-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorCreate-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorCreate")],-1)),t[4266]||(t[4266]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4268]||(t[4268]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeToLLVMIRTranslatorCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Create an LLVM::TypeToLLVMIRTranslator and transfer ownership to the caller.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4267]||(t[4267]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9553-L9557",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Hk,[e("summary",null,[t[4269]||(t[4269]=e("a",{id:"Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorDestroy-Tuple{Any}",href:"#Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorDestroy-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorDestroy")],-1)),t[4270]||(t[4270]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4272]||(t[4272]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeToLLVMIRTranslatorDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(translator)</span></span></code></pre></div><p>Takes an LLVM::TypeToLLVMIRTranslator owned by the caller and destroys it. It is the responsibility of the user to only pass an LLVM::TypeToLLVMIRTranslator class.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4271]||(t[4271]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9564-L9568",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Jk,[e("summary",null,[t[4273]||(t[4273]=e("a",{id:"Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorTranslateType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorTranslateType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirTypeToLLVMIRTranslatorTranslateType")],-1)),t[4274]||(t[4274]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4276]||(t[4276]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirTypeToLLVMIRTranslatorTranslateType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(translator, mlirType)</span></span></code></pre></div><p>Translates the given MLIR LLVM dialect to the LLVM IR type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4275]||(t[4275]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L9575-L9579",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Kk,[e("summary",null,[t[4277]||(t[4277]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGet-NTuple{9, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGet-NTuple{9, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGet")],-1)),t[4278]||(t[4278]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4280]||(t[4280]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedPerAxisTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, storageType, expressedType, nDims, scales, zeroPoints, quantizedDimension, storageTypeMin, storageTypeMax)</span></span></code></pre></div><p>Creates an instance of UniformQuantizedPerAxisType with the given parameters in the same context as <code>storageType</code> and returns it. <code>scales</code> and <code>zeroPoints</code> point to <code>nDims</code> number of elements. The instance is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4279]||(t[4279]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7723-L7727",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$k,[e("summary",null,[t[4281]||(t[4281]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetNumDims-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetNumDims-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetNumDims")],-1)),t[4282]||(t[4282]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4284]||(t[4284]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedPerAxisTypeGetNumDims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of axes in the given quantized per-axis type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4283]||(t[4283]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7752-L7756",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Xk,[e("summary",null,[t[4285]||(t[4285]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension")],-1)),t[4286]||(t[4286]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4288]||(t[4288]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedPerAxisTypeGetQuantizedDimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the index of the quantized dimension in the given quantized per-axis type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4287]||(t[4287]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7783-L7787",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Yk,[e("summary",null,[t[4289]||(t[4289]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetScale-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetScale-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetScale")],-1)),t[4290]||(t[4290]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4292]||(t[4292]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedPerAxisTypeGetScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th scale of the given quantized per-axis type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4291]||(t[4291]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7761-L7765",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",tf,[e("summary",null,[t[4293]||(t[4293]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetZeroPoint-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetZeroPoint-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeGetZeroPoint")],-1)),t[4294]||(t[4294]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4296]||(t[4296]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedPerAxisTypeGetZeroPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns <code>pos</code>-th zero point of the given quantized per-axis type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4295]||(t[4295]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7772-L7776",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ef,[e("summary",null,[t[4297]||(t[4297]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeIsFixedPoint-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeIsFixedPoint-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedPerAxisTypeIsFixedPoint")],-1)),t[4298]||(t[4298]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4300]||(t[4300]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedPerAxisTypeIsFixedPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given uniform quantized per-axis type is fixed-point.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4299]||(t[4299]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7794-L7798",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",sf,[e("summary",null,[t[4301]||(t[4301]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGet-NTuple{10, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGet-NTuple{10, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGet")],-1)),t[4302]||(t[4302]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4304]||(t[4304]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedSubChannelTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, storageType, expressedType, scalesAttr, zeroPointsAttr, blockSizeInfoLength, quantizedDimensions, blockSizes, storageTypeMin, storageTypeMax)</span></span></code></pre></div><p>Creates a UniformQuantizedSubChannelType with the given parameters.</p><p>The type is owned by the context. <code>scalesAttr</code> and <code>zeroPointsAttr</code> must be DenseElementsAttrs. <code>quantizedDimensions</code> and <code>blockSizes</code> point to <code>blockSizeInfoLength</code> number of elements, describing respectively the quantization axis and corresponding block size.</p>',3)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4303]||(t[4303]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7812-L7818",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",af,[e("summary",null,[t[4305]||(t[4305]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetBlockSize-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetBlockSize-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetBlockSize")],-1)),t[4306]||(t[4306]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4308]||(t[4308]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedSubChannelTypeGetBlockSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns the block size at the given position.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4307]||(t[4307]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7867-L7871",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",lf,[e("summary",null,[t[4309]||(t[4309]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetNumBlockSizes-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetNumBlockSizes-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetNumBlockSizes")],-1)),t[4310]||(t[4310]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4312]||(t[4312]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedSubChannelTypeGetNumBlockSizes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the number of block sizes provided in type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4311]||(t[4311]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7845-L7849",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",nf,[e("summary",null,[t[4313]||(t[4313]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetQuantizedDimension-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetQuantizedDimension-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetQuantizedDimension")],-1)),t[4314]||(t[4314]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4316]||(t[4316]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedSubChannelTypeGetQuantizedDimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, pos)</span></span></code></pre></div><p>Returns the quantized dimension at the given position.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4315]||(t[4315]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7856-L7860",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",rf,[e("summary",null,[t[4317]||(t[4317]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetScales-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetScales-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetScales")],-1)),t[4318]||(t[4318]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4320]||(t[4320]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedSubChannelTypeGetScales</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the scales of the quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4319]||(t[4319]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7878-L7882",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",of,[e("summary",null,[t[4321]||(t[4321]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetZeroPoints-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetZeroPoints-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedSubChannelTypeGetZeroPoints")],-1)),t[4322]||(t[4322]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4324]||(t[4324]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedSubChannelTypeGetZeroPoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the zero-points of the quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4323]||(t[4323]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7887-L7891",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",pf,[e("summary",null,[t[4325]||(t[4325]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedTypeGet-NTuple{7, Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedTypeGet-NTuple{7, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedTypeGet")],-1)),t[4326]||(t[4326]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4328]||(t[4328]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flags, storageType, expressedType, scale, zeroPoint, storageTypeMin, storageTypeMax)</span></span></code></pre></div><p>Creates an instance of UniformQuantizedType with the given parameters in the same context as <code>storageType</code> and returns it. The instance is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4327]||(t[4327]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7668-L7672",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",df,[e("summary",null,[t[4329]||(t[4329]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedTypeGetScale-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedTypeGetScale-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedTypeGetScale")],-1)),t[4330]||(t[4330]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4332]||(t[4332]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedTypeGetScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the scale of the given uniform quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4331]||(t[4331]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7687-L7691",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",uf,[e("summary",null,[t[4333]||(t[4333]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedTypeGetZeroPoint-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedTypeGetZeroPoint-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedTypeGetZeroPoint")],-1)),t[4334]||(t[4334]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4336]||(t[4336]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedTypeGetZeroPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the zero point of the given uniform quantized type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4335]||(t[4335]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7696-L7700",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",cf,[e("summary",null,[t[4337]||(t[4337]=e("a",{id:"Reactant.MLIR.API.mlirUniformQuantizedTypeIsFixedPoint-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUniformQuantizedTypeIsFixedPoint-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUniformQuantizedTypeIsFixedPoint")],-1)),t[4338]||(t[4338]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4340]||(t[4340]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUniformQuantizedTypeIsFixedPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns <code>true</code> if the given uniform quantized type is fixed-point.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4339]||(t[4339]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L7705-L7709",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",hf,[e("summary",null,[t[4341]||(t[4341]=e("a",{id:"Reactant.MLIR.API.mlirUnitAttrGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUnitAttrGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnitAttrGet")],-1)),t[4342]||(t[4342]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4344]||(t[4344]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnitAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span></code></pre></div><p>Creates a unit attribute in the given context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4343]||(t[4343]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4026-L4030",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",bf,[e("summary",null,[t[4345]||(t[4345]=e("a",{id:"Reactant.MLIR.API.mlirUnitAttrGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirUnitAttrGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnitAttrGetTypeID")],-1)),t[4346]||(t[4346]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4348]||(t[4348]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnitAttrGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of a Unit attribute.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4347]||(t[4347]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4035-L4039",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",yf,[e("summary",null,[t[4349]||(t[4349]=e("a",{id:"Reactant.MLIR.API.mlirUnmanagedDenseResourceElementsAttrGet-NTuple{8, Any}",href:"#Reactant.MLIR.API.mlirUnmanagedDenseResourceElementsAttrGet-NTuple{8, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnmanagedDenseResourceElementsAttrGet")],-1)),t[4350]||(t[4350]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4352]||(t[4352]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnmanagedDenseResourceElementsAttrGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapedType, name, data, dataLength, dataAlignment, dataIsMutable, deleter, userData)</span></span></code></pre></div><p>Unlike the typed accessors below, constructs the attribute with a raw data buffer and no type/alignment checking. Use a more strongly typed accessor if possible. If dataIsMutable is false, then an immutable AsmResourceBlob will be created and that passed data contents will be treated as const. If the deleter is non NULL, then it will be called when the data buffer can no longer be accessed (passing userData to it).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4351]||(t[4351]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L4588-L4592",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",gf,[e("summary",null,[t[4353]||(t[4353]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedMemRefTypeGet-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirUnrankedMemRefTypeGet-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedMemRefTypeGet")],-1)),t[4354]||(t[4354]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4356]||(t[4356]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedMemRefTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType, memorySpace)</span></span></code></pre></div><p>Creates an Unranked MemRef type with the given element type and in the given memory space. The type is owned by the context of element type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4355]||(t[4355]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5875-L5879",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",mf,[e("summary",null,[t[4357]||(t[4357]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedMemRefTypeGetChecked-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirUnrankedMemRefTypeGetChecked-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedMemRefTypeGetChecked")],-1)),t[4358]||(t[4358]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4360]||(t[4360]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedMemRefTypeGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, elementType, memorySpace)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirUnrankedMemRefTypeGet-Tuple{Any, Any}"><code>mlirUnrankedMemRefTypeGet</code></a>&quot; but returns a nullptr wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> on illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4359]||(t[4359]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5886-L5890",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",kf,[e("summary",null,[t[4361]||(t[4361]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedMemRefTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirUnrankedMemRefTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedMemRefTypeGetTypeID")],-1)),t[4362]||(t[4362]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4364]||(t[4364]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedMemRefTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an UnrankedMemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4363]||(t[4363]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5800-L5804",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",ff,[e("summary",null,[t[4365]||(t[4365]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedMemrefGetMemorySpace-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUnrankedMemrefGetMemorySpace-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedMemrefGetMemorySpace")],-1)),t[4366]||(t[4366]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4368]||(t[4368]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedMemrefGetMemorySpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Returns the memory spcae of the given Unranked MemRef type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4367]||(t[4367]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5935-L5939",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Rf,[e("summary",null,[t[4369]||(t[4369]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedTensorTypeGet-Tuple{Any}",href:"#Reactant.MLIR.API.mlirUnrankedTensorTypeGet-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedTensorTypeGet")],-1)),t[4370]||(t[4370]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4372]||(t[4372]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedTensorTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elementType)</span></span></code></pre></div><p>Creates an unranked tensor type with the given element type in the same context as the element type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4371]||(t[4371]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5762-L5766",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",If,[e("summary",null,[t[4373]||(t[4373]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedTensorTypeGetChecked-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirUnrankedTensorTypeGetChecked-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedTensorTypeGetChecked")],-1)),t[4374]||(t[4374]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4376]||(t[4376]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedTensorTypeGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, elementType)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirUnrankedTensorTypeGet-Tuple{Any}"><code>mlirUnrankedTensorTypeGet</code></a>&quot; but returns a nullptr wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> on illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4375]||(t[4375]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5771-L5775",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Tf,[e("summary",null,[t[4377]||(t[4377]=e("a",{id:"Reactant.MLIR.API.mlirUnrankedTensorTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirUnrankedTensorTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirUnrankedTensorTypeGetTypeID")],-1)),t[4378]||(t[4378]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4380]||(t[4380]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirUnrankedTensorTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an UnrankedTensor type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4379]||(t[4379]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5709-L5713",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Af,[e("summary",null,[t[4381]||(t[4381]=e("a",{id:"Reactant.MLIR.API.mlirValueDump-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueDump-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueDump")],-1)),t[4382]||(t[4382]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4384]||(t[4384]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueDump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Prints the value to the standard error stream.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4383]||(t[4383]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2177-L2181",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",jf,[e("summary",null,[t[4385]||(t[4385]=e("a",{id:"Reactant.MLIR.API.mlirValueEqual-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirValueEqual-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueEqual")],-1)),t[4386]||(t[4386]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4388]||(t[4388]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value1, value2)</span></span></code></pre></div><p>Returns 1 if two values are equal, 0 otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4387]||(t[4387]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2087-L2091",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_f,[e("summary",null,[t[4389]||(t[4389]=e("a",{id:"Reactant.MLIR.API.mlirValueGetContext-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueGetContext-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueGetContext")],-1)),t[4390]||(t[4390]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4392]||(t[4392]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueGetContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span></code></pre></div><p>Gets the context that a value was created with.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4391]||(t[4391]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2252-L2256",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Mf,[e("summary",null,[t[4393]||(t[4393]=e("a",{id:"Reactant.MLIR.API.mlirValueGetFirstUse-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueGetFirstUse-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueGetFirstUse")],-1)),t[4394]||(t[4394]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4396]||(t[4396]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueGetFirstUse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns an op operand representing the first use of the value, or a null op operand if there are no uses.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4395]||(t[4395]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2211-L2215",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Lf,[e("summary",null,[t[4397]||(t[4397]=e("a",{id:"Reactant.MLIR.API.mlirValueGetLocation-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueGetLocation-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueGetLocation")],-1)),t[4398]||(t[4398]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4400]||(t[4400]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueGetLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span></code></pre></div><p>Gets the location of the value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4399]||(t[4399]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2243-L2247",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ef,[e("summary",null,[t[4401]||(t[4401]=e("a",{id:"Reactant.MLIR.API.mlirValueGetType-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueGetType-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueGetType")],-1)),t[4402]||(t[4402]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4404]||(t[4404]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueGetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns the type of the value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4403]||(t[4403]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2159-L2163",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Cf,[e("summary",null,[t[4405]||(t[4405]=e("a",{id:"Reactant.MLIR.API.mlirValueIsABlockArgument-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueIsABlockArgument-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueIsABlockArgument")],-1)),t[4406]||(t[4406]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4408]||(t[4408]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueIsABlockArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns 1 if the value is a block argument, 0 otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4407]||(t[4407]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2096-L2100",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",vf,[e("summary",null,[t[4409]||(t[4409]=e("a",{id:"Reactant.MLIR.API.mlirValueIsAOpResult-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueIsAOpResult-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueIsAOpResult")],-1)),t[4410]||(t[4410]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4412]||(t[4412]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueIsAOpResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns 1 if the value is an operation result, 0 otherwise.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4411]||(t[4411]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2105-L2109",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Pf,[e("summary",null,[t[4413]||(t[4413]=e("a",{id:"Reactant.MLIR.API.mlirValueIsNull-Tuple{Any}",href:"#Reactant.MLIR.API.mlirValueIsNull-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueIsNull")],-1)),t[4414]||(t[4414]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4416]||(t[4416]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueIsNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre></div><p>Returns whether the value is null.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4415]||(t[4415]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2078-L2082",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",xf,[e("summary",null,[t[4417]||(t[4417]=e("a",{id:"Reactant.MLIR.API.mlirValuePrint-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirValuePrint-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValuePrint")],-1)),t[4418]||(t[4418]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4420]||(t[4420]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValuePrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, callback, userData)</span></span></code></pre></div><p>Prints a value by sending chunks of the string representation and forwarding <code>userData to</code>callback`. Note that the callback may be called several times with consecutive chunks of the string.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4419]||(t[4419]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2186-L2190",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Sf,[e("summary",null,[t[4421]||(t[4421]=e("a",{id:"Reactant.MLIR.API.mlirValuePrintAsOperand-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirValuePrintAsOperand-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValuePrintAsOperand")],-1)),t[4422]||(t[4422]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4424]||(t[4424]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValuePrintAsOperand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, state, callback, userData)</span></span></code></pre></div><p>Prints a value as an operand (i.e., the ValueID).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4423]||(t[4423]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2197-L2201",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Df,[e("summary",null,[t[4425]||(t[4425]=e("a",{id:"Reactant.MLIR.API.mlirValueReplaceAllUsesExcept-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirValueReplaceAllUsesExcept-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueReplaceAllUsesExcept")],-1)),t[4426]||(t[4426]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4428]||(t[4428]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueReplaceAllUsesExcept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(of, with, numExceptions, exceptions)</span></span></code></pre></div><p>Replace all uses of &#39;of&#39; value with &#39;with&#39; value, updating anything in the IR that uses &#39;of&#39; to use &#39;with&#39; instead, except if the user is listed in &#39;exceptions&#39;. The &#39;exceptions&#39; parameter is an array of <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirOperation"><code>MlirOperation</code></a> pointers with a length of &#39;numExceptions&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4427]||(t[4427]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2229-L2233",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Ff,[e("summary",null,[t[4429]||(t[4429]=e("a",{id:"Reactant.MLIR.API.mlirValueReplaceAllUsesOfWith-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirValueReplaceAllUsesOfWith-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueReplaceAllUsesOfWith")],-1)),t[4430]||(t[4430]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4432]||(t[4432]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueReplaceAllUsesOfWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(of, with)</span></span></code></pre></div><p>Replace all uses of &#39;of&#39; value with the &#39;with&#39; value, updating anything in the IR that uses &#39;of&#39; to use the other value instead. When this returns there are zero uses of &#39;of&#39;.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4431]||(t[4431]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2220-L2224",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Vf,[e("summary",null,[t[4433]||(t[4433]=e("a",{id:"Reactant.MLIR.API.mlirValueSetType-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirValueSetType-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirValueSetType")],-1)),t[4434]||(t[4434]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4436]||(t[4436]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirValueSetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, type)</span></span></code></pre></div><p>Set the type of the value.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4435]||(t[4435]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L2168-L2172",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Of,[e("summary",null,[t[4437]||(t[4437]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeGet-Tuple{Any, Any, Any}",href:"#Reactant.MLIR.API.mlirVectorTypeGet-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeGet")],-1)),t[4438]||(t[4438]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4440]||(t[4440]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rank, shape, elementType)</span></span></code></pre></div><p>Creates a vector type of the shape identified by its rank and dimensions, with the given element type in the same context as the element type. The type is owned by the context.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4439]||(t[4439]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5616-L5620",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Bf,[e("summary",null,[t[4441]||(t[4441]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeGetChecked-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirVectorTypeGetChecked-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeGetChecked")],-1)),t[4442]||(t[4442]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4444]||(t[4444]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeGetChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, rank, shape, elementType)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirVectorTypeGet-Tuple{Any, Any, Any}"><code>mlirVectorTypeGet</code></a>&quot; but returns a nullptr wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> on illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4443]||(t[4443]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5627-L5631",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Nf,[e("summary",null,[t[4445]||(t[4445]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeGetScalable-NTuple{4, Any}",href:"#Reactant.MLIR.API.mlirVectorTypeGetScalable-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeGetScalable")],-1)),t[4446]||(t[4446]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4448]||(t[4448]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeGetScalable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rank, shape, scalable, elementType)</span></span></code></pre></div><p>Creates a scalable vector type with the shape identified by its rank and dimensions. A subset of dimensions may be marked as scalable via the corresponding flag list, which is expected to have as many entries as the rank of the vector. The vector is created in the same context as the element type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4447]||(t[4447]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5638-L5642",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Gf,[e("summary",null,[t[4449]||(t[4449]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeGetScalableChecked-NTuple{5, Any}",href:"#Reactant.MLIR.API.mlirVectorTypeGetScalableChecked-NTuple{5, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeGetScalableChecked")],-1)),t[4450]||(t[4450]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4452]||(t[4452]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeGetScalableChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc, rank, shape, scalable, elementType)</span></span></code></pre></div><p>Same as &quot;<a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.mlirVectorTypeGetScalable-NTuple{4, Any}"><code>mlirVectorTypeGetScalable</code></a>&quot; but returns a nullptr wrapping <a href="/Reactant.jl/v0.2.75/api/mlirc#Reactant.MLIR.API.MlirType"><code>MlirType</code></a> on illegal arguments, emitting appropriate diagnostics.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4451]||(t[4451]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5649-L5653",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",zf,[e("summary",null,[t[4453]||(t[4453]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeGetTypeID-Tuple{}",href:"#Reactant.MLIR.API.mlirVectorTypeGetTypeID-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeGetTypeID")],-1)),t[4454]||(t[4454]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4456]||(t[4456]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeGetTypeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the typeID of an Vector type.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4455]||(t[4455]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5598-L5602",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",wf,[e("summary",null,[t[4457]||(t[4457]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeIsDimScalable-Tuple{Any, Any}",href:"#Reactant.MLIR.API.mlirVectorTypeIsDimScalable-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeIsDimScalable")],-1)),t[4458]||(t[4458]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4460]||(t[4460]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeIsDimScalable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, dim)</span></span></code></pre></div><p>Checks whether the &quot;dim&quot;-th dimension of the given vector is scalable.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4459]||(t[4459]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5673-L5677",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Uf,[e("summary",null,[t[4461]||(t[4461]=e("a",{id:"Reactant.MLIR.API.mlirVectorTypeIsScalable-Tuple{Any}",href:"#Reactant.MLIR.API.mlirVectorTypeIsScalable-Tuple{Any}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.API.mlirVectorTypeIsScalable")],-1)),t[4462]||(t[4462]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[4464]||(t[4464]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mlirVectorTypeIsScalable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span></code></pre></div><p>Checks whether the given vector type is scalable, i.e., has at least one scalable dimension.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[4463]||(t[4463]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/79f9dc5d0f40dc5f55856a40ce491bd97e443aac/src/mlir/libMLIR_h.jl#L5664-L5668",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),t[4467]||(t[4467]=e("h1",{id:"Other-Functions",tabindex:"-1"},[i("Other Functions "),e("a",{class:"header-anchor",href:"#Other-Functions","aria-label":'Permalink to "Other Functions {#Other-Functions}"'},"​")],-1))])}const Xf=r(u,[["render",qf]]);export{$f as __pageData,Xf as default};
