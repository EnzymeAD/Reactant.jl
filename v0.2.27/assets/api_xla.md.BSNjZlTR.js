import{_ as n,C as o,c as d,o as p,j as e,a,a2 as i,G as l}from"./chunks/framework.CQVisiuX.js";const f=JSON.parse('{"title":"XLA","description":"","frontmatter":{},"headers":[],"relativePath":"api/xla.md","filePath":"api/xla.md","lastUpdated":null}'),r={name:"api/xla.md"},c={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"};function b(u,t,_,g,y,m){const s=o("Badge");return p(),d("div",null,[t[12]||(t[12]=e("h1",{id:"xla",tabindex:"-1"},[a("XLA "),e("a",{class:"header-anchor",href:"#xla","aria-label":'Permalink to "XLA"'},"â€‹")],-1)),e("details",c,[e("summary",null,[t[0]||(t[0]=e("a",{id:"Reactant.XLA.AllocatorStats",href:"#Reactant.XLA.AllocatorStats"},[e("span",{class:"jlbinding"},"Reactant.XLA.AllocatorStats")],-1)),t[1]||(t[1]=a()),l(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[2]||(t[2]=i('<p>AllocatorStats()</p><p>Contains the following fields:</p><ul><li><p><code>num_allocs</code></p></li><li><p><code>bytes_in_use</code></p></li><li><p><code>peak_bytes_in_use</code></p></li><li><p><code>largest_alloc_size</code></p></li><li><p><code>bytes_limit</code></p></li><li><p><code>bytes_reserved</code></p></li><li><p><code>peak_bytes_reserved</code></p></li><li><p><code>bytes_reservable_limit</code></p></li><li><p><code>largest_free_block_bytes</code></p></li><li><p><code>pool_bytes</code></p></li><li><p><code>peak_pool_bytes</code></p></li></ul><p>It should be constructed using the <a href="/Reactant.jl/v0.2.27/api/xla#Reactant.XLA.allocatorstats"><code>allocatorstats</code></a> function.</p><p><a href="https://github.com/EnzymeAD/Reactant.jl/blob/01d2904287f2bdb7d8864eedfa1007c1db1be3ac/src/xla/Stats.jl#L16-L33" target="_blank" rel="noreferrer">source</a></p>',5))]),e("details",h,[e("summary",null,[t[3]||(t[3]=e("a",{id:"Reactant.XLA.allocatorstats",href:"#Reactant.XLA.allocatorstats"},[e("span",{class:"jlbinding"},"Reactant.XLA.allocatorstats")],-1)),t[4]||(t[4]=a()),l(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[5]||(t[5]=e("p",null,"allocatorstats([device])",-1)),t[6]||(t[6]=e("p",null,[a("Return an "),e("a",{href:"/Reactant.jl/v0.2.27/api/xla#Reactant.XLA.AllocatorStats"},[e("code",null,"AllocatorStats")]),a(" instance with information about the device specific allocator.")],-1)),t[7]||(t[7]=e("div",{class:"warning custom-block"},[e("p",{class:"custom-block-title"},"Warning"),e("p",null,"This method is currently not implemented for the CPU device.")],-1)),t[8]||(t[8]=e("p",null,[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/01d2904287f2bdb7d8864eedfa1007c1db1be3ac/src/xla/Stats.jl#L48-L55",target:"_blank",rel:"noreferrer"},"source")],-1))]),e("details",k,[e("summary",null,[t[9]||(t[9]=e("a",{id:"Reactant.XLA.device_ordinal-Tuple{Reactant.XLA.Client, Reactant.XLA.Device}",href:"#Reactant.XLA.device_ordinal-Tuple{Reactant.XLA.Client, Reactant.XLA.Device}"},[e("span",{class:"jlbinding"},"Reactant.XLA.device_ordinal")],-1)),t[10]||(t[10]=a()),l(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[11]||(t[11]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device_ordinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device_ordinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, local_device_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Given the device or local device id, return the corresponding global device ordinal in the client.</p><p><a href="https://github.com/EnzymeAD/Reactant.jl/blob/01d2904287f2bdb7d8864eedfa1007c1db1be3ac/src/xla/Device.jl#L18-L23" target="_blank" rel="noreferrer">source</a></p>`,3))])])}const v=n(r,[["render",b]]);export{f as __pageData,v as default};
