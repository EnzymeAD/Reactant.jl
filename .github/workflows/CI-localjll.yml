name: CI with local libReactant

on:
  pull_request:
    paths:
      - '.github/workflows/CI-localjll.yml'
      - 'deps/**'
  push:
    branches:
      - main
      - release-*
    tags: '*'
    paths:
      - '.github/workflows/CI-localjll.yml'
      - 'deps/**'

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - local libReactant - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ contains(matrix.os, 'linux') && 'ghcr.io/enzymead/reactant-docker-images@sha256:7004a6ebbdd77bd047900b2bffc542e8576864056dc27a9c94d30666d6f7ea01' || '' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1.11'
        os:
          - linux-x86-n2-32
          - macOS-latest
        exclude:
          - os: macOS-latest
            version: '1.10'
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      - name: Clean `/opt`
        run: sudo rm -rf /opt/*
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      - uses: actions/checkout@v4
      - name: Set and create TMPDIR
        # We have to use `${GITHUB_WORKSPACE}` instead of `github.workspace` because GitHub
        # is terrible and the two don't match inside containers:
        # https://github.com/actions/runner/issues/2058
        run: |
          export TMPDIR="${GITHUB_WORKSPACE}/tmp"
          echo "TMPDIR=${TMPDIR}" >> "${GITHUB_ENV}"

          mkdir -pv "${TMPDIR}"
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - name: Load Julia packages from cache
        id: julia-cache
        uses: julia-actions/cache@v2
      - uses: bazel-contrib/setup-bazel@0.15.0
        name: Set up Bazel
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}-${{ matrix.os }}-${{ matrix.version }}
          # Share repository cache between workflows.
          repository-cache: true
          bazelisk-version: 1.x
      - name: Prepare build on macOS
        if: ${{ startsWith(matrix.os, 'macOS-') }}
        run: |
          echo "SDKROOT=$(xcrun --show-sdk-path)" >> "${GITHUB_ENV}"
      - name: Install numpy
        if: ${{ startsWith(matrix.os, 'macOS-') }}
        run: |
          python -m pip install numpy
      - name: Build libReactant
        timeout-minutes: 120
        run: |
          julia --color=yes --project=deps -e 'using Pkg; Pkg.instantiate()'
          julia --color=yes --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - name: "Setup Runtime Preferences"
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.instantiate()
          using Preferences
          Preferences.set_preferences!("Reactant", "xla_runtime" => "PJRT"; force=true)
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        env:
          JULIA_PKG_PRECOMPILE_AUTO: 0
      - name: "Install Dependencies"
        run: |
          import Pkg
          Pkg.Registry.update()
          # Install packages present in subdirectories
          dev_pks = Pkg.PackageSpec[]
          for path in ("lib/ReactantCore",)
              push!(dev_pks, Pkg.PackageSpec(; path))
          end
          Pkg.develop(dev_pks)
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        # Only in Julia v1.10 we need to install `ReactantCore` manually.
        if: ${{ matrix.version == '1.10' }}
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      - name: "Run Tests: PJRT"
        timeout-minutes: 200
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.test(; coverage="user")
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
          XLA_FLAGS: "--xla_force_host_platform_device_count=12"
          JULIA_DEBUG: "Reactant,Reactant_jll"
      - name: Upload MLIR modules (PJRT)
        uses: actions/upload-artifact@v4
        timeout-minutes: 10
        if: ${{ always() }}
        with:
          name: "mlir-localjll-PJRT-${{ matrix.version }}-${{ matrix.os }}-${{ github.event_name }}"
          path: "**/*.mlir"
          retention-days: 90
          overwrite: false
      - name: "Setup Runtime Preferences"
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.instantiate()
          using Preferences
          Preferences.set_preferences!("Reactant", "xla_runtime" => "IFRT"; force=true)
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        env:
          JULIA_PKG_PRECOMPILE_AUTO: 0
      - name: "Run Tests: IFRT"
        timeout-minutes: 200
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.test(; coverage="user")
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
          XLA_FLAGS: "--xla_force_host_platform_device_count=12"
          JULIA_DEBUG: "Reactant,Reactant_jll"
      - name: Upload MLIR modules (IFRT)
        uses: actions/upload-artifact@v4
        timeout-minutes: 10
        if: ${{ always() }}
        with:
          name: "mlir-localjll-IFRT-${{ matrix.version }}-${{ matrix.os }}-${{ github.event_name }}"
          path: "**/*.mlir"
          retention-days: 90
          overwrite: false
      - name: Save Julia depot cache on cancel or failure
        id: julia-cache-save
        if: cancelled() || failure()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ steps.julia-cache.outputs.cache-paths }}
          key: ${{ steps.julia-cache.outputs.cache-key }}
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
