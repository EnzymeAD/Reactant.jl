name: Common Reactant CI Workflow

on:
  workflow_call:
    inputs:
      julia_version:
        description: "Julia version"
        required: true
        type: string
      os:
        description: "OS"
        required: true
        type: string
      runtime:
        description: "XLA Runtime (pjrt | ifrt | both)"
        required: true
        type: string
      assertions:
        description: "Enable assertions"
        required: false
        default: false
        type: boolean
      localjll:
        description: "Use local libReactant"
        required: false
        default: false
        type: boolean
      test_group:
        description: "Test group"
        required: false
        default: "all"
        type: string
      downgrade_testing:
        description: "Downgrade testing"
        required: false
        default: false
        type: boolean
      project:
        description: "Project"
        required: false
        default: "."
        type: string

jobs:
  test:
    runs-on: ${{ inputs.os }}
    container:
      image: ${{ contains(inputs.os, 'linux') && 'ghcr.io/enzymead/reactant-docker-images:main' || '' }}
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
        if: ${{ startsWith(inputs.os, 'ubuntu-') && inputs.localjll }}
      - name: Clean `/opt`
        run: sudo rm -rf /opt/*
        if: ${{ startsWith(inputs.os, 'ubuntu-') && inputs.localjll }}

      - uses: actions/checkout@v5

      - name: Set TMPDIR and create directory
        # We have to use `${GITHUB_WORKSPACE}` instead of `github.workspace` because GitHub
        # is terrible and the two don't match inside containers:
        # https://github.com/actions/runner/issues/2058
        if: ${{ !startsWith(inputs.os, 'windows-') }}
        run: |
          export TMPDIR="${GITHUB_WORKSPACE}/tmp"
          mkdir -p "$TMPDIR"
          echo "TMPDIR=$TMPDIR" >> $GITHUB_ENV

      - uses: julia-actions/setup-julia@v2
        if: ${{ ! inputs.assertions }}
        with:
          version: ${{ inputs.julia_version }}
      - uses: julia-actions/cache@v2
        id: julia-cache
        with:
          cache-name: julia-cache;workflow=${{ inputs.julia_version }}-${{ inputs.os }}-${{ inputs.runtime }}-assertions=${{ inputs.assertions }}-${{ github.event_name }}-${{ inputs.test_group }}-${{ inputs.downgrade_testing }}-${{ inputs.localjll }}

      - uses: julia-actions/julia-downgrade-compat@v2
        if: ${{ inputs.downgrade_testing }}
        with:
          skip: "ReactantCore"
          julia_version: ${{ inputs.julia_version }}

      # Local build of libReactant
      - uses: bazel-contrib/setup-bazel@0.15.0
        if: ${{ inputs.localjll }}
        name: Set up Bazel
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}-${{ inputs.os }}-${{ inputs.julia_version }}
          # Share repository cache between workflows.
          repository-cache: true
          bazelisk-version: 1.x
      - name: Prepare build on macOS
        if: ${{ startsWith(inputs.os, 'macOS-') && inputs.localjll }}
        run: |
          echo "SDKROOT=$(xcrun --show-sdk-path)" >> "${GITHUB_ENV}"
      - name: Install numpy
        if: ${{ startsWith(inputs.os, 'macOS-') && inputs.localjll }}
        run: |
          python -m pip install numpy
      - name: Build libReactant
        timeout-minutes: 120
        if: ${{ inputs.localjll }}
        run: |
          julia --color=yes --project=deps -e 'using Pkg; Pkg.instantiate()'
          julia --color=yes --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/

      # Compile Julia if assertions are enabled
      - uses: actions/checkout@v5
        if: ${{ inputs.assertions }}
        with:
          repository: "JuliaLang/julia"
          ref: release-${{ inputs.julia_version }}
          path: "julia"
      - name: Compile Julia
        if: ${{ inputs.assertions }}
        run: |
          sed -i.bak 's/exit 2/exit 0/g' julia/deps/tools/jlchecksum
          make -C julia -j $(nproc) FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 JULIA_PRECOMPILE=0
          echo $PWD/julia/usr/bin >> $GITHUB_PATH

      # Install dependencies (specifically ReactantCore subdirectory for 1.10)
      - name: "Install Dependencies"
        run: |
          import Pkg
          Pkg.Registry.update()
          # Install packages present in subdirectories
          dev_pks = Pkg.PackageSpec[]
          for path in ("lib/ReactantCore",)
              push!(dev_pks, Pkg.PackageSpec(; path))
          end
          Pkg.develop(dev_pks)
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        if: ${{ inputs.julia_version == '1.10' || inputs.julia_version == 'lts' }}

      - name: Install Project
        if: ${{ inputs.project != '.' }}
        run: |
          import Pkg
          Pkg.activate(get(ENV, "JULIA_PROJECT", nothing))
          if VERSION < v"1.11-"
              Pkg.develop([
                Pkg.PackageSpec(; path="."),
                Pkg.PackageSpec(; path="lib/ReactantCore")
              ])
          end
          Pkg.instantiate()
        shell: julia --color=yes --code-coverage=user --depwarn=yes {0}
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
          JULIA_PROJECT: ${{ inputs.project }}

      # Run the tests (pjrt or ifrt or both)
      - name: "Setup Runtime Preferences (PJRT)"
        if: ${{ inputs.runtime == 'pjrt' || inputs.runtime == 'both' }}
        uses: "DamianReeves/write-file-action@master"
        with:
          path: "LocalPreferences.toml"
          write-mode: "overwrite"
          contents: |
            [Reactant]
            xla_runtime = "PJRT"

      - name: "Run Tests (PJRT)"
        if: ${{ (inputs.runtime == 'pjrt' || inputs.runtime == 'both') && inputs.project == '.' }}
        timeout-minutes: 120
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.test(;
            coverage="user",
            allow_reresolve=parse(Bool, get(ENV, "ALLOW_RERESOLVE", "true"))
          )
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        env:
          ALLOW_RERESOLVE: ${{ !inputs.downgrade_testing }}
          REACTANT_TEST_GROUP: ${{ inputs.test_group }}
      - name: "Run Integration Tests (PJRT)"
        if: ${{ (inputs.runtime == 'pjrt' || inputs.runtime == 'both') && inputs.project != '.' }}
        timeout-minutes: 30
        run: julia --color=yes --project=test/integration/${{ inputs.project }} --threads=auto --check-bounds=yes -O1 test/integration/${{ inputs.project }}/runtests.jl
        shell: bash

      - name: "Setup Runtime Preferences (IFRT)"
        if: ${{ inputs.runtime == 'ifrt' || inputs.runtime == 'both' }}
        uses: "DamianReeves/write-file-action@master"
        with:
          path: "LocalPreferences.toml"
          write-mode: "overwrite"
          contents: |
            [Reactant]
            xla_runtime = "IFRT"

      - name: "Run Tests (IFRT)"
        if: ${{ (inputs.runtime == 'ifrt' || inputs.runtime == 'both') && inputs.project == '.' }}
        timeout-minutes: 120
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.test(;
            coverage="user",
            allow_reresolve=parse(Bool, get(ENV, "ALLOW_RERESOLVE", "true"))
          )
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        env:
          ALLOW_RERESOLVE: ${{ !inputs.downgrade_testing }}
          REACTANT_TEST_GROUP: ${{ inputs.test_group }}
      - name: "Run Integration Tests (IFRT)"
        if: ${{ (inputs.runtime == 'ifrt' || inputs.runtime == 'both') && inputs.project != '.' }}
        timeout-minutes: 30
        run: julia --color=yes --project=test/integration/${{ inputs.project }} --threads=auto --check-bounds=yes -O1 test/integration/${{ inputs.project }}/runtests.jl
        shell: bash

      - name: "Upload MLIR modules"
        uses: actions/upload-artifact@v4
        timeout-minutes: 10
        if: always()
        with:
          name: "mlir-${{ inputs.julia_version }}-${{ inputs.os }}-${{ inputs.runtime }}-assertions=${{ inputs.assertions }}-${{ github.event_name }}-test_group=${{ inputs.test_group }}-${{ inputs.localjll }}"
          path: "**/*.mlir"
          retention-days: 90
          overwrite: false

      - name: Save Julia depot cache on cancel or failure
        if: cancelled() || failure()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ steps.julia-cache.outputs.cache-paths }}
          key: ${{ steps.julia-cache.outputs.cache-key }}

      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

env:
  JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
  XLA_FLAGS: "--xla_force_host_platform_device_count=12"
  JULIA_DEBUG: "Reactant,Reactant_jll"
