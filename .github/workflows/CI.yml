name: CI
on:
  pull_request:
  push:
    branches:
      - main
      - release-*
    tags: '*'

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.test_group }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.libReactant }} libReactant - assertions=${{ matrix.assertions }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '~1.11.0-0'
          - 'nightly'
        os:
          - ubuntu-20.04
          - macOS-latest
        test_group:
          - core
          - neural_networks
        arch:
          - x64
        assertions:
          - false
        libReactant: [packaged]
        include:
          - os: ubuntu-20.04
            arch: x64
            libReactant: packaged
            version: '1.10'
            assertions: true
            test_group: core
          - os: ubuntu-20.04
            arch: x64
            libReactant: packaged
            version: '1.10'
            assertions: true
            test_group: neural_networks
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        if: ${{ ! matrix.assertions }}
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: actions/checkout@v4
        if: ${{ matrix.assertions }}
        with:
          repository: 'JuliaLang/julia'
          ref: release-${{ matrix.version }}
          path: 'julia'
      - name: Compile Julia
        if: ${{ matrix.assertions }}
        run: |
          sed -i.bak 's/exit 2/exit 0/g' julia/deps/tools/jlchecksum
          make -C julia -j $(nproc) FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 JULIA_PRECOMPILE=0
          echo $PWD/julia/usr/bin >> $GITHUB_PATH
      - name: Build libReactant
        if: ${{ matrix.libReactant == 'local' && matrix.os != 'macOS-latest'}}
        id: build_libreactant
        run: |
          python -m pip install numpy
          julia --color=yes --project=deps -e 'using Pkg; Pkg.instantiate()'
          julia --color=yes --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - name: Build libReactant MacOS
        if: ${{ matrix.libReactant == 'local' && matrix.os == 'macOS-latest'}}
        id: build_libreactant_mac
        run: |
          python -m pip install numpy
          julia --color=yes --project=deps -e 'using Pkg; Pkg.instantiate()'
          SDKROOT=`xcrun --show-sdk-path` julia --color=yes --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - name: "Install Dependencies and Run Tests"
        run: |
          import Pkg
          Pkg.Registry.update()
          # Install packages present in subdirectories
          dev_pks = Pkg.PackageSpec[]
          for path in ("lib/ReactantCore",)
              push!(dev_pks, Pkg.PackageSpec(; path))
          end
          Pkg.develop(dev_pks)
          Pkg.instantiate()
          Pkg.test(; coverage="user")
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        id: run_tests
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
          REACTANT_TEST_GROUP: ${{ matrix.test_group }}
      - uses: julia-actions/julia-processcoverage@v1
        if: steps.run_tests.outcome == 'success'
      - uses: codecov/codecov-action@v4
        if: steps.run_tests.outcome == 'success'
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - run: |
          julia --color=yes --project=docs -e '
            using Pkg
            Pkg.develop([
              PackageSpec(path=pwd()),
              PackageSpec("Reactant_jll"),
              PackageSpec(path="lib/ReactantCore")
            ])
            Pkg.instantiate()'
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      - run: |
          julia --color=yes --project=docs -e '
            using Documenter: DocMeta, doctest
            using Reactant
            DocMeta.setdocmeta!(Reactant, :DocTestSetup, :(using Reactant); recursive=true)
            doctest(Reactant)'
      - run: julia --color=yes --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
