name: CI

on:
  pull_request:
    paths:
      - '.github/workflows/CI.yml'
      - 'deps/**'
      - 'ext/**'
      - 'lib/**'
      - 'src/**'
      - 'test/**'
      - 'Project.toml'
  push:
    branches:
      - main
      - release-*
    tags: '*'
    paths:
      - '.github/workflows/CI.yml'
      - 'deps/**'
      - 'ext/**'
      - 'lib/**'
      - 'src/**'
      - 'test/**'
      - 'Project.toml'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: Run the build with tmate debugging enabled
        required: false
        default: false
      debug_os:
        type: choice
        description: OS to debug
        options:
          - ubuntu-20.04
          - ubuntu-24.04-arm
          - macOS-latest
          - any
        required: false
        default: ubuntu-24.04-arm
      debug_arch:
        type: choice
        description: Architecture to debug
        options:
          - x64
          - aarch64
          - any
        required: false
        default: aarch64
      debug_detached:
        type: boolean
        description: 'Run tmate in detached mode (continues with workflow while waiting for connection)'
        required: false
        default: true



concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.test_group }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.libReactant }} libReactant - assertions=${{ matrix.assertions }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1.11'
          # - 'nightly'
        os:
          - ubuntu-20.04
          - ubuntu-24.04-arm
          - macOS-latest
        test_group:
          - core
          - neural_networks
          - integration
        arch:
          - x64
          - aarch64
        assertions:
          - false
        libReactant: [packaged]
        include:
          - os: ubuntu-20.04
            arch: x64
            libReactant: packaged
            version: '1.10'
            assertions: true
            test_group: core
          - os: ubuntu-20.04
            arch: x64
            libReactant: packaged
            version: '1.10'
            assertions: true
            test_group: neural_networks
          - os: ubuntu-20.04
            arch: x64
            libReactant: packaged
            version: '1.10'
            assertions: true
            test_group: integration
          # - os: ubuntu-20.04
          #   arch: x86
          #   libReactant: packaged
          #   version: '1.10'
          #   test_group: core
          # - os: ubuntu-20.04
          #   arch: x86
          #   libReactant: packaged
          #   version: '1.10'
          #   test_group: neural_networks
          # - os: ubuntu-20.04
          #   arch: x86
          #   libReactant: packaged
          #   version: '1.10'
          #   test_group: integration
        exclude:
          - os: ubuntu-20.04 # this is x86_64, exclude foreign architecture
            arch: aarch64
          - os: ubuntu-24.04-arm # this is aarch64, exclude foreign architecture
            arch: x64
    steps:
      - uses: actions/checkout@v4
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: |
          github.event_name == 'workflow_dispatch' &&
          inputs.debug_enabled == true &&
          (inputs.debug_os == 'any' || inputs.debug_os == matrix.os) &&
          (inputs.debug_arch == 'any' || inputs.debug_arch == matrix.arch)
        with:
          detached: ${{ inputs.debug_detached }}
      - uses: julia-actions/setup-julia@v2
        if: ${{ ! matrix.assertions }}
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: actions/checkout@v4
        if: ${{ matrix.assertions }}
        with:
          repository: 'JuliaLang/julia'
          ref: release-${{ matrix.version }}
          path: 'julia'
      - name: Compile Julia
        if: ${{ matrix.assertions }}
        run: |
          sed -i.bak 's/exit 2/exit 0/g' julia/deps/tools/jlchecksum
          make -C julia -j $(nproc) FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 JULIA_PRECOMPILE=0
          echo $PWD/julia/usr/bin >> $GITHUB_PATH
      - name: Build libReactant
        if: ${{ matrix.libReactant == 'local' && matrix.os != 'macOS-latest'}}
        id: build_libreactant
        run: |
          python -m pip install numpy
          julia --color=yes --project=deps -e 'using Pkg; Pkg.instantiate()'
          julia --color=yes --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - name: Build libReactant MacOS
        if: ${{ matrix.libReactant == 'local' && matrix.os == 'macOS-latest'}}
        id: build_libreactant_mac
        run: |
          python -m pip install numpy
          julia --color=yes --project=deps -e 'using Pkg; Pkg.instantiate()'
          SDKROOT=`xcrun --show-sdk-path` julia --color=yes --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - name: "Install Dependencies and Run Tests"
        run: |
          import Pkg
          Pkg.Registry.update()
          # Install packages present in subdirectories
          dev_pks = Pkg.PackageSpec[]
          for path in ("lib/ReactantCore",)
              push!(dev_pks, Pkg.PackageSpec(; path))
          end
          Pkg.develop(dev_pks)
          Pkg.test(; coverage="user")
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=. {0}
        id: run_tests
        env:
          JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
          REACTANT_TEST_GROUP: ${{ matrix.test_group }}
      - uses: julia-actions/julia-processcoverage@v1
        if: steps.run_tests.outcome == 'success'
      - uses: codecov/codecov-action@v5
        if: steps.run_tests.outcome == 'success'
        with:
          files: lcov.info
