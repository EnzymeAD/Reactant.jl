import{_ as i,C as Q,c as o,o as r,j as e,a as l,G as s,w as n,al as T}from"./chunks/framework.B84r1DG9.js";const i1=JSON.parse('{"title":"Triton Dialect","description":"","frontmatter":{},"headers":[],"relativePath":"api/dialects/triton.md","filePath":"api/dialects/triton.md","lastUpdated":null}'),d={name:"api/dialects/triton.md"},p={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},I={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},x={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"20.248ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 8949.4 1000","aria-hidden":"true"},k={class:"jldocstring custom-block"},j={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},w={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"26.094ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 11533.4 1000","aria-hidden":"true"},D={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},V={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.772ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 6087.3 1000","aria-hidden":"true"},H={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},Z={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},A={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.011ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3541 1000","aria-hidden":"true"},E={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.011ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3541 1000","aria-hidden":"true"},z={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},O={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.778ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3438 1000","aria-hidden":"true"},S={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},t1={class:"jldocstring custom-block"},e1={class:"jldocstring custom-block"};function a1(l1,t,s1,n1,T1,o1){const a=Q("Badge");return r(),o("div",null,[t[194]||(t[194]=e("h1",{id:"Triton-Dialect",tabindex:"-1"},[l("Triton Dialect "),e("a",{class:"header-anchor",href:"#Triton-Dialect","aria-label":'Permalink to "Triton Dialect {#Triton-Dialect}"'},"​")],-1)),t[195]||(t[195]=e("p",null,[l("Refer to the "),e("a",{href:"https://triton-lang.org/main/dialects/TritonDialect.html",target:"_blank",rel:"noreferrer"},"official documentation"),l(" for more details.")],-1)),e("details",p,[e("summary",null,[t[0]||(t[0]=e("a",{id:"Reactant.MLIR.Dialects.tt.assert-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.assert-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.assert")],-1)),t[1]||(t[1]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3]||(t[3]=e("p",null,[e("code",null,"assert")],-1)),t[4]||(t[4]=e("p",null,[e("code",null,"tt.assert"),l(" takes a condition tensor and a message string. If the condition is false, the message is printed, and the program is aborted.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[2]||(t[2]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L229-L234",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",m,[e("summary",null,[t[5]||(t[5]=e("a",{id:"Reactant.MLIR.Dialects.tt.atomic_cas-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.atomic_cas-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.atomic_cas")],-1)),t[6]||(t[6]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[8]||(t[8]=e("p",null,[e("code",null,"atomic_cas")],-1)),t[9]||(t[9]=e("p",null,"compare cmp with data old at location ptr,",-1)),t[10]||(t[10]=e("p",null,"if old == cmp, store val to ptr,",-1)),t[11]||(t[11]=e("p",null,"else store old to ptr,",-1)),t[12]||(t[12]=e("p",null,"return old",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[7]||(t[7]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L254-L264",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",u,[e("summary",null,[t[13]||(t[13]=e("a",{id:"Reactant.MLIR.Dialects.tt.atomic_rmw",href:"#Reactant.MLIR.Dialects.tt.atomic_rmw"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.atomic_rmw")],-1)),t[14]||(t[14]=l()),s(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[16]||(t[16]=e("p",null,[e("code",null,"atomic_rmw")],-1)),t[17]||(t[17]=e("p",null,"load data at ptr, do rmw_op with val, and store result to ptr.",-1)),t[18]||(t[18]=e("p",null,"return old value at ptr",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[15]||(t[15]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L286-L292",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",c,[e("summary",null,[t[19]||(t[19]=e("a",{id:"Reactant.MLIR.Dialects.tt.broadcast-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.broadcast-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.broadcast")],-1)),t[20]||(t[20]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[22]||(t[22]=e("p",null,[e("code",null,"broadcast")],-1)),t[23]||(t[23]=e("p",null,"For a given tensor, broadcast changes one or more dimensions with size 1 to a new size, e.g. tensor<1x32x1xf32> -> tensor<2x32x4xf32>. You cannot change the size of a non-1 dimension.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[21]||(t[21]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L345-L351",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",f,[e("summary",null,[t[24]||(t[24]=e("a",{id:"Reactant.MLIR.Dialects.tt.call-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.call-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.call")],-1)),t[25]||(t[25]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[27]||(t[27]=T('<p><code>call</code></p><p>The <code>tt.call</code> operation represents a direct call to a function that is within the same symbol scope as the call. The operands and result types of the call must match the specified function type. The callee is encoded as a symbol reference attribute named &quot;callee&quot;.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%2 = tt.call @my_add(%0, %1) : (f32, f32) -&gt; f32</span></span></code></pre></div>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[26]||(t[26]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L16-L29",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",R,[e("summary",null,[t[28]||(t[28]=e("a",{id:"Reactant.MLIR.Dialects.tt.clampf-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.clampf-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.clampf")],-1)),t[29]||(t[29]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[31]||(t[31]=e("p",null,[e("code",null,"clampf")],-1)),t[32]||(t[32]=e("p",null,"Clamp operation for floating point types.",-1)),t[33]||(t[33]=e("p",null,"The operation takes three arguments: x, min, and max. It returns a tensor of the same shape as x with its values clamped to the range [min, max].",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[30]||(t[30]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L390-L396",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",g,[e("summary",null,[t[34]||(t[34]=e("a",{id:"Reactant.MLIR.Dialects.tt.descriptor_gather-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.descriptor_gather-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.descriptor_gather")],-1)),t[35]||(t[35]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[37]||(t[37]=e("p",null,[e("code",null,"descriptor_gather")],-1)),t[38]||(t[38]=e("p",null,[l("The "),e("code",null,"tt.descriptor_gather"),l(" op will be lowered to NVIDIA TMA gather operations on targets that support it.")],-1)),t[39]||(t[39]=e("p",null,[e("code",null,"desc_ptr"),l(" is a pointer to the TMA descriptor allocated in global memory. The descriptor block must have 1 row and the indices must be a 1D tensor. Accordingly, the result is a 2D tensor multiple rows.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[36]||(t[36]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L424-L433",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",b,[e("summary",null,[t[40]||(t[40]=e("a",{id:"Reactant.MLIR.Dialects.tt.descriptor_load-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.descriptor_load-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.descriptor_load")],-1)),t[41]||(t[41]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[43]||(t[43]=e("p",null,[e("code",null,"descriptor_load")],-1)),t[44]||(t[44]=e("p",null,[l("This operation will be lowered to Nvidia TMA load operation on targets supporting it. "),e("code",null,"desc"),l(" is a tensor descriptor object. The destination tensor type and shape must match the descriptor otherwise the result is undefined.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[42]||(t[42]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L455-L461",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",h,[e("summary",null,[t[45]||(t[45]=e("a",{id:"Reactant.MLIR.Dialects.tt.descriptor_reduce-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.descriptor_reduce-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.descriptor_reduce")],-1)),t[46]||(t[46]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[48]||(t[48]=e("p",null,[e("code",null,"descriptor_reduce")],-1)),t[49]||(t[49]=e("p",null,[l("This operation will be lowered to Nvidia TMA store operation on targets supporting it. "),e("code",null,"desc"),l(" is a tensor descriptor object. The shape and types of "),e("code",null,"src"),l(" must match the descriptor otherwise the result is undefined.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[47]||(t[47]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L490-L496",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",L,[e("summary",null,[t[50]||(t[50]=e("a",{id:"Reactant.MLIR.Dialects.tt.descriptor_scatter-NTuple{4, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.descriptor_scatter-NTuple{4, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.descriptor_scatter")],-1)),t[51]||(t[51]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[53]||(t[53]=e("p",null,[e("code",null,"descriptor_scatter")],-1)),t[54]||(t[54]=e("p",null,[l("The "),e("code",null,"tt.descriptor_scatter"),l(" op will be lowered to NVIDIA TMA scatter operations on targets that support it.")],-1)),t[55]||(t[55]=e("p",null,[e("code",null,"desc_ptr"),l(" is a pointer to the TMA descriptor allocated in global memory. The descriptor block must have 1 row and the indices must be a 1D tensor. Accordingly, the result is a 2D tensor multiple rows.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[52]||(t[52]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L518-L527",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",M,[e("summary",null,[t[56]||(t[56]=e("a",{id:"Reactant.MLIR.Dialects.tt.descriptor_store-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.descriptor_store-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.descriptor_store")],-1)),t[57]||(t[57]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[59]||(t[59]=e("p",null,[e("code",null,"descriptor_store")],-1)),t[60]||(t[60]=e("p",null,[l("This operation will be lowered to Nvidia TMA store operation on targets supporting it. "),e("code",null,"desc"),l(" is a tensor descriptor object. The shape and types of "),e("code",null,"src"),l(" must match the descriptor otherwise the result is undefined.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[58]||(t[58]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L549-L555",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",y,[e("summary",null,[t[61]||(t[61]=e("a",{id:"Reactant.MLIR.Dialects.tt.dot-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.dot-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.dot")],-1)),t[62]||(t[62]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[66]||(t[66]=e("p",null,[e("code",null,"dot")],-1)),e("mjx-container",I,[(r(),o("svg",x,t[63]||(t[63]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1853.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2731.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3260.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3621.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4072.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(4417.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(5693.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6265.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6563.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6924.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7269.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7772.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8070.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8560.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[64]||(t[64]=e("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[e("mi",null,"d"),e("mo",null,"="),e("mi",null,"m"),e("mi",null,"a"),e("mi",null,"t"),e("mi",null,"r"),e("mi",null,"i"),e("msub",null,[e("mi",null,"x"),e("mi",null,"m")]),e("mi",null,"u"),e("mi",null,"l"),e("mi",null,"t"),e("mi",null,"i"),e("mi",null,"p"),e("mi",null,"l"),e("mi",null,"y"),e("mo",{stretchy:"false"},"(")])],-1))]),t[67]||(t[67]=e("p",null,"a, b) + c. inputPrecision describes how to exercise the TC when the inputs are f32. It can be one of: tf32, tf32x3, ieee. tf32: use TC with tf32 ops. tf32x3: implement the 3xTF32 trick. For more info see the pass in F32DotTC.cpp ieee: don't use TC, implement dot in software. If the GPU does not have Tensor cores or the inputs are not f32, this flag is ignored.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[65]||(t[65]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L577-L586",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",k,[e("summary",null,[t[68]||(t[68]=e("a",{id:"Reactant.MLIR.Dialects.tt.dot_scaled",href:"#Reactant.MLIR.Dialects.tt.dot_scaled"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.dot_scaled")],-1)),t[69]||(t[69]=l()),s(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[77]||(t[77]=e("p",null,[e("code",null,"dot_scaled")],-1)),e("mjx-container",j,[(r(),o("svg",w,t[70]||(t[70]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1853.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2731.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3260.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3621.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4072.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(4417.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(5693.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6265.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6563.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6924.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7269.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7772.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8070.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8560.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8949.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(9418.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(9851.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10380.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10678.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(11144.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[71]||(t[71]=e("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[e("mi",null,"d"),e("mo",null,"="),e("mi",null,"m"),e("mi",null,"a"),e("mi",null,"t"),e("mi",null,"r"),e("mi",null,"i"),e("msub",null,[e("mi",null,"x"),e("mi",null,"m")]),e("mi",null,"u"),e("mi",null,"l"),e("mi",null,"t"),e("mi",null,"i"),e("mi",null,"p"),e("mi",null,"l"),e("mi",null,"y"),e("mo",{stretchy:"false"},"("),e("mi",null,"s"),e("mi",null,"c"),e("mi",null,"a"),e("mi",null,"l"),e("mi",null,"e"),e("mo",{stretchy:"false"},"(")])],-1))]),e("p",null,[t[74]||(t[74]=l("a, ")),e("mjx-container",D,[(r(),o("svg",V,t[72]||(t[72]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(943.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1376.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1905.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2203.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2669.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3058.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3503.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3972.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4405.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4934.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5232.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(5698.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[73]||(t[73]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("msub",null,[e("mi",null,"a"),e("mi",null,"s")]),e("mi",null,"c"),e("mi",null,"a"),e("mi",null,"l"),e("mi",null,"e"),e("mo",{stretchy:"false"},")"),e("mo",null,","),e("mi",null,"s"),e("mi",null,"c"),e("mi",null,"a"),e("mi",null,"l"),e("mi",null,"e"),e("mo",{stretchy:"false"},"(")])],-1))]),t[75]||(t[75]=l("b, b_scale)) + c. Where scale(x, s) is a function that applies the scale per block following microscaling spec."))]),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[76]||(t[76]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L619-L624",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",H,[e("summary",null,[t[78]||(t[78]=e("a",{id:"Reactant.MLIR.Dialects.tt.elementwise_inline_asm-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.elementwise_inline_asm-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.elementwise_inline_asm")],-1)),t[79]||(t[79]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[81]||(t[81]=e("p",null,[e("code",null,"elementwise_inline_asm")],-1)),t[82]||(t[82]=e("p",null,"Runs an inline asm block to generate one or more tensors.",-1)),t[83]||(t[83]=e("p",null,[l("The asm block is given "),e("code",null,"packed_element"),l(" elements at a time. Exactly which elems it receives is unspecified.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[80]||(t[80]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L677-L684",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",v,[e("summary",null,[t[84]||(t[84]=e("a",{id:"Reactant.MLIR.Dialects.tt.extern_elementwise-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.extern_elementwise-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.extern_elementwise")],-1)),t[85]||(t[85]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[97]||(t[97]=e("p",null,[e("code",null,"extern_elementwise")],-1)),e("p",null,[t[92]||(t[92]=l("call an external function $symbol implemented in ")),e("mjx-container",Z,[(r(),o("svg",A,t[86]||(t[86]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(643,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1072,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1575,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2104,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2465,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3041,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),t[87]||(t[87]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"l"),e("mi",null,"i"),e("mi",null,"b"),e("mi",null,"p"),e("mi",null,"a"),e("mi",null,"t"),e("mi",null,"h"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")])])],-1))]),t[93]||(t[93]=l("libname with $args return ")),e("mjx-container",E,[(r(),o("svg",C,t[88]||(t[88]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(643,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1072,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1575,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2104,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2465,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3041,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),t[89]||(t[89]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"l"),e("mi",null,"i"),e("mi",null,"b"),e("mi",null,"p"),e("mi",null,"a"),e("mi",null,"t"),e("mi",null,"h"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")])])],-1))]),t[94]||(t[94]=l("libname:")),e("mjx-container",z,[(r(),o("svg",O,t[90]||(t[90]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(959,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1837,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2266,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2751,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3049,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[91]||(t[91]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"s"),e("mi",null,"y"),e("mi",null,"m"),e("mi",null,"b"),e("mi",null,"o"),e("mi",null,"l"),e("mo",{stretchy:"false"},"(")])],-1))]),t[95]||(t[95]=l("args...)"))]),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[96]||(t[96]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L812-L817",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",S,[e("summary",null,[t[98]||(t[98]=e("a",{id:"Reactant.MLIR.Dialects.tt.fp_to_fp-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.fp_to_fp-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.fp_to_fp")],-1)),t[99]||(t[99]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[101]||(t[101]=e("p",null,[e("code",null,"fp_to_fp")],-1)),t[102]||(t[102]=e("p",null,"Floating point casting for custom types (F8), and non-default rounding modes.",-1)),t[103]||(t[103]=e("p",null,"F8 <-> FP16, BF16, FP32, FP64",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[100]||(t[100]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L850-L856",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",P,[e("summary",null,[t[104]||(t[104]=e("a",{id:"Reactant.MLIR.Dialects.tt.func-Tuple{}",href:"#Reactant.MLIR.Dialects.tt.func-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.func")],-1)),t[105]||(t[105]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[107]||(t[107]=T(`<p><code>func</code></p><p>Operations within the function cannot implicitly capture values defined outside of the function, i.e. Functions are <code>IsolatedFromAbove</code>. All external references must use function arguments or attributes that establish a symbolic connection (e.g. symbols referenced by name via a string attribute like SymbolRefAttr). An external function declaration (used when referring to a function declared in some other module) has no body. While the MLIR textual form provides a nice inline syntax for function arguments, they are internally represented as “block arguments” to the first block in the region.</p><p>Only dialect attribute names may be specified in the attribute dictionaries for function arguments, results, or the function itself.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// External function definitions.</span></span>
<span class="line"><span>tt.func @abort()</span></span>
<span class="line"><span>tt.func @scribble(i32, i64, memref&lt;? x 128 x f32, #layout_map0&gt;) -&gt; f64</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// A function that returns its argument twice:</span></span>
<span class="line"><span>tt.func @count(%x: i64) -&gt; (i64, i64)</span></span>
<span class="line"><span>  attributes {fruit: &quot;banana&quot;} {</span></span>
<span class="line"><span>  return %x, %x: i64, i64</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// A function with an argument attribute</span></span>
<span class="line"><span>tt.func @example_fn_arg(%x: i32 {swift.self = unit})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// A function with a result attribute</span></span>
<span class="line"><span>tt.func @example_fn_result() -&gt; (f64 {dialectName.attrName = 0 : i64})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// A function with an attribute</span></span>
<span class="line"><span>tt.func @example_fn_attr() attributes {dialectName.attrName = false}</span></span></code></pre></div>`,5)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[106]||(t[106]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L58-L96",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",F,[e("summary",null,[t[108]||(t[108]=e("a",{id:"Reactant.MLIR.Dialects.tt.gather-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.gather-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.gather")],-1)),t[109]||(t[109]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[111]||(t[111]=e("p",null,[e("code",null,"gather")],-1)),t[112]||(t[112]=e("p",null,"Gather elements from the input tensor using the indices tensor along a single specified axis. The output tensor has the same shape as the indices tensor. The input and indices tensors must have the same number of dimension, and each dimension of the indices tensor that is not the gather dimension cannot be greater than the corresponding dimension in the input tensor.",-1)),t[113]||(t[113]=e("p",null,[l("The "),e("code",null,"efficient_layout"),l(" attribute is set when the compiler has determined an optimized layout for the operation, indicating that it should not be changed.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[110]||(t[110]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L877-L890",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",N,[e("summary",null,[t[114]||(t[114]=e("a",{id:"Reactant.MLIR.Dialects.tt.histogram-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.histogram-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.histogram")],-1)),t[115]||(t[115]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[117]||(t[117]=e("p",null,[e("code",null,"histogram")],-1)),t[118]||(t[118]=e("p",null,"Return the histogram of the input tensor. The number of bins is equal to the dimension of the output tensor. Each bins has a width of 1 and bins start at 0.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[116]||(t[116]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L962-L968",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",B,[e("summary",null,[t[119]||(t[119]=e("a",{id:"Reactant.MLIR.Dialects.tt.join-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.join-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.join")],-1)),t[120]||(t[120]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[122]||(t[122]=e("p",null,[e("code",null,"join")],-1)),t[123]||(t[123]=e("p",null,"For example, if the two input tensors are 4x8xf32, returns a tensor of shape 4x8x2xf32.",-1)),t[124]||(t[124]=e("p",null,"Because Triton tensors always have a power-of-two number of elements, the two input tensors must have the same shape.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[121]||(t[121]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1007-L1015",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",G,[e("summary",null,[t[125]||(t[125]=e("a",{id:"Reactant.MLIR.Dialects.tt.make_range-Tuple{}",href:"#Reactant.MLIR.Dialects.tt.make_range-Tuple{}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.make_range")],-1)),t[126]||(t[126]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[128]||(t[128]=e("p",null,[e("code",null,"make_range")],-1)),t[129]||(t[129]=e("p",null,"Returns an 1D int32 tensor.",-1)),t[130]||(t[130]=e("p",null,"Values span from start to $end (exclusive), with step = 1",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[127]||(t[127]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1084-L1090",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",q,[e("summary",null,[t[131]||(t[131]=e("a",{id:"Reactant.MLIR.Dialects.tt.make_tensor_descriptor-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.make_tensor_descriptor-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.make_tensor_descriptor")],-1)),t[132]||(t[132]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[134]||(t[134]=e("p",null,[e("code",null,"make_tensor_descriptor")],-1)),t[135]||(t[135]=e("p",null,[e("code",null,"tt.make_tensor_descriptor"),l(" takes both meta information of the parent tensor and the block size, and returns a descriptor object which can be used to load/store from the tensor in global memory.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[133]||(t[133]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1110-L1115",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",J,[e("summary",null,[t[136]||(t[136]=e("a",{id:"Reactant.MLIR.Dialects.tt.make_tensor_ptr-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.make_tensor_ptr-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.make_tensor_ptr")],-1)),t[137]||(t[137]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[139]||(t[139]=e("p",null,[e("code",null,"make_tensor_ptr")],-1)),t[140]||(t[140]=e("p",null,[e("code",null,"tt.make_tensor_ptr"),l(" takes both meta information of the parent tensor and the block tensor, then it returns a pointer to the block tensor, e.g. returns a type of "),e("code",null,"tt.ptr<tensor<8x8xf16>>"),l(".")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[138]||(t[138]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1141-L1146",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",U,[e("summary",null,[t[141]||(t[141]=e("a",{id:"Reactant.MLIR.Dialects.tt.mulhiui-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.mulhiui-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.mulhiui")],-1)),t[142]||(t[142]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[144]||(t[144]=e("p",null,[e("code",null,"mulhiui")],-1)),t[145]||(t[145]=e("p",null,"Most significant N bits of the 2N-bit product of two integers.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[143]||(t[143]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1174-L1178",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",$,[e("summary",null,[t[146]||(t[146]=e("a",{id:"Reactant.MLIR.Dialects.tt.precise_divf-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.precise_divf-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.precise_divf")],-1)),t[147]||(t[147]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[149]||(t[149]=e("p",null,[e("code",null,"precise_divf")],-1)),t[150]||(t[150]=e("p",null,"Precise div for floating point types.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[148]||(t[148]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1201-L1205",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",W,[e("summary",null,[t[151]||(t[151]=e("a",{id:"Reactant.MLIR.Dialects.tt.precise_sqrt-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.precise_sqrt-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.precise_sqrt")],-1)),t[152]||(t[152]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[154]||(t[154]=e("p",null,[e("code",null,"precise_sqrt")],-1)),t[155]||(t[155]=e("p",null,"Precise sqrt for floating point types.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[153]||(t[153]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1228-L1232",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",X,[e("summary",null,[t[156]||(t[156]=e("a",{id:"Reactant.MLIR.Dialects.tt.print-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.print-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.print")],-1)),t[157]||(t[157]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[159]||(t[159]=e("p",null,[e("code",null,"print")],-1)),t[160]||(t[160]=e("p",null,[e("code",null,"tt.print"),l(" takes a literal string prefix and an arbitrary number of scalar or tensor arguments that should be printed. format are generated automatically from the arguments.")],-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[158]||(t[158]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1253-L1258",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",Y,[e("summary",null,[t[161]||(t[161]=e("a",{id:"Reactant.MLIR.Dialects.tt.reinterpret_tensor_descriptor-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.reinterpret_tensor_descriptor-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.reinterpret_tensor_descriptor")],-1)),t[162]||(t[162]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[164]||(t[164]=e("p",null,[e("code",null,"reinterpret_tensor_descriptor")],-1)),t[165]||(t[165]=e("p",null,"This Op exists to help the transition from untyped raw TMA objects to typed Tensor descriptor objects. Ideally, we can remove this once the APIs are fully fleshed out.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[163]||(t[163]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L130-L135",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",K,[e("summary",null,[t[166]||(t[166]=e("a",{id:"Reactant.MLIR.Dialects.tt.reshape-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.reshape-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.reshape")],-1)),t[167]||(t[167]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[169]||(t[169]=e("p",null,[e("code",null,"reshape")],-1)),t[170]||(t[170]=e("p",null,"reinterpret a tensor to a different shape.",-1)),t[171]||(t[171]=e("p",null,"If allow_reorder is set the compiler is free to change the order of elements to generate more efficient code.",-1)),t[172]||(t[172]=e("p",null,"If efficient_layout is set, this is a hint that the destination layout should be kept for performance reason. The compiler is still free to change it for better performance.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[168]||(t[168]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1345-L1355",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",_,[e("summary",null,[t[173]||(t[173]=e("a",{id:"Reactant.MLIR.Dialects.tt.return_-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.tt.return_-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.return_")],-1)),t[174]||(t[174]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[176]||(t[176]=T(`<p><code>return_</code></p><p>The <code>tt.return</code> operation represents a return operation within a function. The operation takes variable number of operands and produces no results. The operand number and types must match the signature of the function that contains the operation.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tt.func @foo() : (i32, f8) {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  tt.return %0, %1 : i32, f8</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,4)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[175]||(t[175]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L155-L171",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",t1,[e("summary",null,[t[177]||(t[177]=e("a",{id:"Reactant.MLIR.Dialects.tt.split-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.split-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.split")],-1)),t[178]||(t[178]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[180]||(t[180]=e("p",null,[e("code",null,"split")],-1)),t[181]||(t[181]=e("p",null,"The input must be a tensor whose last dimension has size 2. Returns two tensors, src[..., 0] and src[..., 1].",-1)),t[182]||(t[182]=e("p",null,"For example, if the input shape is 4x8x2xf32, returns two tensors of shape 4x8xf32.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[179]||(t[179]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1451-L1459",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",e1,[e("summary",null,[t[183]||(t[183]=e("a",{id:"Reactant.MLIR.Dialects.tt.trans-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.tt.trans-Tuple{Reactant.MLIR.IR.Value}"},[e("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.tt.trans")],-1)),t[184]||(t[184]=l()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[186]||(t[186]=e("p",null,[e("code",null,"trans")],-1)),t[187]||(t[187]=e("p",null,"For example, given a tensor x with shape [1,2,4], transpose(x) with order=[2,0,1] rearranges the tensor to have shape [4,1,2].",-1)),t[188]||(t[188]=e("p",null,`Although this op is called "trans", it implements both tl.trans() and tl.permute(). ("permute" might be a better name, but it's called "trans" because originally it only supported 2D tensors.)`,-1)),t[189]||(t[189]=e("p",null,[e("strong",null,"Implementation note on encodings:")],-1)),t[190]||(t[190]=e("p",null,"In the TritonGPU dialect (and probably others), an encoding is chosen for this op's output so it's a nop from the perspective of code generation.",-1)),t[191]||(t[191]=e("p",null,`For example, suppose tensor x has an encoding such that GPU thread [i,j,k] has a register containing element [i,j,k] of the tensor. Now we transpose x with order [2,1,0], i.e. we reverse the order of its dimensions. In TritonGPU, we will choose a layout for the output of the transpose so that GPU thread [i,j,k] has element [k,j,i] of transpose(x). But this is the same element it had before! All we've done is "rename" the element that thread [i,j,k] has.`,-1)),t[192]||(t[192]=e("p",null,'The "real" transpose – i.e. moving data between GPU threads – occurs in convertLayout ops that appear before and/or after the operation.',-1)),t[193]||(t[193]=e("p",null,"We do this so that you can chain multiple data-movement ops (e.g. transpose+reshape+concat) without going to shared memory after each one.",-1)),s(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>t[185]||(t[185]=[e("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/296ddeb6000fa6cb254c115f8a60c3400ae72f5b/src/mlir/Dialects/Triton.jl#L1518-L1546",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const Q1=i(d,[["render",a1]]);export{i1 as __pageData,Q1 as default};
