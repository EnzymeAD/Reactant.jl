import{_ as l,c as p,j as a,a as i,G as e,a2 as n,B as h,o as r}from"./chunks/framework.C0lb17Xd.js";const I=JSON.parse('{"title":"Reactant.Ops API","description":"","frontmatter":{},"headers":[],"relativePath":"api/ops.md","filePath":"api/ops.md","lastUpdated":null}'),d={name:"api/ops.md"},k={class:"jldocstring custom-block"},o={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"};function b(R,s,m,_,f,C){const t=h("Badge");return r(),p("div",null,[s[27]||(s[27]=a("h1",{id:"Reactant.Ops-API",tabindex:"-1"},[a("code",null,"Reactant.Ops"),i(" API "),a("a",{class:"header-anchor",href:"#Reactant.Ops-API","aria-label":'Permalink to "`Reactant.Ops` API {#Reactant.Ops-API}"'},"â€‹")],-1)),s[28]||(s[28]=a("p",null,[a("code",null,"Reactant.Ops"),i(" module provides a high-level API to construct MLIR operations without having to directly interact with the different dialects.")],-1)),s[29]||(s[29]=a("p",null,[i("Currently we haven't documented all the functions in "),a("code",null,"Reactant.Ops"),i(".")],-1)),a("details",k,[a("summary",null,[s[0]||(s[0]=a("a",{id:"Reactant.Ops.batch-Tuple{Any, Vararg{Any}}",href:"#Reactant.Ops.batch-Tuple{Any, Vararg{Any}}"},[a("span",{class:"jlbinding"},"Reactant.Ops.batch")],-1)),s[1]||(s[1]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=n("",8))]),a("details",o,[a("summary",null,[s[3]||(s[3]=a("a",{id:'Reactant.Ops.batch-Tuple{Vector{<:Union{var"#s405", var"#s404"} where {var"#s405"<:Reactant.TracedRArray, var"#s404"<:Reactant.MLIR.IR.Value}}, Vector{<:Reactant.MLIR.IR.Type}, Vector{Int64}}',href:'#Reactant.Ops.batch-Tuple{Vector{<:Union{var"#s405", var"#s404"} where {var"#s405"<:Reactant.TracedRArray, var"#s404"<:Reactant.MLIR.IR.Value}}, Vector{<:Reactant.MLIR.IR.Type}, Vector{Int64}}'},[a("span",{class:"jlbinding"},"Reactant.Ops.batch")],-1)),s[4]||(s[4]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=n("",4))]),a("details",c,[a("summary",null,[s[6]||(s[6]=a("a",{id:"Reactant.Ops.elem_apply-Tuple{Any, Vararg}",href:"#Reactant.Ops.elem_apply-Tuple{Any, Vararg}"},[a("span",{class:"jlbinding"},"Reactant.Ops.elem_apply")],-1)),s[7]||(s[7]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=n("",3))]),a("details",g,[a("summary",null,[s[9]||(s[9]=a("a",{id:"Reactant.Ops.gather_getindex-Union{Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}}} where {T, N}",href:"#Reactant.Ops.gather_getindex-Union{Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}}} where {T, N}"},[a("span",{class:"jlbinding"},"Reactant.Ops.gather_getindex")],-1)),s[10]||(s[10]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=n("",3))]),a("details",E,[a("summary",null,[s[12]||(s[12]=a("a",{id:"Reactant.Ops.hlo_call-Tuple{Any, Vararg{Any}}",href:"#Reactant.Ops.hlo_call-Tuple{Any, Vararg{Any}}"},[a("span",{class:"jlbinding"},"Reactant.Ops.hlo_call")],-1)),s[13]||(s[13]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=n("",4))]),a("details",y,[a("summary",null,[s[15]||(s[15]=a("a",{id:"Reactant.Ops.randexp-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T",href:"#Reactant.Ops.randexp-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T"},[a("span",{class:"jlbinding"},"Reactant.Ops.randexp")],-1)),s[16]||(s[16]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[17]||(s[17]=n("",6))]),a("details",u,[a("summary",null,[s[18]||(s[18]=a("a",{id:"Reactant.Ops.randn-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T",href:"#Reactant.Ops.randn-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T"},[a("span",{class:"jlbinding"},"Reactant.Ops.randn")],-1)),s[19]||(s[19]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[20]||(s[20]=n("",6))]),a("details",T,[a("summary",null,[s[21]||(s[21]=a("a",{id:"Reactant.Ops.rng_bit_generator-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T<:Integer",href:"#Reactant.Ops.rng_bit_generator-Union{Tuple{T}, Tuple{Type{T}, Reactant.TracedRArray{UInt64, 1}, Any}} where T<:Integer"},[a("span",{class:"jlbinding"},"Reactant.Ops.rng_bit_generator")],-1)),s[22]||(s[22]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=n("",6))]),a("details",F,[a("summary",null,[s[24]||(s[24]=a("a",{id:"Reactant.Ops.scatter_setindex-Union{Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}, Reactant.TracedRArray{T, 1}}} where {T, N}",href:"#Reactant.Ops.scatter_setindex-Union{Tuple{N}, Tuple{T}, Tuple{Reactant.TracedRArray{T, N}, Reactant.TracedRArray{Int64, 2}, Reactant.TracedRArray{T, 1}}} where {T, N}"},[a("span",{class:"jlbinding"},"Reactant.Ops.scatter_setindex")],-1)),s[25]||(s[25]=i()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[26]||(s[26]=n("",3))])])}const j=l(d,[["render",b]]);export{I as __pageData,j as default};
