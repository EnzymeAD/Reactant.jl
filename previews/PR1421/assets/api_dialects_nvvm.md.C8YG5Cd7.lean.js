import{_ as c,C as d,c as i,o as l,j as t,a,al as o,G as s,w as r}from"./chunks/framework.DAM5Z9yM.js";const qe=JSON.parse('{"title":"NVVM Dialect","description":"","frontmatter":{},"headers":[],"relativePath":"api/dialects/nvvm.md","filePath":"api/dialects/nvvm.md","lastUpdated":null}'),p={name:"api/dialects/nvvm.md"},m={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},Q={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},z={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},N={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"53.79ex",height:"2.059ex",role:"img",focusable:"false",viewBox:"0 -705 23775.1 910","aria-hidden":"true"},E={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},Z={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},ee={class:"jldocstring custom-block"},te={class:"jldocstring custom-block"},ae={class:"jldocstring custom-block"},ne={class:"jldocstring custom-block"},se={class:"jldocstring custom-block"},re={class:"jldocstring custom-block"},oe={class:"jldocstring custom-block"},ie={class:"jldocstring custom-block"},le={class:"jldocstring custom-block"},ce={class:"jldocstring custom-block"},de={class:"jldocstring custom-block"},pe={class:"jldocstring custom-block"},me={class:"jldocstring custom-block"},ue={class:"jldocstring custom-block"},he={class:"jldocstring custom-block"},fe={class:"jldocstring custom-block"},Te={class:"jldocstring custom-block"},be={class:"jldocstring custom-block"},ve={class:"jldocstring custom-block"},ge={class:"jldocstring custom-block"},ye={class:"jldocstring custom-block"},Re={class:"jldocstring custom-block"},Qe={class:"jldocstring custom-block"},_e={class:"jldocstring custom-block"},ke={class:"jldocstring custom-block"},Ie={class:"jldocstring custom-block"},xe={class:"jldocstring custom-block"},Le={class:"jldocstring custom-block"},Me={class:"jldocstring custom-block"},je={class:"jldocstring custom-block"},De={class:"jldocstring custom-block"},we={class:"jldocstring custom-block"},Ae={class:"jldocstring custom-block"},Ve={class:"jldocstring custom-block"},Se={class:"jldocstring custom-block"},Ce={class:"jldocstring custom-block"};function Pe(ze,e,Ne,Ee,Fe,Oe){const n=d("Badge");return l(),i("div",null,[e[387]||(e[387]=t("h1",{id:"NVVM-Dialect",tabindex:"-1"},[a("NVVM Dialect "),t("a",{class:"header-anchor",href:"#NVVM-Dialect","aria-label":'Permalink to "NVVM Dialect {#NVVM-Dialect}"'},"â€‹")],-1)),e[388]||(e[388]=t("p",null,[a("Refer to the "),t("a",{href:"https://mlir.llvm.org/docs/Dialects/NVVMDialect/",target:"_blank",rel:"noreferrer"},"official documentation"),a(" for more details.")],-1)),t("details",m,[t("summary",null,[e[0]||(e[0]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.bar_warp_sync-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.bar_warp_sync-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.bar_warp_sync")],-1)),e[1]||(e[1]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[3]||(e[3]=o("",8)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[2]||(e[2]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3949-L3975",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",u,[t("summary",null,[e[4]||(e[4]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.barrier",href:"#Reactant.MLIR.Dialects.nvvm.barrier"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.barrier")],-1)),e[5]||(e[5]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[7]||(e[7]=o("",8)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[6]||(e[6]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L77-L105",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",h,[t("summary",null,[e[8]||(e[8]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.barrier0-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.barrier0-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.barrier0")],-1)),e[9]||(e[9]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=t("p",null,[t("code",null,"barrier0")],-1)),e[12]||(e[12]=t("p",null,[a("The "),t("code",null,"nvvm.barrier0"),a(" operation is a convenience operation that performs barrier synchronization and communication within a CTA (Cooperative Thread Array) using barrier ID 0. It is functionally equivalent to "),t("code",null,"nvvm.barrier"),a(" or "),t("code",null,"nvvm.barrier id=0"),a(".")],-1)),e[13]||(e[13]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-bar",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[10]||(e[10]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L16-L24",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",f,[t("summary",null,[e[14]||(e[14]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.barrier_arrive",href:"#Reactant.MLIR.Dialects.nvvm.barrier_arrive"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.barrier_arrive")],-1)),e[15]||(e[15]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[17]||(e[17]=t("p",null,[t("code",null,"barrier_arrive")],-1)),e[18]||(e[18]=t("p",null,"Thread that executes this op announces their arrival at the barrier with given id and continue their execution.",-1)),e[19]||(e[19]=t("p",null,[a("The default barrier id is 0 that is similar to "),t("code",null,"nvvm.barrier"),a(" Op. When "),t("code",null,"barrierId"),a(" is not present, the default barrier id is used.")],-1)),e[20]||(e[20]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-bar",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[16]||(e[16]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L44-L54",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",T,[t("summary",null,[e[21]||(e[21]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.breakpoint-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.breakpoint-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.breakpoint")],-1)),e[22]||(e[22]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[24]||(e[24]=t("p",null,[t("code",null,"breakpoint")],-1)),e[25]||(e[25]=t("p",null,[a("Breakpoint suspends execution of the program for debugging. "),t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#miscellaneous-instructions-brkpt",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[23]||(e[23]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L317-L322",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",b,[t("summary",null,[e[26]||(e[26]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cluster_arrive-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.cluster_arrive-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cluster_arrive")],-1)),e[27]||(e[27]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[29]||(e[29]=t("p",null,[t("code",null,"cluster_arrive")],-1)),e[30]||(e[30]=t("p",null,[a("The "),t("code",null,"cluster.arrive"),a(" can be used by the threads within the cluster for synchronization and communication. The "),t("code",null,"cluster.arrive"),a(" instruction marks the warps' arrival at the barrier without causing the executing thread to wait for other participating threads.")],-1)),e[31]||(e[31]=t("p",null,[a("The "),t("code",null,"aligned"),a(" attribute, when provided, generates the .aligned version of the PTX instruction.")],-1)),e[32]||(e[32]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-barrier-cluster",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[28]||(e[28]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L411-L421",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",v,[t("summary",null,[e[33]||(e[33]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cluster_arrive_relaxed-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.cluster_arrive_relaxed-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cluster_arrive_relaxed")],-1)),e[34]||(e[34]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[36]||(e[36]=o("",4)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[35]||(e[35]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L442-L455",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",g,[t("summary",null,[e[37]||(e[37]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cluster_wait-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.cluster_wait-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cluster_wait")],-1)),e[38]||(e[38]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[40]||(e[40]=t("p",null,[t("code",null,"cluster_wait")],-1)),e[41]||(e[41]=t("p",null,[a("The "),t("code",null,"cluster.wait"),a(" causes the executing thread to wait for all non-exited threads of the cluster to perform "),t("code",null,"cluster.arrive"),a(". The "),t("code",null,"aligned"),a(" attribute, when provided, generates the .aligned version of the PTX instruction.")],-1)),e[42]||(e[42]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-barrier-cluster",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[39]||(e[39]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L776-L784",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",y,[t("summary",null,[e[43]||(e[43]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.clusterlaunchcontrol_query_cancel-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.clusterlaunchcontrol_query_cancel-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.clusterlaunchcontrol_query_cancel")],-1)),e[44]||(e[44]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[46]||(e[46]=o("",8)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[45]||(e[45]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L696-L712",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",R,[t("summary",null,[e[47]||(e[47]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.clusterlaunchcontrol_try_cancel-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.clusterlaunchcontrol_try_cancel-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.clusterlaunchcontrol_try_cancel")],-1)),e[48]||(e[48]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[50]||(e[50]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[49]||(e[49]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L734-L753",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Q,[t("summary",null,[e[51]||(e[51]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.convert_bf16x2_to_f8x2-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.convert_bf16x2_to_f8x2-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.convert_bf16x2_to_f8x2")],-1)),e[52]||(e[52]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[54]||(e[54]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[53]||(e[53]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L805-L822",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",_,[t("summary",null,[e[55]||(e[55]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.convert_f16x2_to_f8x2-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.convert_f16x2_to_f8x2-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.convert_f16x2_to_f8x2")],-1)),e[56]||(e[56]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[58]||(e[58]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[57]||(e[57]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L846-L863",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",k,[t("summary",null,[e[59]||(e[59]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.convert_f32x2_to_f6x2-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.convert_f32x2_to_f6x2-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.convert_f32x2_to_f6x2")],-1)),e[60]||(e[60]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[62]||(e[62]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[61]||(e[61]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L886-L902",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",I,[t("summary",null,[e[63]||(e[63]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.convert_f32x2_to_f8x2-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.convert_f32x2_to_f8x2-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.convert_f32x2_to_f8x2")],-1)),e[64]||(e[64]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[66]||(e[66]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[65]||(e[65]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L925-L941",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",x,[t("summary",null,[e[67]||(e[67]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.convert_float_to_tf32-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.convert_float_to_tf32-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.convert_float_to_tf32")],-1)),e[68]||(e[68]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[70]||(e[70]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[69]||(e[69]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L973-L983",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",L,[t("summary",null,[e[71]||(e[71]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_commit_group-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_commit_group-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_commit_group")],-1)),e[72]||(e[72]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[74]||(e[74]=t("p",null,[t("code",null,"cp_async_bulk_commit_group")],-1)),e[75]||(e[75]=t("p",null,"This Op commits all prior initiated but uncommitted cp.async.bulk instructions into a cp.async.bulk-group.",-1)),e[76]||(e[76]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-cp-async-bulk-commit-group",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[73]||(e[73]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1008-L1015",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",M,[t("summary",null,[e[77]||(e[77]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_global_shared_cta",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_global_shared_cta"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_global_shared_cta")],-1)),e[78]||(e[78]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[80]||(e[80]=o("",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[79]||(e[79]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1131-L1163",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",j,[t("summary",null,[e[81]||(e[81]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_prefetch",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_prefetch"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_prefetch")],-1)),e[82]||(e[82]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[84]||(e[84]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[83]||(e[83]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1087-L1105",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",D,[t("summary",null,[e[85]||(e[85]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_shared_cluster_global",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_shared_cluster_global"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_shared_cluster_global")],-1)),e[86]||(e[86]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[88]||(e[88]=o("",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[87]||(e[87]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1035-L1051",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",w,[t("summary",null,[e[89]||(e[89]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_shared_cluster_shared_cta-NTuple{4, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_shared_cluster_shared_cta-NTuple{4, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_shared_cluster_shared_cta")],-1)),e[90]||(e[90]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[92]||(e[92]=t("p",null,[t("code",null,"cp_async_bulk_shared_cluster_shared_cta")],-1)),e[93]||(e[93]=t("p",null,"Initiates an asynchronous copy operation from Shared CTA memory to Shared cluster memory.",-1)),e[94]||(e[94]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-cp-async-bulk",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[91]||(e[91]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1198-L1205",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",A,[t("summary",null,[e[95]||(e[95]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_global_shared_cta",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_global_shared_cta"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_global_shared_cta")],-1)),e[96]||(e[96]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[98]||(e[98]=t("p",null,[t("code",null,"cp_async_bulk_tensor_global_shared_cta")],-1)),e[99]||(e[99]=t("p",null,[a("Initiates an asynchronous copy of the tensor data from shared::cta memory to global memory. This Op supports all the store modes specified in "),t("code",null,"TMAStoreMode"),a(".")],-1)),e[100]||(e[100]=t("p",null,[a("The "),t("code",null,"l2CacheHint"),a(" operand is optional, and it is used to specify cache eviction policy that may be used during the memory access.")],-1)),e[101]||(e[101]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-cp-async-bulk-tensor",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[97]||(e[97]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1395-L1406",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",V,[t("summary",null,[e[102]||(e[102]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_prefetch",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_prefetch"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_prefetch")],-1)),e[103]||(e[103]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[105]||(e[105]=t("p",null,[t("code",null,"cp_async_bulk_tensor_prefetch")],-1)),e[106]||(e[106]=t("p",null,[a("Initiates an asynchronous prefetch operation on the tensor data from global memory to L2 cache. This Op supports all the load modes specified in "),t("code",null,"TMALoadMode"),a(".")],-1)),e[107]||(e[107]=t("p",null,[a("The "),t("code",null,"l2CacheHint"),a(" operand is optional, and it is used to specify cache eviction policy that may be used during the memory access.")],-1)),e[108]||(e[108]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-cp-async-bulk-prefetch-tensor",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[104]||(e[104]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1300-L1311",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",S,[t("summary",null,[e[109]||(e[109]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_reduce",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_reduce"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_reduce")],-1)),e[110]||(e[110]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[112]||(e[112]=t("p",null,[t("code",null,"cp_async_bulk_tensor_reduce")],-1)),e[113]||(e[113]=t("p",null,"Initiates an asynchronous reduction operation of tensor data in global memory with tensor data in shared memory.",-1)),e[114]||(e[114]=t("p",{"add,":"","min,":"","max,":"","inc,":"","dec,":"","and,":"","or,":"",xor:""},[a("The "),t("code",null,"mode"),a(" attribute indicates whether the copy mode is tile or im2col. The "),t("code",null,"redOp"),a(" attribute specifies the reduction operations applied. The supported reduction operations are:")],-1)),e[115]||(e[115]=t("p",null,[a("The "),t("code",null,"l2CacheHint"),a(" operand is optional, and it is used to specify cache eviction policy that may be used during the memory access.")],-1)),e[116]||(e[116]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-cp-reduce-async-bulk-tensor",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[111]||(e[111]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1346-L1361",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",C,[t("summary",null,[e[117]||(e[117]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_shared_cluster_global",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_shared_cluster_global"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_tensor_shared_cluster_global")],-1)),e[118]||(e[118]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[120]||(e[120]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[119]||(e[119]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1227-L1248",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",P,[t("summary",null,[e[121]||(e[121]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_wait_group-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_bulk_wait_group-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_bulk_wait_group")],-1)),e[122]||(e[122]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[130]||(e[130]=t("p",null,[t("code",null,"cp_async_bulk_wait_group")],-1)),e[131]||(e[131]=t("p",null,"Op waits for completion of the most recent bulk async-groups.",-1)),t("p",null,[e[125]||(e[125]=a("The ",-1)),e[126]||(e[126]=t("code",null,"$group",-1)),e[127]||(e[127]=a(" operand tells waiting has to be done until for ",-1)),t("mjx-container",z,[(l(),i("svg",N,[...e[123]||(e[123]=[o("",1)])])),e[124]||(e[124]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"g"),t("mi",null,"r"),t("mi",null,"o"),t("mi",null,"u"),t("mi",null,"p"),t("mi",null,"o"),t("mi",null,"r"),t("mi",null,"f"),t("mi",null,"e"),t("mi",null,"w"),t("mi",null,"e"),t("mi",null,"r"),t("mi",null,"o"),t("mi",null,"f"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"e"),t("mi",null,"m"),t("mi",null,"o"),t("mi",null,"s"),t("mi",null,"t"),t("mi",null,"r"),t("mi",null,"e"),t("mi",null,"c"),t("mi",null,"e"),t("mi",null,"n"),t("mi",null,"t"),t("mi",null,"b"),t("mi",null,"u"),t("mi",null,"l"),t("mi",null,"k"),t("mi",null,"a"),t("mi",null,"s"),t("mi",null,"y"),t("mi",null,"n"),t("mi",null,"c"),t("mo",null,"âˆ’"),t("mi",null,"g"),t("mi",null,"r"),t("mi",null,"o"),t("mi",null,"u"),t("mi",null,"p"),t("mi",null,"s"),t("mo",null,"."),t("mi",null,"I"),t("mi",null,"f"),t("mo",{"data-mjx-pseudoscript":"true"},"â€˜")])],-1))]),e[128]||(e[128]=a("group` is 0, the op wait until all the most recent bulk async-groups have completed.",-1))]),e[132]||(e[132]=t("p",null,[a("The "),t("code",null,"$read"),a(" indicates that the waiting has to be done until all the bulk async operations in the specified bulk async-group have completed reading from their source locations.")],-1)),e[133]||(e[133]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-cp-async-bulk-wait-group",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[129]||(e[129]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1447-L1461",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",E,[t("summary",null,[e[134]||(e[134]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_mbarrier_arrive-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_mbarrier_arrive-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_mbarrier_arrive")],-1)),e[135]||(e[135]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[137]||(e[137]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[136]||(e[136]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1501-L1511",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",F,[t("summary",null,[e[138]||(e[138]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.cp_async_mbarrier_arrive_shared-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.cp_async_mbarrier_arrive_shared-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.cp_async_mbarrier_arrive_shared")],-1)),e[139]||(e[139]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[141]||(e[141]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[140]||(e[140]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1532-L1542",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",O,[t("summary",null,[e[142]||(e[142]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.dot_accumulate_2way-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.dot_accumulate_2way-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.dot_accumulate_2way")],-1)),e[143]||(e[143]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[145]||(e[145]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[144]||(e[144]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1611-L1637",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",H,[t("summary",null,[e[146]||(e[146]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.dot_accumulate_4way-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.dot_accumulate_4way-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.dot_accumulate_4way")],-1)),e[147]||(e[147]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[149]||(e[149]=o("",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[148]||(e[148]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1663-L1682",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",q,[t("summary",null,[e[150]||(e[150]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.elect_sync",href:"#Reactant.MLIR.Dialects.nvvm.elect_sync"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.elect_sync")],-1)),e[151]||(e[151]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[153]||(e[153]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[152]||(e[152]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L1706-L1716",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",X,[t("summary",null,[e[154]||(e[154]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.exit-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.exit-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.exit")],-1)),e[155]||(e[155]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[157]||(e[157]=t("p",null,[t("code",null,"exit")],-1)),e[158]||(e[158]=t("p",null,[a("Ends execution of a thread. "),t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#control-flow-instructions-exit",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[156]||(e[156]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2347-L2352",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Z,[t("summary",null,[e[159]||(e[159]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.fence_mbarrier_init-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.fence_mbarrier_init-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.fence_mbarrier_init")],-1)),e[160]||(e[160]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[162]||(e[162]=t("p",null,[t("code",null,"fence_mbarrier_init")],-1)),e[163]||(e[163]=t("p",null,"Fence operation that applies on the prior nvvm.mbarrier.init",-1)),e[164]||(e[164]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-membar",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[161]||(e[161]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2372-L2378",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",B,[t("summary",null,[e[165]||(e[165]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.fence_proxy-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.fence_proxy-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.fence_proxy")],-1)),e[166]||(e[166]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[168]||(e[168]=t("p",null,[t("code",null,"fence_proxy")],-1)),e[169]||(e[169]=t("p",null,"Fence operation with proxy to establish an ordering between memory accesses that may happen through different proxies.",-1)),e[170]||(e[170]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-membar",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[167]||(e[167]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2437-L2444",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",W,[t("summary",null,[e[171]||(e[171]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.fence_proxy_acquire-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.fence_proxy_acquire-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.fence_proxy_acquire")],-1)),e[172]||(e[172]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[174]||(e[174]=o("",4)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[173]||(e[173]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2398-L2413",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",$,[t("summary",null,[e[175]||(e[175]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.fence_proxy_release-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.fence_proxy_release-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.fence_proxy_release")],-1)),e[176]||(e[176]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[178]||(e[178]=t("p",null,[t("code",null,"fence_proxy_release")],-1)),e[179]||(e[179]=t("p",null,[t("code",null,"fence.proxy.release"),a(" is a uni-directional fence used to establish ordering between a prior memory access performed via the generic proxy and a subsequent memory access performed via the tensormap proxy. "),t("code",null,"fence.proxy.release"),a(" operation can form a release sequence that synchronizes with an acquire sequence that contains the fence.proxy.acquire proxy fence operation")],-1)),e[180]||(e[180]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-membar",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[177]||(e[177]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2465-L2475",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",U,[t("summary",null,[e[181]||(e[181]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.griddepcontrol-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.griddepcontrol-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.griddepcontrol")],-1)),e[182]||(e[182]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[184]||(e[184]=t("p",null,[t("code",null,"griddepcontrol")],-1)),e[185]||(e[185]=t("p",null,[a("If the kind attribute is set to "),t("code",null,"wait"),a(", it causes the executing thread to wait until all prerequisite grids in flight have completed and all the memory operations from the prerequisite grids are performed and made visible to the current grid.")],-1)),e[186]||(e[186]=t("p",null,"When the kind is launch_dependents, it signals that specific dependents the runtime system designated to react to this instruction can be scheduled as soon as all other CTAs in the grid issue the same instruction or have completed.",-1)),e[187]||(e[187]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#parallel-synchronization-and-communication-instructions-griddepcontrol",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[183]||(e[183]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2636-L2650",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",G,[t("summary",null,[e[188]||(e[188]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.inline_ptx",href:"#Reactant.MLIR.Dialects.nvvm.inline_ptx"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.inline_ptx")],-1)),e[189]||(e[189]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[191]||(e[191]=o("",2)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[190]||(e[190]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2670-L2710",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",J,[t("summary",null,[e[192]||(e[192]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.match_sync-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.match_sync-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.match_sync")],-1)),e[193]||(e[193]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[195]||(e[195]=o("",8)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[194]||(e[194]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3464-L3480",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",K,[t("summary",null,[e[196]||(e[196]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_arrive-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive")],-1)),e[197]||(e[197]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[199]||(e[199]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[198]||(e[198]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3045-L3066",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Y,[t("summary",null,[e[200]||(e[200]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_expect_tx",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_expect_tx"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_expect_tx")],-1)),e[201]||(e[201]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[203]||(e[203]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[202]||(e[202]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2885-L2911",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ee,[t("summary",null,[e[204]||(e[204]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_expect_tx_shared",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_expect_tx_shared"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_expect_tx_shared")],-1)),e[205]||(e[205]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[207]||(e[207]=t("p",null,[t("code",null,"mbarrier_arrive_expect_tx_shared")],-1)),e[208]||(e[208]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.arrive.expect_tx"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[209]||(e[209]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier-arrive",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[206]||(e[206]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2937-L2944",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",te,[t("summary",null,[e[210]||(e[210]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_nocomplete-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_nocomplete-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_nocomplete")],-1)),e[211]||(e[211]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[213]||(e[213]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[212]||(e[212]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L2970-L2994",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ae,[t("summary",null,[e[214]||(e[214]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_nocomplete_shared-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_nocomplete_shared-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_nocomplete_shared")],-1)),e[215]||(e[215]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[217]||(e[217]=t("p",null,[t("code",null,"mbarrier_arrive_nocomplete_shared")],-1)),e[218]||(e[218]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.arrive.nocomplete"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[219]||(e[219]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier-arrive",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[216]||(e[216]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3016-L3023",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ne,[t("summary",null,[e[220]||(e[220]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_shared-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_shared-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_arrive_shared")],-1)),e[221]||(e[221]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[223]||(e[223]=t("p",null,[t("code",null,"mbarrier_arrive_shared")],-1)),e[224]||(e[224]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.arrive"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[225]||(e[225]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier-arrive",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[222]||(e[222]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3086-L3093",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",se,[t("summary",null,[e[226]||(e[226]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_init",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_init"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_init")],-1)),e[227]||(e[227]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[229]||(e[229]=o("",7)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[228]||(e[228]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3113-L3133",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",re,[t("summary",null,[e[230]||(e[230]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_init_shared",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_init_shared"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_init_shared")],-1)),e[231]||(e[231]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[233]||(e[233]=t("p",null,[t("code",null,"mbarrier_init_shared")],-1)),e[234]||(e[234]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.init"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[235]||(e[235]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier-init",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[232]||(e[232]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3156-L3163",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",oe,[t("summary",null,[e[236]||(e[236]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_inval-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_inval-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_inval")],-1)),e[237]||(e[237]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[239]||(e[239]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[238]||(e[238]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3186-L3201",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ie,[t("summary",null,[e[240]||(e[240]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_inval_shared-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_inval_shared-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_inval_shared")],-1)),e[241]||(e[241]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[243]||(e[243]=t("p",null,[t("code",null,"mbarrier_inval_shared")],-1)),e[244]||(e[244]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.inval"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[245]||(e[245]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier-inval",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[242]||(e[242]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3221-L3228",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",le,[t("summary",null,[e[246]||(e[246]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_test_wait-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_test_wait-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_test_wait")],-1)),e[247]||(e[247]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[249]||(e[249]=o("",10)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[248]||(e[248]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3248-L3294",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ce,[t("summary",null,[e[250]||(e[250]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_test_wait_shared-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_test_wait_shared-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_test_wait_shared")],-1)),e[251]||(e[251]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[253]||(e[253]=t("p",null,[t("code",null,"mbarrier_test_wait_shared")],-1)),e[254]||(e[254]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.test.wait"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[255]||(e[255]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#parallel-synchronization-and-communication-instructions-mbarrier-test-wait-try-wait",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[252]||(e[252]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3314-L3321",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",de,[t("summary",null,[e[256]||(e[256]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_try_wait_parity-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_try_wait_parity-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_try_wait_parity")],-1)),e[257]||(e[257]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[259]||(e[259]=o("",9)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[258]||(e[258]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3343-L3394",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",pe,[t("summary",null,[e[260]||(e[260]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mbarrier_try_wait_parity_shared-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.mbarrier_try_wait_parity_shared-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mbarrier_try_wait_parity_shared")],-1)),e[261]||(e[261]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[263]||(e[263]=t("p",null,[t("code",null,"mbarrier_try_wait_parity_shared")],-1)),e[264]||(e[264]=t("p",null,[a("This Op is the same as "),t("code",null,"nvvm.mbarrier.try_wait.parity"),a(" except that the "),t("em",null,"mbarrier object"),a(" should be accessed using a shared-memory pointer instead of a generic-memory pointer.")],-1)),e[265]||(e[265]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#parallel-synchronization-and-communication-instructions-mbarrier-test-wait-try-wait",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[262]||(e[262]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3416-L3423",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",me,[t("summary",null,[e[266]||(e[266]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.mma_sync-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.nvvm.mma_sync-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.mma_sync")],-1)),e[267]||(e[267]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[269]||(e[269]=o("",11)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[268]||(e[268]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3500-L3567",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ue,[t("summary",null,[e[270]||(e[270]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.nanosleep-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.nanosleep-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.nanosleep")],-1)),e[271]||(e[271]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[273]||(e[273]=t("p",null,[t("code",null,"nanosleep")],-1)),e[274]||(e[274]=t("p",null,[a("The op suspends the thread for a sleep duration approximately close to the delay "),t("code",null,"$duration"),a(", specified in nanoseconds.")],-1)),e[275]||(e[275]=t("p",null,"The sleep duration is approximated, but guaranteed to be in the interval [0, 2*t]. The maximum sleep duration is 1 millisecond. The implementation may reduce the sleep duration for individual threads within a warp such that all sleeping threads in the warp wake up together.",-1)),e[276]||(e[276]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#miscellaneous-instructions-nanosleep",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[272]||(e[272]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3615-L3627",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",he,[t("summary",null,[e[277]||(e[277]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.pmevent-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.pmevent-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.pmevent")],-1)),e[278]||(e[278]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[280]||(e[280]=t("p",null,[t("code",null,"pmevent")],-1)),e[281]||(e[281]=t("p",null,"Triggers one or more of a fixed number of performance monitor events, with event index or mask specified by immediate operand.",-1)),e[282]||(e[282]=t("p",null,[a("Without "),t("code",null,"mask"),a(" it triggers a single performance monitor event indexed by immediate operand a, in the range 0..15.")],-1)),e[283]||(e[283]=t("p",null,[a("With "),t("code",null,"mask"),a(" it triggers one or more of the performance monitor events. Each bit in the 16-bit immediate operand controls an event.")],-1)),e[284]||(e[284]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#miscellaneous-instructions-pmevent",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[279]||(e[279]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3647-L3660",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",fe,[t("summary",null,[e[285]||(e[285]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.prefetch",href:"#Reactant.MLIR.Dialects.nvvm.prefetch"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.prefetch")],-1)),e[286]||(e[286]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[288]||(e[288]=o("",7)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[287]||(e[287]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3683-L3710",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Te,[t("summary",null,[e[289]||(e[289]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.redux_sync-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.redux_sync-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.redux_sync")],-1)),e[290]||(e[290]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[292]||(e[292]=o("",4)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[291]||(e[291]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3766-L3779",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",be,[t("summary",null,[e[293]||(e[293]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.shfl_sync-NTuple{4, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.shfl_sync-NTuple{4, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.shfl_sync")],-1)),e[294]||(e[294]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[296]||(e[296]=o("",3)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[295]||(e[295]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3830-L3843",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ve,[t("summary",null,[e[297]||(e[297]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.st_bulk-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.st_bulk-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.st_bulk")],-1)),e[298]||(e[298]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[300]||(e[300]=t("p",null,[t("code",null,"st_bulk")],-1)),e[301]||(e[301]=t("p",null,[a("Initializes a region of shared memory at the address given by "),t("code",null,"addr"),a(". The "),t("code",null,"size"),a(" operand specifies the number of bytes to initialize and must be a multiple of 8. The "),t("code",null,"initVal"),a(" operand specifies the value to initialize the memory to. The only supported value is 0.")],-1)),e[302]||(e[302]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-st-bulk",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[299]||(e[299]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L342-L352",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ge,[t("summary",null,[e[303]||(e[303]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.stmatrix-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.nvvm.stmatrix-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.stmatrix")],-1)),e[304]||(e[304]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[306]||(e[306]=t("p",null,[t("code",null,"stmatrix")],-1)),e[307]||(e[307]=t("p",null,"Collectively store one or more matrices across all threads in a warp to the location indicated by the address operand ptr in shared memory.",-1)),e[308]||(e[308]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-store-instruction-stmatrix",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[305]||(e[305]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3916-L3923",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ye,[t("summary",null,[e[309]||(e[309]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_alloc-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_alloc-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_alloc")],-1)),e[310]||(e[310]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[312]||(e[312]=t("p",null,[t("code",null,"tcgen05_alloc")],-1)),e[313]||(e[313]=t("p",null,[a("The "),t("code",null,"tcgen05.alloc"),a(" Op allocates tensor core memory for the amount specified by "),t("code",null,"nCols"),a(" and writes the destination address to the "),t("code",null,"addr"),a(" argument. The "),t("code",null,"nCols"),a(" operand specifies the number of columns to be allocated and it must be a power-of-two. "),t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#tcgen05-memory-alloc-manage-instructions",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[311]||(e[311]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L3995-L4003",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Re,[t("summary",null,[e[314]||(e[314]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_commit",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_commit"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_commit")],-1)),e[315]||(e[315]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[317]||(e[317]=o("",2)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[316]||(e[316]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4024-L4036",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Qe,[t("summary",null,[e[318]||(e[318]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_cp-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_cp-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_cp")],-1)),e[319]||(e[319]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[321]||(e[321]=o("",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[320]||(e[320]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4063-L4082",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",_e,[t("summary",null,[e[322]||(e[322]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_dealloc-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_dealloc-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_dealloc")],-1)),e[323]||(e[323]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[325]||(e[325]=t("p",null,[t("code",null,"tcgen05_dealloc")],-1)),e[326]||(e[326]=t("p",null,[a("The "),t("code",null,"tcgen05.dealloc"),a(" Op de-allocates the tensor core memory specified by "),t("code",null,"tmemAddr"),a(", which must be from a previous tensor memory allocation. The "),t("code",null,"nCols"),a(" operand specifies the number of columns to be de-allocated, and it must be a power-of-two. "),t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#tcgen05-memory-alloc-manage-instructions",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[324]||(e[324]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4113-L4121",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",ke,[t("summary",null,[e[327]||(e[327]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_fence-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_fence-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_fence")],-1)),e[328]||(e[328]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[330]||(e[330]=t("p",null,[t("code",null,"tcgen05_fence")],-1)),e[331]||(e[331]=t("p",null,[a("The "),t("code",null,"tcgen05.fence<before>"),a(" orders all prior async tcgen05 operations with respect to the subsequent tcgen05 and execution ordering operations. The "),t("code",null,"tcgen05.fence<after>"),a(" orders all subsequent async tcgen05 operations with respect to the prior tcgen05 and execution ordering operations.")],-1)),e[332]||(e[332]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#tensorcore-5th-generation-instructions-tcgen05-fence",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[329]||(e[329]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4142-L4151",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Ie,[t("summary",null,[e[333]||(e[333]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_ld",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_ld"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_ld")],-1)),e[334]||(e[334]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[336]||(e[336]=o("",10)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[335]||(e[335]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4171-L4218",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",xe,[t("summary",null,[e[337]||(e[337]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_mma_smem_desc-NTuple{6, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_mma_smem_desc-NTuple{6, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_mma_smem_desc")],-1)),e[338]||(e[338]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[340]||(e[340]=o("",6)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[339]||(e[339]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4247-L4286",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Le,[t("summary",null,[e[341]||(e[341]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_relinquish_alloc_permit-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_relinquish_alloc_permit-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_relinquish_alloc_permit")],-1)),e[342]||(e[342]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[344]||(e[344]=t("p",null,[t("code",null,"tcgen05_relinquish_alloc_permit")],-1)),e[345]||(e[345]=t("p",null,[a("The "),t("code",null,"tcgen05.relinquish_alloc_permit"),a(" Op specifies that the CTA of the executing thread is relinquishing the right to allocate Tensor Memory. So, it is illegal for a CTA to perform "),t("code",null,"tcgen05.alloc"),a(" after any of its constituent threads execute "),t("code",null,"tcgen05.relinquish_alloc_permit"),a(". "),t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#tcgen05-memory-alloc-manage-instructions",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[343]||(e[343]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4322-L4330",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Me,[t("summary",null,[e[346]||(e[346]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_shift-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_shift-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_shift")],-1)),e[347]||(e[347]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[349]||(e[349]=t("p",null,[t("code",null,"tcgen05_shift")],-1)),e[350]||(e[350]=t("p",null,[a("The "),t("code",null,"tcgen05.shift"),a(" is an asynchronous instruction which initiates the shifting of 32-byte elements downwards across all the rows, except the last, by one row. The operand "),t("code",null,"taddr"),a(" specifies the base address of the matrix in Tensor Memory whose rows must be down shifted.")],-1)),e[351]||(e[351]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#tcgen05-instructions-tcgen05-shift",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[348]||(e[348]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4351-L4360",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",je,[t("summary",null,[e[352]||(e[352]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_st",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_st"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_st")],-1)),e[353]||(e[353]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[355]||(e[355]=o("",10)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[354]||(e[354]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4381-L4427",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",De,[t("summary",null,[e[356]||(e[356]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.tcgen05_wait-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.tcgen05_wait-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.tcgen05_wait")],-1)),e[357]||(e[357]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[359]||(e[359]=t("p",null,[t("code",null,"tcgen05_wait")],-1)),e[360]||(e[360]=t("p",null,[a("The "),t("code",null,"tcgen05.wait<load>"),a(" causes the executing thread to block until all prior "),t("code",null,"tcgen05.ld"),a(" operations issued by the executing thread have completed. Similarly, the "),t("code",null,"tcgen05.wait<store>"),a(" causes the executing thread to block until all prior "),t("code",null,"tcgen05.st"),a(" operations issued by the executing thread have completed. "),t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/#tcgen05-instructions-tcgen05-wait",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[358]||(e[358]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4456-L4465",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",we,[t("summary",null,[e[361]||(e[361]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.vote_sync-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.vote_sync-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.vote_sync")],-1)),e[362]||(e[362]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[364]||(e[364]=o("",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[363]||(e[363]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4545-L4564",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Ae,[t("summary",null,[e[365]||(e[365]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.wgmma_commit_group_sync_aligned-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.wgmma_commit_group_sync_aligned-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.wgmma_commit_group_sync_aligned")],-1)),e[366]||(e[366]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[368]||(e[368]=t("p",null,[t("code",null,"wgmma_commit_group_sync_aligned")],-1)),e[369]||(e[369]=t("p",null,"Commits all prior uncommitted warpgroup level matrix multiplication operations.",-1)),e[370]||(e[370]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#asynchronous-warpgroup-level-matrix-instructions-wgmma-commit-group",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[367]||(e[367]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4781-L4787",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Ve,[t("summary",null,[e[371]||(e[371]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.wgmma_fence_aligned-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.wgmma_fence_aligned-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.wgmma_fence_aligned")],-1)),e[372]||(e[372]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[374]||(e[374]=t("p",null,[t("code",null,"wgmma_fence_aligned")],-1)),e[375]||(e[375]=t("p",null,"Enforce an ordering of register accesses between warpgroup level matrix multiplication and other operations.",-1)),e[376]||(e[376]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#asynchronous-warpgroup-level-matrix-instructions-wgmma-fence",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[373]||(e[373]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4754-L4761",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Se,[t("summary",null,[e[377]||(e[377]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.wgmma_mma_async-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.nvvm.wgmma_mma_async-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.wgmma_mma_async")],-1)),e[378]||(e[378]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[380]||(e[380]=o("",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[379]||(e[379]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4807-L4865",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",Ce,[t("summary",null,[e[381]||(e[381]=t("a",{id:"Reactant.MLIR.Dialects.nvvm.wgmma_wait_group_sync_aligned-Tuple{}",href:"#Reactant.MLIR.Dialects.nvvm.wgmma_wait_group_sync_aligned-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.nvvm.wgmma_wait_group_sync_aligned")],-1)),e[382]||(e[382]=a()),s(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[384]||(e[384]=t("p",null,[t("code",null,"wgmma_wait_group_sync_aligned")],-1)),e[385]||(e[385]=t("p",null,"Signal the completion of a preceding warpgroup operation.",-1)),e[386]||(e[386]=t("p",null,[t("a",{href:"https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#asynchronous-warpgroup-level-matrix-instructions-wgmma-wait-group",target:"_blank",rel:"noreferrer"},"For more information, see PTX ISA")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[383]||(e[383]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/cae210ec002efc9bf5412ca1ea2357f5881f5cba/src/mlir/Dialects/Nvvm.jl#L4912-L4918",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const Xe=c(p,[["render",Pe]]);export{qe as __pageData,Xe as default};
