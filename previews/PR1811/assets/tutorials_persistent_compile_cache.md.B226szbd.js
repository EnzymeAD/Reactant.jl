import{_ as t,c as a,o as s,al as i}from"./chunks/framework.Dfdb5CPK.js";const u=JSON.parse('{"title":"Persistent Compilation Cache","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/persistent_compile_cache.md","filePath":"tutorials/persistent_compile_cache.md","lastUpdated":null}'),c={name:"tutorials/persistent_compile_cache.md"};function n(o,e,r,l,h,p){return s(),a("div",null,[...e[0]||(e[0]=[i(`<h1 id="persistent_compile_cache" tabindex="-1">Persistent Compilation Cache <a class="header-anchor" href="#persistent_compile_cache" aria-label="Permalink to &quot;Persistent Compilation Cache {#persistent_compile_cache}&quot;">​</a></h1><p>Reactant.jl supports a persistent compilation cache that caches compiled and autotuned kernels on disk. We use <a href="https://openxla.org/xla/persisted_autotuning" target="_blank" rel="noreferrer">XLA&#39;s persisted autotuning</a> for this purpose. By default, the autotuning cache is enabled.</p><h2 id="Preferences" tabindex="-1">Preferences <a class="header-anchor" href="#Preferences" aria-label="Permalink to &quot;Preferences {#Preferences}&quot;">​</a></h2><ul><li><p><code>persistent_cache_enabled</code>: Whether to enable the persistent compilation cache. Defaults to <code>false</code>.</p></li><li><p><code>persistent_cache_directory</code>: The base directory to use for the persistent compilation cache. Note that it is recommended to not set this preference, as Reactant will create a unique directory corresponding to XLA and Reactant_jll&#39;s version. If the user sets this preference, it is the user&#39;s responsibility to ensure that the directory exists and is writable and needs to be segregated based on XLA and Reactant_jll&#39;s version. Defaults to <code>&quot;&quot;</code>.</p></li><li><p><code>persistent_kernel_cache_enabled</code>: Whether to enable the kernel cache. Defaults to <code>false</code>.</p></li><li><p><code>persistent_autotune_cache_enabled</code>: Whether to enable the autotuning cache. Defaults to <code>true</code>.</p></li></ul><h2 id="Clearing-the-cache" tabindex="-1">Clearing the cache <a class="header-anchor" href="#Clearing-the-cache" aria-label="Permalink to &quot;Clearing the cache {#Clearing-the-cache}&quot;">​</a></h2><p>To clear the cache, you can use <a href="/Reactant.jl/previews/PR1811/api/api#Reactant.PersistentCompileCache.clear_compilation_cache!"><code>Reactant.clear_compilation_cache!</code></a>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reactant</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear_compilation_cache!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div>`,7)])])}const _=t(c,[["render",n]]);export{u as __pageData,_ as default};
