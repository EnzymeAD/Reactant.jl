import{_ as p,C as r,c as l,o as c,j as s,a as t,al as o,G as n,w as i}from"./chunks/framework.D3XE5KM7.js";const ae=JSON.parse('{"title":"SparseTensor Dialect","description":"","frontmatter":{},"headers":[],"relativePath":"api/dialects/sparsetensor.md","filePath":"api/dialects/sparsetensor.md","lastUpdated":null}'),d={name:"api/dialects/sparsetensor.md"},u={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"};function K(Y,e,Q,X,Z,ee){const a=r("Badge");return c(),l("div",null,[e[148]||(e[148]=s("h1",{id:"SparseTensor-Dialect",tabindex:"-1"},[t("SparseTensor Dialect "),s("a",{class:"header-anchor",href:"#SparseTensor-Dialect","aria-label":'Permalink to "SparseTensor Dialect {#SparseTensor-Dialect}"'},"â€‹")],-1)),s("details",u,[s("summary",null,[e[0]||(e[0]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.assemble-Tuple{Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.assemble-Tuple{Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.assemble")],-1)),e[1]||(e[1]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[3]||(e[3]=o(`<p><code>assemble</code></p><p>Assembles the per-level position and coordinate arrays together with the values arrays into a sparse tensor. The order and types of the provided levels must be consistent with the actual storage layout of the returned sparse tensor described below.</p><ul><li><p><code>levels: [tensor&lt;? x iType&gt;, ...]</code> supplies the sparse tensor position and coordinate arrays of the sparse tensor for the corresponding level as specifed by <code>sparse_tensor::StorageLayout</code>.</p></li><li><p><code>values : tensor&lt;? x V&gt;</code> supplies the values array for the stored elements in the sparse tensor.</p></li></ul><p>This operation can be used to assemble a sparse tensor from an external source; e.g., by passing numpy arrays from Python. It is the user&#39;s responsibility to provide input that can be correctly interpreted by the sparsifier, which does not perform any sanity test to verify data integrity.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%pos    = arith.constant dense&lt;[0, 3]&gt;                : tensor&lt;2xindex&gt;</span></span>
<span class="line"><span>%index  = arith.constant dense&lt;[[0,0], [1,2], [1,3]]&gt; : tensor&lt;3x2xindex&gt;</span></span>
<span class="line"><span>%values = arith.constant dense&lt;[ 1.1,   2.2,   3.3 ]&gt; : tensor&lt;3xf64&gt;</span></span>
<span class="line"><span>%s = sparse_tensor.assemble (%pos, %index), %values</span></span>
<span class="line"><span>   : (tensor&lt;2xindex&gt;, tensor&lt;3x2xindex&gt;), tensor&lt;3xf64&gt; to tensor&lt;3x4xf64, #COO&gt;</span></span>
<span class="line"><span>// yields COO format |1.1, 0.0, 0.0, 0.0|</span></span>
<span class="line"><span>//     of 3x4 matrix |0.0, 0.0, 2.2, 3.3|</span></span>
<span class="line"><span>//                   |0.0, 0.0, 0.0, 0.0|</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[2]||(e[2]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L202-L235",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",h,[s("summary",null,[e[4]||(e[4]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.binary-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.binary-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.binary")],-1)),e[5]||(e[5]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[7]||(e[7]=o(`<p><code>binary</code></p><p>Defines a computation within a <code>linalg.generic</code> operation that takes two operands and executes one of the regions depending on whether both operands or either operand is nonzero (i.e. stored explicitly in the sparse storage format).</p><p>Three regions are defined for the operation and must appear in this order:</p><ul><li><p>overlap (elements present in both sparse tensors)</p></li><li><p>left (elements only present in the left sparse tensor)</p></li><li><p>right (element only present in the right sparse tensor)</p></li></ul><p>Each region contains a single block describing the computation and result. Every non-empty block must end with a sparse_tensor.yield and the return type must match the type of <code>output</code>. The primary region&#39;s block has two arguments, while the left and right region&#39;s block has only one argument.</p><p>A region may also be declared empty (i.e. <code>left={}</code>), indicating that the region does not contribute to the output. For example, setting both <code>left={}</code> and <code>right={}</code> is equivalent to the intersection of the two inputs as only the overlap region will contribute values to the output.</p><p>As a convenience, there is also a special token <code>identity</code> which can be used in place of the left or right region. This token indicates that the return value is the input value (i.e. func(%x) =&gt; return %x). As a practical example, setting <code>left=identity</code> and <code>right=identity</code> would be equivalent to a union operation where non-overlapping values in the inputs are copied to the output unchanged.</p><p>Due to the possibility of empty regions, i.e. lack of a value for certain cases, the result of this operation may only feed directly into the output of the <code>linalg.generic</code> operation or into into a custom reduction <code>sparse_tensor.reduce</code> operation that follows in the same region.</p><p>Example of isEqual applied to intersecting elements only:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%C = tensor.empty(...)</span></span>
<span class="line"><span>%0 = linalg.generic #trait</span></span>
<span class="line"><span>  ins(%A: tensor&lt;?xf64, #SparseVector&gt;,</span></span>
<span class="line"><span>      %B: tensor&lt;?xf64, #SparseVector&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?xi8, #SparseVector&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %b: f64, %c: i8) :</span></span>
<span class="line"><span>    %result = sparse_tensor.binary %a, %b : f64, f64 to i8</span></span>
<span class="line"><span>      overlap={</span></span>
<span class="line"><span>        ^bb0(%arg0: f64, %arg1: f64):</span></span>
<span class="line"><span>          %cmp = arith.cmpf &quot;oeq&quot;, %arg0, %arg1 : f64</span></span>
<span class="line"><span>          %ret_i8 = arith.extui %cmp : i1 to i8</span></span>
<span class="line"><span>          sparse_tensor.yield %ret_i8 : i8</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      left={}</span></span>
<span class="line"><span>      right={}</span></span>
<span class="line"><span>    linalg.yield %result : i8</span></span>
<span class="line"><span>} -&gt; tensor&lt;?xi8, #SparseVector&gt;</span></span></code></pre></div><p>Example of A+B in upper triangle, A-B in lower triangle:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%C = tensor.empty(...)</span></span>
<span class="line"><span>%1 = linalg.generic #trait</span></span>
<span class="line"><span>  ins(%A: tensor&lt;?x?xf64, #CSR&gt;, %B: tensor&lt;?x?xf64, #CSR&gt;</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?x?xf64, #CSR&gt; {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %b: f64, %c: f64) :</span></span>
<span class="line"><span>    %row = linalg.index 0 : index</span></span>
<span class="line"><span>    %col = linalg.index 1 : index</span></span>
<span class="line"><span>    %result = sparse_tensor.binary %a, %b : f64, f64 to f64</span></span>
<span class="line"><span>      overlap={</span></span>
<span class="line"><span>        ^bb0(%x: f64, %y: f64):</span></span>
<span class="line"><span>          %cmp = arith.cmpi &quot;uge&quot;, %col, %row : index</span></span>
<span class="line"><span>          %upperTriangleResult = arith.addf %x, %y : f64</span></span>
<span class="line"><span>          %lowerTriangleResult = arith.subf %x, %y : f64</span></span>
<span class="line"><span>          %ret = arith.select %cmp, %upperTriangleResult, %lowerTriangleResult : f64</span></span>
<span class="line"><span>          sparse_tensor.yield %ret : f64</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      left=identity</span></span>
<span class="line"><span>      right={</span></span>
<span class="line"><span>        ^bb0(%y: f64):</span></span>
<span class="line"><span>          %cmp = arith.cmpi &quot;uge&quot;, %col, %row : index</span></span>
<span class="line"><span>          %lowerTriangleResult = arith.negf %y : f64</span></span>
<span class="line"><span>          %ret = arith.select %cmp, %y, %lowerTriangleResult : f64</span></span>
<span class="line"><span>          sparse_tensor.yield %ret : f64</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    linalg.yield %result : f64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?x?xf64, #CSR&gt;</span></span></code></pre></div><p>Example of set difference. Returns a copy of A where its sparse structure is <em>not</em> overlapped by B. The element type of B can be different than A because we never use its values, only its sparse structure:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%C = tensor.empty(...)</span></span>
<span class="line"><span>%2 = linalg.generic #trait</span></span>
<span class="line"><span>  ins(%A: tensor&lt;?x?xf64, #CSR&gt;, %B: tensor&lt;?x?xi32, #CSR&gt;</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?x?xf64, #CSR&gt; {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %b: i32, %c: f64) :</span></span>
<span class="line"><span>    %result = sparse_tensor.binary %a, %b : f64, i32 to f64</span></span>
<span class="line"><span>      overlap={}</span></span>
<span class="line"><span>      left=identity</span></span>
<span class="line"><span>      right={}</span></span>
<span class="line"><span>    linalg.yield %result : f64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?x?xf64, #CSR&gt;</span></span></code></pre></div>`,14)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[6]||(e[6]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L257-L362",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[e[8]||(e[8]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.coiterate-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.coiterate-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.coiterate")],-1)),e[9]||(e[9]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=o(`<p><code>coiterate</code></p><p>The <code>sparse_tensor.coiterate</code> operation represents a loop (nest) over a set of iteration spaces. The operation can have multiple regions, with each of them defining a case to compute a result at the current iterations. The case condition is defined solely based on the pattern of specified iterators. For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%ret = sparse_tensor.coiterate (%sp1, %sp2) at(%coord) iter_args(%arg = %init)</span></span>
<span class="line"><span>     : (!sparse_tensor.iter_space&lt;#CSR, lvls = 0&gt;,</span></span>
<span class="line"><span>        !sparse_tensor.iter_space&lt;#COO, lvls = 0&gt;)</span></span>
<span class="line"><span>     -&gt; index</span></span>
<span class="line"><span>case %it1, _ {</span></span>
<span class="line"><span>  // %coord is specifed in space %sp1 but *NOT* specified in space %sp2.</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>case %it1, %it2 {</span></span>
<span class="line"><span>  // %coord is specifed in *BOTH* spaces %sp1 and %sp2.</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>sparse_tensor.coiterate</code> can also operate on loop-carried variables. It returns the final value for each loop-carried variable after loop termination. The initial values of the variables are passed as additional SSA operands to the iterator SSA value and used coordinate SSA values. Each operation region has variadic arguments for specified (used), one argument for each loop-carried variable, representing the value of the variable at the current iteration, followed by a list of arguments for iterators. The body region must contain exactly one block that terminates with <code>sparse_tensor.yield</code>.</p><p>The results of an <code>sparse_tensor.coiterate</code> hold the final values after the last iteration. If the <code>sparse_tensor.coiterate</code> defines any values, a yield must be explicitly present in every region defined in the operation. The number and types of the <code>sparse_tensor.coiterate</code> results must match the initial values in the iter_args binding and the yield operands.</p><p>A <code>sparse_tensor.coiterate</code> example that does elementwise addition between two sparse vectors.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%ret = sparse_tensor.coiterate (%sp1, %sp2) at(%coord) iter_args(%arg = %init)</span></span>
<span class="line"><span>     : (!sparse_tensor.iter_space&lt;#CSR, lvls = 0&gt;,</span></span>
<span class="line"><span>        !sparse_tensor.iter_space&lt;#CSR, lvls = 0&gt;)</span></span>
<span class="line"><span>     -&gt; tensor&lt;?xindex, #CSR&gt;</span></span>
<span class="line"><span>case %it1, _ {</span></span>
<span class="line"><span>   // v = v1 + 0 = v1</span></span>
<span class="line"><span>   %v1 = sparse_tensor.extract_value %t1 at %it1 : index</span></span>
<span class="line"><span>   %yield = sparse_tensor.insert %v1 into %arg[%coord]</span></span>
<span class="line"><span>   sparse_tensor.yield %yield</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>case _, %it2 {</span></span>
<span class="line"><span>   // v = v2 + 0 = v2</span></span>
<span class="line"><span>   %v2 = sparse_tensor.extract_value %t2 at %it2 : index</span></span>
<span class="line"><span>   %yield = sparse_tensor.insert %v1 into %arg[%coord]</span></span>
<span class="line"><span>   sparse_tensor.yield %yield</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>case %it1, %it2 {</span></span>
<span class="line"><span>   // v = v1 + v2</span></span>
<span class="line"><span>   %v1 = sparse_tensor.extract_value %t1 at %it1 : index</span></span>
<span class="line"><span>   %v2 = sparse_tensor.extract_value %t2 at %it2 : index</span></span>
<span class="line"><span>   %v = arith.addi %v1, %v2 : index</span></span>
<span class="line"><span>   %yield = sparse_tensor.insert %v into %arg[%coord]</span></span>
<span class="line"><span>   sparse_tensor.yield %yield</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,7)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[10]||(e[10]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L396-L464",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",b,[s("summary",null,[e[12]||(e[12]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.compress-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.compress-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.compress")],-1)),e[13]||(e[13]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[15]||(e[15]=o(`<p><code>compress</code></p><p>Finishes a single access pattern expansion by moving inserted elements into the sparse storage scheme of the given tensor with the given level-coordinates. The arity of <code>lvlCoords</code> is one less than the level-rank of the tensor, with the coordinate of the innermost level defined through the <code>added</code> array. The <code>values</code> and <code>filled</code> arrays are reset in a <em>sparse</em> fashion by only iterating over set elements through an indirection using the <code>added</code> array, so that the operations are kept proportional to the number of nonzeros. See the <code>sparse_tensor.expand</code> operation for more details.</p><p>Note that this operation is &quot;impure&quot; in the sense that even though the result is modeled through an SSA value, the insertion is eventually done &quot;in place&quot;, and referencing the old SSA value is undefined behavior.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%result = sparse_tensor.compress %values, %filled, %added, %count into %tensor[%i]</span></span>
<span class="line"><span>  : memref&lt;?xf64&gt;, memref&lt;?xi1&gt;, memref&lt;?xindex&gt;, tensor&lt;4x4xf64, #CSR&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[14]||(e[14]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L495-L518",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",f,[s("summary",null,[e[16]||(e[16]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.concatenate-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.concatenate-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.concatenate")],-1)),e[17]||(e[17]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[19]||(e[19]=o(`<p><code>concatenate</code></p><p>Concatenates a list input tensors and the output tensor with the same dimension-rank. The concatenation happens on the specified <code>dimension</code> (0 &lt;= dimension &lt; dimRank). The resulting <code>dimension</code> size is the sum of all the input sizes for that dimension, while all the other dimensions should have the same size in the input and output tensors.</p><p>Only statically-sized input tensors are accepted, while the output tensor can be dynamically-sized.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = sparse_tensor.concatenate %1, %2 { dimension = 0 : index }</span></span>
<span class="line"><span>  : tensor&lt;64x64xf64, #CSR&gt;, tensor&lt;64x64xf64, #CSR&gt; to tensor&lt;128x64xf64, #CSR&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[18]||(e[18]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L548-L566",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",m,[s("summary",null,[e[20]||(e[20]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.convert-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.convert-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.convert")],-1)),e[21]||(e[21]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[23]||(e[23]=o(`<p><code>convert</code></p><p>Converts one sparse or dense tensor type to another tensor type. The rank of the source and destination types must match exactly, and the dimension sizes must either match exactly or relax from a static to a dynamic size. The sparse encoding of the two types can obviously be completely different. The name <code>convert</code> was preferred over <code>cast</code>, since the operation may incur a non-trivial cost.</p><p>When converting between two different sparse tensor types, only explicitly stored values are moved from one underlying sparse storage format to the other. When converting from an unannotated dense tensor type to a sparse tensor type, an explicit test for nonzero values is used. When converting to an unannotated dense tensor type, implicit zeroes in the sparse storage format are made explicit. Note that the conversions can have non-trivial costs associated with them, since they may involve elaborate data structure transformations. Also, conversions from sparse tensor types into dense tensor types may be infeasible in terms of storage requirements.</p><p>Trivial dense-to-dense convert will be removed by canonicalization while trivial sparse-to-sparse convert will be removed by the sparse codegen. This is because we use trivial sparse-to-sparse convert to tell bufferization that the sparse codegen will expand the tensor buffer into sparse tensor storage.</p><p>Examples:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = sparse_tensor.convert %a : tensor&lt;32x32xf32&gt; to tensor&lt;32x32xf32, #CSR&gt;</span></span>
<span class="line"><span>%1 = sparse_tensor.convert %a : tensor&lt;32x32xf32&gt; to tensor&lt;?x?xf32, #CSR&gt;</span></span>
<span class="line"><span>%2 = sparse_tensor.convert %b : tensor&lt;8x8xi32, #CSC&gt; to tensor&lt;8x8xi32, #CSR&gt;</span></span>
<span class="line"><span>%3 = sparse_tensor.convert %c : tensor&lt;4x8xf64, #CSR&gt; to tensor&lt;4x?xf64, #CSC&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// The following conversion is not allowed (since it would require a</span></span>
<span class="line"><span>// runtime assertion that the source&#39;s dimension size is actually 100).</span></span>
<span class="line"><span>%4 = sparse_tensor.convert %d : tensor&lt;?xf64&gt; to tensor&lt;100xf64, #SV&gt;</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[22]||(e[22]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L586-L624",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[e[24]||(e[24]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.coordinates-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.coordinates-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.coordinates")],-1)),e[25]||(e[25]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[27]||(e[27]=o(`<p><code>coordinates</code></p><p>Returns the coordinates array of the tensor&#39;s storage at the given level. This is similar to the <code>bufferization.to_buffer</code> operation in the sense that it provides a bridge between a tensor world view and a bufferized world view. Unlike the <code>bufferization.to_buffer</code> operation, however, this sparse operation actually lowers into code that extracts the coordinates array from the sparse storage itself (either by calling a support library or through direct code).</p><p>Writing into the result of this operation is undefined behavior.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%1 = sparse_tensor.coordinates %0 { level = 1 : index }</span></span>
<span class="line"><span>   : tensor&lt;64x64xf64, #CSR&gt; to memref&lt;?xindex&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[26]||(e[26]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1744-L1763",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",R,[s("summary",null,[e[28]||(e[28]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.coordinates_buffer-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.coordinates_buffer-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.coordinates_buffer")],-1)),e[29]||(e[29]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[31]||(e[31]=o(`<p><code>coordinates_buffer</code></p><p>Returns the linear coordinates array for a sparse tensor with a trailing COO region with at least two levels. It is an error if the tensor doesn&#39;t contain such a COO region. This is similar to the <code>bufferization.to_buffer</code> operation in the sense that it provides a bridge between a tensor world view and a bufferized world view. Unlike the <code>bufferization.to_buffer</code> operation, however, this operation actually lowers into code that extracts the linear coordinates array from the sparse storage scheme that stores the coordinates for the COO region as an array of structures. For example, a 2D COO sparse tensor with two non-zero elements at coordinates (1, 3) and (4, 6) are stored in a linear buffer as (1, 4, 3, 6) instead of two buffer as (1, 4) and (3, 6).</p><p>Writing into the result of this operation is undefined behavior.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%1 = sparse_tensor.coordinates_buffer %0</span></span>
<span class="line"><span>   : tensor&lt;64x64xf64, #COO&gt; to memref&lt;?xindex&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[30]||(e[30]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1697-L1721",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[e[32]||(e[32]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.crd_translate-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.crd_translate-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.crd_translate")],-1)),e[33]||(e[33]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[35]||(e[35]=o(`<p><code>crd_translate</code></p><p>Performs coordinate translation between level and dimension coordinate space according to the affine maps defined by encoder.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%l0, %l1, %l2, %l3 = sparse_tensor.crd_translate dim_to_lvl [%d0, %d1] as #BSR</span></span>
<span class="line"><span>                   : index, index, index, index</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[34]||(e[34]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L644-L656",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",v,[s("summary",null,[e[36]||(e[36]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.disassemble-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.disassemble-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.disassemble")],-1)),e[37]||(e[37]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[39]||(e[39]=o(`<p><code>disassemble</code></p><p>The disassemble operation is the inverse of <code>sparse_tensor::assemble</code>. It copies the per-level position and coordinate arrays together with the values array of the given sparse tensor into the user-supplied buffers along with the actual length of the memory used in each returned buffer.</p><p>This operation can be used for returning a disassembled MLIR sparse tensor; e.g., copying the sparse tensor contents into pre-allocated numpy arrays back to Python. It is the user&#39;s responsibility to allocate large enough buffers of the appropriate types to hold the sparse tensor contents. The sparsifier simply copies all fields of the sparse tensor into the user-supplied buffers without any sanity test to verify data integrity.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// input COO format |1.1, 0.0, 0.0, 0.0|</span></span>
<span class="line"><span>//    of 3x4 matrix |0.0, 0.0, 2.2, 3.3|</span></span>
<span class="line"><span>//                  |0.0, 0.0, 0.0, 0.0|</span></span>
<span class="line"><span>%p, %c, %v, %p_len, %c_len, %v_len =</span></span>
<span class="line"><span>  sparse_tensor.disassemble %s : tensor&lt;3x4xf64, #COO&gt;</span></span>
<span class="line"><span>     out_lvls(%op, %oi : tensor&lt;2xindex&gt;, tensor&lt;3x2xindex&gt;)</span></span>
<span class="line"><span>     out_vals(%od : tensor&lt;3xf64&gt;) -&gt;</span></span>
<span class="line"><span>       (tensor&lt;2xindex&gt;, tensor&lt;3x2xindex&gt;), tensor&lt;3xf64&gt;, (index, index), index</span></span>
<span class="line"><span>// %p = arith.constant dense&lt;[ 0,              3 ]&gt; : tensor&lt;2xindex&gt;</span></span>
<span class="line"><span>// %c = arith.constant dense&lt;[[0,0], [1,2], [1,3]]&gt; : tensor&lt;3x2xindex&gt;</span></span>
<span class="line"><span>// %v = arith.constant dense&lt;[ 1.1,   2.2,   3.3 ]&gt; : tensor&lt;3xf64&gt;</span></span>
<span class="line"><span>// %p_len = 2</span></span>
<span class="line"><span>// %c_len = 6 (3x2)</span></span>
<span class="line"><span>// %v_len = 3</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[38]||(e[38]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L684-L717",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",x,[s("summary",null,[e[40]||(e[40]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.expand-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.expand-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.expand")],-1)),e[41]||(e[41]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[43]||(e[43]=o(`<p><code>expand</code></p><p>Performs an access pattern expansion for the innermost levels of the given tensor. This operation is useful to implement kernels in which a sparse tensor appears as output. This technique is known under several different names and using several alternative implementations, for example, phase counter [Gustavson72], expanded or switch array [Pissanetzky84], in phase scan [Duff90], access pattern expansion [Bik96], and workspaces [Kjolstad19].</p><p>The <code>values</code> and <code>filled</code> arrays must have lengths equal to the level-size of the innermost level (i.e., as if the innermost level were <em>dense</em>). The <code>added</code> array and <code>count</code> are used to store new level-coordinates when a false value is encountered in the <code>filled</code> array. All arrays should be allocated before the loop (possibly even shared between loops in a future optimization) so that their <em>dense</em> initialization can be amortized over many iterations. Setting and resetting the dense arrays in the loop nest itself is kept <em>sparse</em> by only iterating over set elements through an indirection using the added array, so that the operations are kept proportional to the number of nonzeros.</p><p>Note that this operation is &quot;impure&quot; in the sense that even though the results are modeled through SSA values, the operation relies on a proper side-effecting context that sets and resets the expanded arrays.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%values, %filled, %added, %count = sparse_tensor.expand %tensor</span></span>
<span class="line"><span>  : tensor&lt;4x4xf64, #CSR&gt; to memref&lt;?xf64&gt;, memref&lt;?xi1&gt;, memref&lt;?xindex&gt;</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[42]||(e[42]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L746-L779",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",T,[s("summary",null,[e[44]||(e[44]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.extract_iteration_space",href:"#Reactant.MLIR.Dialects.sparse_tensor.extract_iteration_space"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.extract_iteration_space")],-1)),e[45]||(e[45]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[47]||(e[47]=o(`<p><code>extract_iteration_space</code></p><p>Extracts a <code>!sparse_tensor.iter_space</code> from a sparse tensor between certain (consecutive) levels. For sparse levels, it is usually done by loading a postion range from the underlying sparse tensor storage. E.g., for a compressed level, the iteration space is extracted by [pos[i], pos[i+1]) supposing the the parent iterator points at <code>i</code>.</p><p><code>tensor</code>: the input sparse tensor that defines the iteration space. <code>parentIter</code>: the iterator for the previous level, at which the iteration space at the current levels will be extracted. <code>loLvl</code>, <code>hiLvl</code>: the level range between [loLvl, hiLvl) in the input tensor that the returned iteration space covers. <code>hiLvl - loLvl</code> defines the dimension of the iteration space.</p><p>The type of returned the value is must be <code>!sparse_tensor.iter_space&lt;#INPUT_ENCODING, lvls = $loLvl to $hiLvl&gt;</code>. The returned iteration space can then be iterated over by <code>sparse_tensor.iterate</code> operations to visit every stored element (usually nonzeros) in the input sparse tensor.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Extracts a 1-D iteration space from a COO tensor at level 1.</span></span>
<span class="line"><span>%space = sparse_tensor.iteration.extract_space %sp at %it1 lvls = 1</span></span>
<span class="line"><span>  : tensor&lt;4x8xf32, #COO&gt;, !sparse_tensor.iterator&lt;#COO, lvls = 0&gt;</span></span>
<span class="line"><span> -&gt;!sparse_tensor.iter_space&lt;#COO, lvls = 1&gt;</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[46]||(e[46]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L16-L45",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",I,[s("summary",null,[e[48]||(e[48]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.extract_value-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.extract_value-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.extract_value")],-1)),e[49]||(e[49]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[51]||(e[51]=o(`<p><code>extract_value</code></p><p>The <code>sparse_tensor.extract_value</code> operation extracts the value pointed to by a sparse iterator from a sparse tensor.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%val = sparse_tensor.extract_value %sp at %it</span></span>
<span class="line"><span>     : tensor&lt;?x?xf32, #CSR&gt;, !sparse_tensor.iterator&lt;#CSR, lvl = 1&gt;</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[50]||(e[50]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L76-L88",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",k,[s("summary",null,[e[52]||(e[52]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.foreach-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.foreach-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.foreach")],-1)),e[53]||(e[53]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[55]||(e[55]=o(`<p><code>foreach</code></p><p>Iterates over stored elements in a tensor (which are typically, but not always, non-zero for sparse tensors) and executes the block.</p><p><code>tensor</code>: the input tensor to iterate over. <code>initArgs</code>: the initial loop argument to carry and update during each iteration. <code>order</code>: an optional permutation affine map that specifies the order in which the dimensions are visited (e.g., row first or column first). This is only applicable when the input tensor is a non-annotated dense tensor.</p><p>For an input tensor with dim-rank <code>n</code>, the block must take <code>n + 1</code> arguments (plus additional loop-carried variables as described below). The first <code>n</code> arguments provide the dimension-coordinates of the element being visited, and must all have <code>index</code> type. The <code>(n+1)</code>-th argument provides the element&#39;s value, and must have the tensor&#39;s element type.</p><p><code>sparse_tensor.foreach</code> can also operate on loop-carried variables and returns the final values after loop termination. The initial values of the variables are passed as additional SSA operands to the &quot;sparse_tensor.foreach&quot; following the n + 1 SSA values mentioned above (n coordinates and 1 value).</p><p>The region must terminate with a &quot;sparse_tensor.yield&quot; that passes the current values of all loop-carried variables to the next iteration, or to the result, if at the last iteration. The number and static types of loop-carried variables may not change with iterations.</p><p>For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%c0 = arith.constant 0 : i32</span></span>
<span class="line"><span>%ret = sparse_tensor.foreach in %0 init(%c0): tensor&lt;?x?xi32, #DCSR&gt;, i32 -&gt; i32 do {</span></span>
<span class="line"><span> ^bb0(%arg1: index, %arg2: index, %arg3: i32, %iter: i32):</span></span>
<span class="line"><span>   %sum = arith.add %iter, %arg3</span></span>
<span class="line"><span>   sparse_tensor.yield %sum</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>It is important to note that the generated loop iterates over elements in their storage order. However, regardless of the storage scheme used by the tensor, the block is always given the dimension-coordinates.</p><p>For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#COL_MAJOR = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (d0, d1) -&gt; (d1 : compressed, d0 : compressed)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// foreach on a column-major sparse tensor</span></span>
<span class="line"><span>sparse_tensor.foreach in %0 : tensor&lt;2x3xf64, #COL_MAJOR&gt; do {</span></span>
<span class="line"><span> ^bb0(%row: index, %col: index, %arg3: f64):</span></span>
<span class="line"><span>    // [%row, %col] -&gt; [0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ROW_MAJOR = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (d0, d1) -&gt; (d0 : compressed, d1 : compressed)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// foreach on a row-major sparse tensor</span></span>
<span class="line"><span>sparse_tensor.foreach in %0 : tensor&lt;2x3xf64, #ROW_MAJOR&gt; do {</span></span>
<span class="line"><span> ^bb0(%row: index, %col: index, %arg3: f64):</span></span>
<span class="line"><span>    // [%row, %col] -&gt; [0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// foreach on a row-major dense tensor but visit column first</span></span>
<span class="line"><span>sparse_tensor.foreach in %0 {order=affine_map&lt;(i,j)-&gt;(j,i)&gt;}: tensor&lt;2x3xf64&gt; do {</span></span>
<span class="line"><span> ^bb0(%row: index, %col: index, %arg3: f64):</span></span>
<span class="line"><span>    // [%row, %col] -&gt; [0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1]</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,11)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[54]||(e[54]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L806-L878",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",L,[s("summary",null,[e[56]||(e[56]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.has_runtime_library-Tuple{}",href:"#Reactant.MLIR.Dialects.sparse_tensor.has_runtime_library-Tuple{}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.has_runtime_library")],-1)),e[57]||(e[57]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[59]||(e[59]=o(`<p><code>has_runtime_library</code></p><p>Returns a boolean value that indicates whether the sparsifier runs in runtime library mode or not. For testing only! This operation is useful for writing test cases that require different code depending on runtime/codegen mode.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%has_runtime = sparse_tensor.has_runtime_library</span></span>
<span class="line"><span>scf.if %has_runtime {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[58]||(e[58]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L945-L961",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",S,[s("summary",null,[e[60]||(e[60]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.iterate-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.iterate-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.iterate")],-1)),e[61]||(e[61]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[63]||(e[63]=o(`<p><code>iterate</code></p><p>The <code>sparse_tensor.iterate</code> operation represents a loop (nest) over the provided iteration space extracted from a specific sparse tensor. The operation defines an SSA value for a sparse iterator that points to the current stored element in the sparse tensor and SSA values for coordinates of the stored element. The coordinates are always converted to <code>index</code> type despite of the underlying sparse tensor storage. When coordinates are not used, the SSA values can be skipped by <code>_</code> symbols, which usually leads to simpler generated code after sparsification. For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// The coordinate for level 0 is not used when iterating over a 2-D</span></span>
<span class="line"><span>// iteration space.</span></span>
<span class="line"><span>%sparse_tensor.iterate %iterator in %space at(_, %crd_1)</span></span>
<span class="line"><span>  : !sparse_tensor.iter_space&lt;#CSR, lvls = 0 to 2&gt;</span></span></code></pre></div><p><code>sparse_tensor.iterate</code> can also operate on loop-carried variables. It returns the final values after loop termination. The initial values of the variables are passed as additional SSA operands to the iterator SSA value and used coordinate SSA values mentioned above. The operation region has an argument for the iterator, variadic arguments for specified (used) coordiates and followed by one argument for each loop-carried variable, representing the value of the variable at the current iteration. The body region must contain exactly one block that terminates with <code>sparse_tensor.yield</code>.</p><p>The results of an <code>sparse_tensor.iterate</code> hold the final values after the last iteration. If the <code>sparse_tensor.iterate</code> defines any values, a yield must be explicitly present. The number and types of the <code>sparse_tensor.iterate</code> results must match the initial values in the iter_args binding and the yield operands.</p><p>A nested <code>sparse_tensor.iterate</code> example that prints all the coordinates stored in the sparse input:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>func.func @nested_iterate(%sp : tensor&lt;4x8xf32, #COO&gt;) {</span></span>
<span class="line"><span>  // Iterates over the first level of %sp</span></span>
<span class="line"><span>  %l1 = sparse_tensor.extract_iteration_space %sp lvls = 0</span></span>
<span class="line"><span>      : tensor&lt;4x8xf32, #COO&gt; -&gt; !sparse_tensor.iter_space&lt;#COO, lvls = 0 to 1&gt;</span></span>
<span class="line"><span>  %r1 = sparse_tensor.iterate %it1 in %l1 at (%coord0)</span></span>
<span class="line"><span>      : !sparse_tensor.iter_space&lt;#COO, lvls = 0 to 1&gt;  {</span></span>
<span class="line"><span>    // Iterates over the second level of %sp</span></span>
<span class="line"><span>    %l2 = sparse_tensor.extract_iteration_space %sp at %it1 lvls = 1</span></span>
<span class="line"><span>        : tensor&lt;4x8xf32, #COO&gt;, !sparse_tensor.iterator&lt;#COO, lvls = 0 to 1&gt;</span></span>
<span class="line"><span>       -&gt; !sparse_tensor.iter_space&lt;#COO, lvls = 1 to 2&gt;</span></span>
<span class="line"><span>    %r2 = sparse_tensor.iterate %it2 in %l2 at (coord1)</span></span>
<span class="line"><span>        : !sparse_tensor.iter_space&lt;#COO, lvls = 1 to 2&gt;  {</span></span>
<span class="line"><span>       vector.print %coord0 : index</span></span>
<span class="line"><span>       vector.print %coord1 : index</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,7)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[62]||(e[62]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L114-L175",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",M,[s("summary",null,[e[64]||(e[64]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.load-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.load-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.load")],-1)),e[65]||(e[65]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[67]||(e[67]=o(`<p><code>load</code></p><p>Rematerializes a tensor from the underlying sparse storage format of the given tensor. This is similar to the <code>bufferization.to_tensor</code> operation in the sense that it provides a bridge between a bufferized world view and a tensor world view. Unlike the <code>bufferization.to_tensor</code> operation, however, this sparse operation is used only temporarily to maintain a correctly typed intermediate representation during progressive bufferization.</p><p>The <code>hasInserts</code> attribute denote whether insertions to the underlying sparse storage format may have occurred, in which case the underlying sparse storage format needs to be finalized. Otherwise, the operation simply folds away.</p><p>Note that this operation is &quot;impure&quot; in the sense that even though the result is modeled through an SSA value, the operation relies on a proper context of materializing and inserting the tensor value.</p><p>Examples:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%result = sparse_tensor.load %tensor : tensor&lt;8xf64, #SV&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%1 = sparse_tensor.load %0 hasInserts : tensor&lt;16x32xf32, #CSR&gt;</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[66]||(e[66]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L982-L1009",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",j,[s("summary",null,[e[68]||(e[68]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.lvl-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.lvl-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.lvl")],-1)),e[69]||(e[69]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[71]||(e[71]=o(`<p><code>lvl</code></p><p>The <code>sparse_tensor.lvl</code> behaves similar to <code>tensor.dim</code> operation. It takes a sparse tensor and a level operand of type <code>index</code> and returns the size of the requested level of the given sparse tensor. If the sparse tensor has an identity dimension to level mapping, it returns the same result as <code>tensor.dim</code>. If the level index is out of bounds, the behavior is undefined.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#BSR = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = ( i, j ) -&gt;</span></span>
<span class="line"><span>    ( i floordiv 2 : dense,</span></span>
<span class="line"><span>      j floordiv 3 : compressed,</span></span>
<span class="line"><span>      i mod 2      : dense,</span></span>
<span class="line"><span>      j mod 3      : dense</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Always returns 2 (4 floordiv 2), can be constant folded:</span></span>
<span class="line"><span>%c0 = arith.constant 0 : index</span></span>
<span class="line"><span>%x = sparse_tensor.lvl %A, %c0 : tensor&lt;4x?xf32, #BSR&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Return the dynamic dimension of %A computed by %j mod 3.</span></span>
<span class="line"><span>%c1 = arith.constant 1 : index</span></span>
<span class="line"><span>%y = sparse_tensor.lvl %A, %c1 : tensor&lt;4x?xf32, #BSR&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Always return 3 (since j mod 3 &lt; 3), can be constant fold</span></span>
<span class="line"><span>%c3 = arith.constant 3 : index</span></span>
<span class="line"><span>%y = sparse_tensor.lvl %A, %c3 : tensor&lt;4x?xf32, #BSR&gt;</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[70]||(e[70]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1036-L1070",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",C,[s("summary",null,[e[72]||(e[72]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.new-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.new-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.new")],-1)),e[73]||(e[73]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[75]||(e[75]=o('<p><code>new</code></p><p>Materializes a sparse tensor with contents taken from an opaque pointer provided by <code>source</code>. For targets that have access to a file system, for example, this pointer may be a filename (or file) of a sparse tensor in a particular external storage format. The form of the operation is kept deliberately very general to allow for alternative implementations in the future, such as pointers to buffers or runnable initialization code. The operation is provided as an anchor that materializes a properly typed sparse tensor with inital contents into a computation.</p><p>Reading in a symmetric matrix will result in just the lower/upper triangular part of the matrix (so that only relevant information is stored). Proper symmetry support for operating on symmetric matrices is still TBD.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sparse_tensor.new %source : !Source to tensor&lt;1024x1024xf64, #CSR&gt;</span></span></code></pre></div>',5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[74]||(e[74]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1093-L1114",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",D,[s("summary",null,[e[76]||(e[76]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.number_of_entries-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.number_of_entries-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.number_of_entries")],-1)),e[77]||(e[77]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[79]||(e[79]=o('<p><code>number_of_entries</code></p><p>Returns the number of entries that are stored in the given sparse tensor. Note that this is typically the number of nonzero elements in the tensor, but since explicit zeros may appear in the storage formats, the more accurate nomenclature is used.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%noe = sparse_tensor.number_of_entries %tensor : tensor&lt;64x64xf64, #CSR&gt;</span></span></code></pre></div>',4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[78]||(e[78]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1134-L1147",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",V,[s("summary",null,[e[80]||(e[80]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.out-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.out-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.out")],-1)),e[81]||(e[81]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[83]||(e[83]=o('<p><code>out</code></p><p>Outputs the contents of a sparse tensor to the destination defined by an opaque pointer provided by <code>dest</code>. For targets that have access to a file system, for example, this pointer may specify a filename (or file) for output. The form of the operation is kept deliberately very general to allow for alternative implementations in the future, such as sending the contents to a buffer defined by a pointer.</p><p>Note that this operation is &quot;impure&quot; in the sense that its behavior is solely defined by side-effects and not SSA values.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sparse_tensor.out %t, %dest : tensor&lt;1024x1024xf64, #CSR&gt;, !Dest</span></span></code></pre></div>',5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[82]||(e[82]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1170-L1188",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",w,[s("summary",null,[e[84]||(e[84]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.positions-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.positions-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.positions")],-1)),e[85]||(e[85]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[87]||(e[87]=o(`<p><code>positions</code></p><p>Returns the positions array of the tensor&#39;s storage at the given level. This is similar to the <code>bufferization.to_buffer</code> operation in the sense that it provides a bridge between a tensor world view and a bufferized world view. Unlike the <code>bufferization.to_buffer</code> operation, however, this sparse operation actually lowers into code that extracts the positions array from the sparse storage itself (either by calling a support library or through direct code).</p><p>Writing into the result of this operation is undefined behavior.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%1 = sparse_tensor.positions %0 { level = 1 : index }</span></span>
<span class="line"><span>   : tensor&lt;64x64xf64, #CSR&gt; to memref&lt;?xindex&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[86]||(e[86]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1786-L1805",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",A,[s("summary",null,[e[88]||(e[88]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.print-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.print-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.print")],-1)),e[89]||(e[89]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[91]||(e[91]=o('<p><code>print</code></p><p>Prints the individual components of a sparse tensors (the positions, coordinates, and values components) to stdout for testing and debugging purposes. This operation lowers to just a few primitives in a light-weight runtime support to simplify supporting this operation on new platforms.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sparse_tensor.print %tensor : tensor&lt;1024x1024xf64, #CSR&gt;</span></span></code></pre></div>',4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[90]||(e[90]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1208-L1221",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",E,[s("summary",null,[e[92]||(e[92]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.push_back",href:"#Reactant.MLIR.Dialects.sparse_tensor.push_back"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.push_back")],-1)),e[93]||(e[93]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[95]||(e[95]=o(`<p><code>push_back</code></p><p>Pushes <code>value</code> to the end of the given sparse tensor storage buffer <code>inBuffer</code> as indicated by the value of <code>curSize</code> and returns the new size of the buffer in <code>newSize</code> (<code>newSize = curSize + n</code>). The capacity of the buffer is recorded in the memref type of <code>inBuffer</code>. If the current buffer is full, then <code>inBuffer.realloc</code> is called before pushing the data to the buffer. This is similar to std::vector push_back.</p><p>The optional input <code>n</code> specifies the number of times to repeately push the value to the back of the tensor. When <code>n</code> is a compile-time constant, its value can&#39;t be less than 1. If <code>n</code> is a runtime value that is less than 1, the behavior is undefined. Although using input <code>n</code> is semantically equivalent to calling push_back n times, it gives compiler more chances to to optimize the memory reallocation and the filling of the memory with the same value.</p><p>The <code>inbounds</code> attribute tells the compiler that the insertion won&#39;t go beyond the current storage buffer. This allows the compiler to not generate the code for capacity check and reallocation. The typical usage will be for &quot;dynamic&quot; sparse tensors for which a capacity can be set beforehand.</p><p>Note that this operation is &quot;impure&quot; in the sense that even though the result is modeled through an SSA value, referencing the memref through the old SSA value after this operation is undefined behavior.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%buf, %newSize = sparse_tensor.push_back %curSize, %buffer, %val</span></span>
<span class="line"><span>   : index, memref&lt;?xf64&gt;, f64</span></span></code></pre></div><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%buf, %newSize = sparse_tensor.push_back inbounds %curSize, %buffer, %val</span></span>
<span class="line"><span>   : xindex, memref&lt;?xf64&gt;, f64</span></span></code></pre></div><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%buf, %newSize = sparse_tensor.push_back inbounds %curSize, %buffer, %val, %n</span></span>
<span class="line"><span>   : xindex, memref&lt;?xf64&gt;, f64</span></span></code></pre></div>`,9)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[94]||(e[94]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1241-L1284",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",O,[s("summary",null,[e[96]||(e[96]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.reduce-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.reduce-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.reduce")],-1)),e[97]||(e[97]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[99]||(e[99]=o(`<p><code>reduce</code></p><p>Defines a computation with a <code>linalg.generic</code> operation that takes two operands and an identity value and reduces all stored values down to a single result based on the computation in the region.</p><p>The region must contain exactly one block taking two arguments. The block must end with a sparse_tensor.yield and the output must match the input argument types.</p><p>Note that this operation is only required for custom reductions beyond the standard reduction operations (add, sub, or, xor) that can be sparsified by merely reducing the stored values. More elaborate reduction operations (mul, and, min, max, etc.) would need to account for implicit zeros as well. They can still be handled using this custom reduction operation. The <code>linalg.generic</code> <code>iterator_types</code> defines which indices are being reduced. When the associated operands are used in an operation, a reduction will occur. The use of this explicit <code>reduce</code> operation is not required in most cases.</p><p>Example of Matrix-&gt;Vector reduction using max(product(x_i), 100):</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%cf1 = arith.constant 1.0 : f64</span></span>
<span class="line"><span>%cf100 = arith.constant 100.0 : f64</span></span>
<span class="line"><span>%C = tensor.empty(...)</span></span>
<span class="line"><span>%0 = linalg.generic #trait</span></span>
<span class="line"><span>   ins(%A: tensor&lt;?x?xf64, #SparseMatrix&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?xf64, #SparseVector&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %c: f64) :</span></span>
<span class="line"><span>    %result = sparse_tensor.reduce %c, %a, %cf1 : f64 {</span></span>
<span class="line"><span>        ^bb0(%arg0: f64, %arg1: f64):</span></span>
<span class="line"><span>          %0 = arith.mulf %arg0, %arg1 : f64</span></span>
<span class="line"><span>          %cmp = arith.cmpf &quot;ogt&quot;, %0, %cf100 : f64</span></span>
<span class="line"><span>          %ret = arith.select %cmp, %cf100, %0 : f64</span></span>
<span class="line"><span>          sparse_tensor.yield %ret : f64</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    linalg.yield %result : f64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?xf64, #SparseVector&gt;</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[98]||(e[98]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1317-L1358",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",z,[s("summary",null,[e[100]||(e[100]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.reinterpret_map-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.reinterpret_map-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.reinterpret_map")],-1)),e[101]||(e[101]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[103]||(e[103]=o(`<p><code>reinterpret_map</code></p><p>Reinterprets the dimension-to-level and level-to-dimension map specified in <code>source</code> according to the type of <code>dest</code>. <code>reinterpret_map</code> is a no-op and is introduced merely to resolve type conflicts. It does not make any modification to the source tensor and source/dest tensors are considered to be aliases.</p><p><code>source</code> and <code>dest</code> tensors are &quot;reinterpretable&quot; if and only if they have the exactly same storage at a low level. That is, both <code>source</code> and <code>dest</code> has the same number of levels and level types, and their shape is consistent before and after <code>reinterpret_map</code>.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#CSC = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (d0, d1) -&gt; (d1: dense, d0: compressed)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span>#CSR = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (d0, d1) -&gt; (d0: dense, d1: compressed)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span>%t1 = sparse_tensor.reinterpret_map %t0 : tensor&lt;3x4xi32, #CSC&gt; to tensor&lt;4x3xi32, #CSR&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#BSR = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = ( i, j ) -&gt; ( i floordiv 2 : dense,</span></span>
<span class="line"><span>                      j floordiv 3 : compressed,</span></span>
<span class="line"><span>                      i mod 2      : dense,</span></span>
<span class="line"><span>                      j mod 3      : dense</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span>#DSDD = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (i, j, k, l) -&gt; (i: dense, j: compressed, k: dense, l: dense)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span>%t1 = sparse_tensor.reinterpret_map %t0 : tensor&lt;6x12xi32, #BSR&gt; to tensor&lt;3x4x2x3xi32, #DSDD&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[102]||(e[102]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1386-L1422",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",P,[s("summary",null,[e[104]||(e[104]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.reorder_coo-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.reorder_coo-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.reorder_coo")],-1)),e[105]||(e[105]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[107]||(e[107]=o(`<p><code>reorder_coo</code></p><p>Reorders the input COO to the same order as specified by the output format. E.g., reorder an unordered COO into an ordered one.</p><p>The input and result COO tensor must have the same element type, position type and coordinate type. At the moment, the operation also only supports ordering input and result COO with the same dim2lvl map.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%res = sparse_tensor.reorder_coo quick_sort %coo : tensor&lt;?x?xf64 : #Unordered_COO&gt; to</span></span>
<span class="line"><span>                                                   tensor&lt;?x?xf64 : #Ordered_COO&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[106]||(e[106]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1442-L1459",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",N,[s("summary",null,[e[108]||(e[108]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.select-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.select-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.select")],-1)),e[109]||(e[109]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[111]||(e[111]=o(`<p><code>select</code></p><p>Defines an evaluation within a <code>linalg.generic</code> operation that takes a single operand and decides whether or not to keep that operand in the output.</p><p>A single region must contain exactly one block taking one argument. The block must end with a sparse_tensor.yield and the output type must be boolean.</p><p>Value threshold is an obvious usage of the select operation. However, by using <code>linalg.index</code>, other useful selection can be achieved, such as selecting the upper triangle of a matrix.</p><p>Example of selecting A &gt;= 4.0:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%C = tensor.empty(...)</span></span>
<span class="line"><span>%0 = linalg.generic #trait</span></span>
<span class="line"><span>   ins(%A: tensor&lt;?xf64, #SparseVector&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?xf64, #SparseVector&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %c: f64) :</span></span>
<span class="line"><span>    %result = sparse_tensor.select %a : f64 {</span></span>
<span class="line"><span>        ^bb0(%arg0: f64):</span></span>
<span class="line"><span>          %cf4 = arith.constant 4.0 : f64</span></span>
<span class="line"><span>          %keep = arith.cmpf &quot;uge&quot;, %arg0, %cf4 : f64</span></span>
<span class="line"><span>          sparse_tensor.yield %keep : i1</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    linalg.yield %result : f64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?xf64, #SparseVector&gt;</span></span></code></pre></div><p>Example of selecting lower triangle of a matrix:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%C = tensor.empty(...)</span></span>
<span class="line"><span>%1 = linalg.generic #trait</span></span>
<span class="line"><span>   ins(%A: tensor&lt;?x?xf64, #CSR&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?x?xf64, #CSR&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %c: f64) :</span></span>
<span class="line"><span>    %row = linalg.index 0 : index</span></span>
<span class="line"><span>    %col = linalg.index 1 : index</span></span>
<span class="line"><span>    %result = sparse_tensor.select %a : f64 {</span></span>
<span class="line"><span>        ^bb0(%arg0: f64):</span></span>
<span class="line"><span>          %keep = arith.cmpf &quot;olt&quot;, %col, %row : f64</span></span>
<span class="line"><span>          sparse_tensor.yield %keep : i1</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    linalg.yield %result : f64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?x?xf64, #CSR&gt;</span></span></code></pre></div>`,8)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[110]||(e[110]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1479-L1528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",q,[s("summary",null,[e[112]||(e[112]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.slice_offset-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.slice_offset-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.slice_offset")],-1)),e[113]||(e[113]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[115]||(e[115]=o(`<p><code>slice_offset</code></p><p>Extracts the offset of the sparse tensor slice at the given dimension.</p><p>Currently, sparse tensor slices are still a work in progress, and only works when runtime library is disabled (i.e., running the sparsifier with <code>enable-runtime-library=false</code>).</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = tensor.extract_slice %s[%v1, %v2][64, 64][1, 1] : tensor&lt;128x128xf64, #DCSR&gt;</span></span>
<span class="line"><span>                                                    to tensor&lt;64x64xf64, #Slice&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%1 = sparse_tensor.slice.offset %0 at 0 : tensor&lt;64x64xf64, #Slice&gt;</span></span>
<span class="line"><span>%2 = sparse_tensor.slice.offset %0 at 1 : tensor&lt;64x64xf64, #Slice&gt;</span></span>
<span class="line"><span>// %1 = %v1</span></span>
<span class="line"><span>// %2 = %v2</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[114]||(e[114]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1828-L1848",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",B,[s("summary",null,[e[116]||(e[116]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.slice_stride-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.slice_stride-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.slice_stride")],-1)),e[117]||(e[117]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[119]||(e[119]=o(`<p><code>slice_stride</code></p><p>Extracts the stride of the sparse tensor slice at the given dimension.</p><p>Currently, sparse tensor slices are still a work in progress, and only works when runtime library is disabled (i.e., running the sparsifier with <code>enable-runtime-library=false</code>).</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = tensor.extract_slice %s[%v1, %v2][64, 64][%s1, %s2] : tensor&lt;128x128xf64, #DCSR&gt;</span></span>
<span class="line"><span>                                                        to tensor&lt;64x64xf64, #Slice&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%1 = sparse_tensor.slice.stride %0 at 0 : tensor&lt;64x64xf64, #Slice&gt;</span></span>
<span class="line"><span>%2 = sparse_tensor.slice.stride %0 at 1 : tensor&lt;64x64xf64, #Slice&gt;</span></span>
<span class="line"><span>// %1 = %s1</span></span>
<span class="line"><span>// %2 = %s2</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[118]||(e[118]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1871-L1892",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",F,[s("summary",null,[e[120]||(e[120]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.sort-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.sort-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.sort")],-1)),e[121]||(e[121]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[123]||(e[123]=o(`<p><code>sort</code></p><p>Sorts the <code>xs</code> values along with some <code>ys</code> values that are put in a single linear buffer <code>xy</code>. The affine map attribute <code>perm_map</code> specifies the permutation to be applied on the <code>xs</code> before comparison, the rank of the permutation map also specifies the number of <code>xs</code> values in <code>xy</code>. The optional index attribute <code>ny</code> provides the number of <code>ys</code> values in <code>xy</code>. When <code>ny</code> is not explicitly specified, its value is 0. This instruction supports a more efficient way to store the COO definition in sparse tensor type.</p><p>The buffer xy should have a dimension not less than n * (rank(perm_map) + ny) while the buffers in <code>ys</code> should have a dimension not less than <code>n</code>. The behavior of the operator is undefined if this condition is not met.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sparse_tensor.sort insertion_sort_stable %n, %x { perm_map = affine_map&lt;(i,j) -&gt; (j,i)&gt; }</span></span>
<span class="line"><span>  : memref&lt;?xindex&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[122]||(e[122]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1592-L1614",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",W,[s("summary",null,[e[124]||(e[124]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_get-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_get-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_get")],-1)),e[125]||(e[125]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[127]||(e[127]=o(`<p><code>storage_specifier_get</code></p><p>Returns the requested field of the given storage_specifier.</p><p>Example of querying the size of the coordinates array for level 0:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = sparse_tensor.storage_specifier.get %arg0 crd_mem_sz at 0</span></span>
<span class="line"><span>     : !sparse_tensor.storage_specifier&lt;#COO&gt;</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[126]||(e[126]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L906-L917",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",U,[s("summary",null,[e[128]||(e[128]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_init",href:"#Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_init"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_init")],-1)),e[129]||(e[129]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[131]||(e[131]=o(`<p><code>storage_specifier_init</code></p><p>Returns an initial storage specifier value. A storage specifier value holds the level-sizes, position arrays, coordinate arrays, and the value array. If this is a specifier for slices, it also holds the extra strides/offsets for each tensor dimension.</p><p>TODO: The sparse tensor slice support is currently in a unstable state, and is subject to change in the future.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#CSR = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (i, j) -&gt; (i : dense, j : compressed)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span>#CSR_SLICE = #sparse_tensor.encoding&lt;{</span></span>
<span class="line"><span>  map = (d0 : #sparse_tensor&lt;slice(1, 4, 1)&gt;,</span></span>
<span class="line"><span>         d1 : #sparse_tensor&lt;slice(1, 4, 2)&gt;) -&gt;</span></span>
<span class="line"><span>        (d0 : dense, d1 : compressed)</span></span>
<span class="line"><span>}&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%0 = sparse_tensor.storage_specifier.init :  !sparse_tensor.storage_specifier&lt;#CSR&gt;</span></span>
<span class="line"><span>%1 = sparse_tensor.storage_specifier.init with %src</span></span>
<span class="line"><span>     : !sparse_tensor.storage_specifier&lt;#CSR&gt; to</span></span>
<span class="line"><span>       !sparse_tensor.storage_specifier&lt;#CSR_SLICE&gt;</span></span></code></pre></div>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[130]||(e[130]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1645-L1674",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",$,[s("summary",null,[e[132]||(e[132]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_set-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_set-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.storage_specifier_set")],-1)),e[133]||(e[133]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[135]||(e[135]=o(`<p><code>storage_specifier_set</code></p><p>Set the field of the storage specifier to the given input value. Returns the updated storage_specifier as a new SSA value.</p><p>Example of updating the sizes of the coordinates array for level 0:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = sparse_tensor.storage_specifier.set %arg0 crd_mem_sz at 0 with %new_sz</span></span>
<span class="line"><span>   : !sparse_tensor.storage_specifier&lt;#COO&gt;</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[134]||(e[134]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1551-L1563",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",J,[s("summary",null,[e[136]||(e[136]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.unary-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.unary-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.unary")],-1)),e[137]||(e[137]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[139]||(e[139]=o(`<p><code>unary</code></p><p>Defines a computation with a <code>linalg.generic</code> operation that takes a single operand and executes one of two regions depending on whether the operand is nonzero (i.e. stored explicitly in the sparse storage format).</p><p>Two regions are defined for the operation must appear in this order:</p><ul><li><p>present (elements present in the sparse tensor)</p></li><li><p>absent (elements not present in the sparse tensor)</p></li></ul><p>Each region contains a single block describing the computation and result. A non-empty block must end with a sparse_tensor.yield and the return type must match the type of <code>output</code>. The primary region&#39;s block has one argument, while the missing region&#39;s block has zero arguments. The absent region may only generate constants or values already computed on entry of the <code>linalg.generic</code> operation.</p><p>A region may also be declared empty (i.e. <code>absent={}</code>), indicating that the region does not contribute to the output.</p><p>Due to the possibility of empty regions, i.e. lack of a value for certain cases, the result of this operation may only feed directly into the output of the <code>linalg.generic</code> operation or into into a custom reduction <code>sparse_tensor.reduce</code> operation that follows in the same region.</p><p>Example of A+1, restricted to existing elements:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%C = tensor.empty(...) : tensor&lt;?xf64, #SparseVector&gt;</span></span>
<span class="line"><span>%0 = linalg.generic #trait</span></span>
<span class="line"><span>   ins(%A: tensor&lt;?xf64, #SparseVector&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?xf64, #SparseVector&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %c: f64) :</span></span>
<span class="line"><span>    %result = sparse_tensor.unary %a : f64 to f64</span></span>
<span class="line"><span>      present={</span></span>
<span class="line"><span>      ^bb0(%arg0: f64):</span></span>
<span class="line"><span>        %cf1 = arith.constant 1.0 : f64</span></span>
<span class="line"><span>        %ret = arith.addf %arg0, %cf1 : f64</span></span>
<span class="line"><span>        sparse_tensor.yield %ret : f64</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      absent={}</span></span>
<span class="line"><span>    linalg.yield %result : f64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?xf64, #SparseVector&gt;</span></span></code></pre></div><p>Example returning +1 for existing values and -1 for missing values:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%p1 = arith.constant  1 : i32</span></span>
<span class="line"><span>%m1 = arith.constant -1 : i32</span></span>
<span class="line"><span>%C = tensor.empty(...) : tensor&lt;?xi32, #SparseVector&gt;</span></span>
<span class="line"><span>%1 = linalg.generic #trait</span></span>
<span class="line"><span>   ins(%A: tensor&lt;?xf64, #SparseVector&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?xi32, #SparseVector&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %c: i32) :</span></span>
<span class="line"><span>    %result = sparse_tensor.unary %a : f64 to i32</span></span>
<span class="line"><span>      present={</span></span>
<span class="line"><span>      ^bb0(%x: f64):</span></span>
<span class="line"><span>        sparse_tensor.yield %p1 : i32</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      absent={</span></span>
<span class="line"><span>        sparse_tensor.yield %m1 : i32</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    linalg.yield %result : i32</span></span>
<span class="line"><span>} -&gt; tensor&lt;?xi32, #SparseVector&gt;</span></span></code></pre></div><p>Example showing a structural inversion (existing values become missing in the output, while missing values are filled with 1):</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%c1 = arith.constant 1 : i64</span></span>
<span class="line"><span>%C = tensor.empty(...) : tensor&lt;?xi64, #SparseVector&gt;</span></span>
<span class="line"><span>%2 = linalg.generic #trait</span></span>
<span class="line"><span>   ins(%A: tensor&lt;?xf64, #SparseVector&gt;)</span></span>
<span class="line"><span>  outs(%C: tensor&lt;?xi64, #SparseVector&gt;) {</span></span>
<span class="line"><span>  ^bb0(%a: f64, %c: i64) :</span></span>
<span class="line"><span>    %result = sparse_tensor.unary %a : f64 to i64</span></span>
<span class="line"><span>      present={}</span></span>
<span class="line"><span>      absent={</span></span>
<span class="line"><span>        sparse_tensor.yield %c1 : i64</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    linalg.yield %result : i64</span></span>
<span class="line"><span>} -&gt; tensor&lt;?xi64, #SparseVector&gt;</span></span></code></pre></div>`,13)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[138]||(e[138]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1954-L2040",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",G,[s("summary",null,[e[140]||(e[140]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.values-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.sparse_tensor.values-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.values")],-1)),e[141]||(e[141]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[143]||(e[143]=o('<p><code>values</code></p><p>Returns the values array of the sparse storage format for the given sparse tensor, independent of the actual dimension. This is similar to the <code>bufferization.to_buffer</code> operation in the sense that it provides a bridge between a tensor world view and a bufferized world view. Unlike the <code>bufferization.to_buffer</code> operation, however, this sparse operation actually lowers into code that extracts the values array from the sparse storage scheme (either by calling a support library or through direct code).</p><p>Writing into the result of this operation is undefined behavior.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%1 = sparse_tensor.values %0 : tensor&lt;64x64xf64, #CSR&gt; to memref&lt;?xf64&gt;</span></span></code></pre></div>',5)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[142]||(e[142]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L1915-L1933",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",H,[s("summary",null,[e[144]||(e[144]=s("a",{id:"Reactant.MLIR.Dialects.sparse_tensor.yield-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.sparse_tensor.yield-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.sparse_tensor.yield")],-1)),e[145]||(e[145]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[147]||(e[147]=o(`<p><code>yield</code></p><p>Yields a value from within a <code>binary</code>, <code>unary</code>, <code>reduce</code>, <code>select</code> or <code>foreach</code> block.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = sparse_tensor.unary %a : i64 to i64 {</span></span>
<span class="line"><span>  present={</span></span>
<span class="line"><span>    ^bb0(%arg0: i64):</span></span>
<span class="line"><span>      %cst = arith.constant 1 : i64</span></span>
<span class="line"><span>      %ret = arith.addi %arg0, %cst : i64</span></span>
<span class="line"><span>      sparse_tensor.yield %ret : i64</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,4)),n(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[146]||(e[146]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/d3d1545c5b22b45d9a2d0fdc441bbbc9d67609c6/src/mlir/Dialects/SparseTensor.jl#L2066-L2084",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const ne=p(d,[["render",K]]);export{ae as __pageData,ne as default};
