import{_ as n,C as c,c as r,o as d,j as t,a,al as i,G as s,w as l}from"./chunks/framework.934EabHx.js";const A=JSON.parse('{"title":"Mosaic GPU Dialect","description":"","frontmatter":{},"headers":[],"relativePath":"api/dialects/mosaicgpu.md","filePath":"api/dialects/mosaicgpu.md","lastUpdated":null}'),u={name:"api/dialects/mosaicgpu.md"},p={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"};function L(w,e,D,v,k,x){const o=c("Badge");return d(),r("div",null,[e[65]||(e[65]=t("h1",{id:"Mosaic-GPU-Dialect",tabindex:"-1"},[a("Mosaic GPU Dialect "),t("a",{class:"header-anchor",href:"#Mosaic-GPU-Dialect","aria-label":'Permalink to "Mosaic GPU Dialect {#Mosaic-GPU-Dialect}"'},"â€‹")],-1)),t("details",p,[t("summary",null,[e[0]||(e[0]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.async_load",href:"#Reactant.MLIR.Dialects.mosaic_gpu.async_load"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.async_load")],-1)),e[1]||(e[1]=a()),s(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=i("",7)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[2]||(e[2]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L35-L67",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),t("details",m,[t("summary",null,[e[4]||(e[4]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.async_store",href:"#Reactant.MLIR.Dialects.mosaic_gpu.async_store"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.async_store")],-1)),e[5]||(e[5]=a()),s(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[7]||(e[7]=i("",5)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[6]||(e[6]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L126-L147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),t("details",h,[t("summary",null,[e[8]||(e[8]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.broadcast_in_dim-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.broadcast_in_dim-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.broadcast_in_dim")],-1)),e[9]||(e[9]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=t("p",null,[t("code",null,"broadcast_in_dim")],-1)),e[12]||(e[12]=t("p",null,[t("code",null,"broadcast_dimensions"),a(" must have the same size as the rank of the input vector and for each input dimension, specifies which output dimension it corresponds to.")],-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[10]||(e[10]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L201-L207",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),t("details",f,[t("summary",null,[e[13]||(e[13]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.custom_primitive-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.custom_primitive-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.custom_primitive")],-1)),e[14]||(e[14]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[16]||(e[16]=t("p",null,[t("code",null,"custom_primitive")],-1)),e[17]||(e[17]=t("p",null,"Allows defining a custom Mosaic GPU primitive.",-1)),e[18]||(e[18]=t("p",null,"Custom primitives should carry input and output layouts for each of their vector operands and outputs, and input transforms for each of their memref operands that live in SMEM.",-1)),e[19]||(e[19]=t("p",null,"Custom primitives can only return vectors.",-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[15]||(e[15]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L231-L241",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[15]})]),t("details",b,[t("summary",null,[e[20]||(e[20]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.initialize_barrier-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.initialize_barrier-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.initialize_barrier")],-1)),e[21]||(e[21]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[23]||(e[23]=t("p",null,[t("code",null,"initialize_barrier")],-1)),e[24]||(e[24]=t("p",null,[a("Initializes a memref of barriers each meant to synchronize exactly "),t("code",null,"arrival_count"),a(" threads.")],-1)),e[25]||(e[25]=t("p",null,[a("The base pointer of the result memref corresponds to "),t("code",null,"base_pointer"),a(", which must be a pointer to a shared memory location.")],-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[22]||(e[22]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L273-L281",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),t("details",M,[t("summary",null,[e[26]||(e[26]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.layout_cast-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.layout_cast-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.layout_cast")],-1)),e[27]||(e[27]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[29]||(e[29]=t("p",null,[t("code",null,"layout_cast"),a(" Casts a vector value to a new strided or tiled layout.")],-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[28]||(e[28]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L303-L306",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[28]})]),t("details",g,[t("summary",null,[e[30]||(e[30]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.return_-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.return_-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.return_")],-1)),e[31]||(e[31]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[33]||(e[33]=t("p",null,[t("code",null,"return_")],-1)),e[34]||(e[34]=t("p",null,[a("The "),t("code",null,"return"),a(" op is a terminator that indicates the end of execution within a "),t("code",null,"CustomPrimitiveOp"),a("'s region. It can optionally return some values, which become the results of the parent "),t("code",null,"CustomPrimitiveOp"),a(".")],-1)),e[35]||(e[35]=t("p",null,[a("The declared results of the parent "),t("code",null,"CustomPrimitiveOp"),a(" must match the operand types of this op.")],-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[32]||(e[32]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L353-L362",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[32]})]),t("details",R,[t("summary",null,[e[36]||(e[36]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.tcgen05_mma",href:"#Reactant.MLIR.Dialects.mosaic_gpu.tcgen05_mma"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.tcgen05_mma")],-1)),e[37]||(e[37]=a()),s(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[39]||(e[39]=i("",12)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[38]||(e[38]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L401-L434",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),t("details",_,[t("summary",null,[e[40]||(e[40]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.tmem_alloc-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.tmem_alloc-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.tmem_alloc")],-1)),e[41]||(e[41]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[43]||(e[43]=i("",6)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[42]||(e[42]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L481-L506",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),t("details",y,[t("summary",null,[e[44]||(e[44]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.tmem_relinquish_alloc_permit-Tuple{}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.tmem_relinquish_alloc_permit-Tuple{}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.tmem_relinquish_alloc_permit")],-1)),e[45]||(e[45]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[47]||(e[47]=t("p",null,[t("code",null,"tmem_relinquish_alloc_permit")],-1)),e[48]||(e[48]=t("p",null,[a("The instruction specifies that the CTA of the executing thread is relinquishing the right to allocate Tensor Memory. So, it is illegal for a CTA to perform "),t("code",null,"tmem_alloc"),a(" after any of its constituent threads execute "),t("code",null,"tmem_relinquish_alloc_permit"),a(".")],-1)),e[49]||(e[49]=t("p",null,[a("If "),t("code",null,"collective"),a(" is "),t("code",null,"true"),a(", applies to collective TMEM allocations.")],-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[46]||(e[46]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L555-L564",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),t("details",T,[t("summary",null,[e[50]||(e[50]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.wait-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.wait-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.wait")],-1)),e[51]||(e[51]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[53]||(e[53]=t("p",null,[t("code",null,"wait")],-1)),e[54]||(e[54]=t("p",null,"All threads in the warpgroup will block, waiting on the provided barrier until:",-1)),e[55]||(e[55]=t("ul",null,[t("li",null,[t("p",null,"all pending threads have arrived on the barrier")]),t("li",null,[t("p",null,"all expected byte transfers have been completed")]),t("li",null,[t("p",null,"the barrier's parity matches the provided parity")])],-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[52]||(e[52]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L645-L653",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[52]})]),t("details",I,[t("summary",null,[e[56]||(e[56]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.wgmma-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.wgmma-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.wgmma")],-1)),e[57]||(e[57]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[59]||(e[59]=i("",11)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[58]||(e[58]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L585-L618",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),t("details",j,[t("summary",null,[e[60]||(e[60]=t("a",{id:"Reactant.MLIR.Dialects.mosaic_gpu.with_transforms-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.mosaic_gpu.with_transforms-Tuple{Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.mosaic_gpu.with_transforms")],-1)),e[61]||(e[61]=a()),s(o,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[63]||(e[63]=t("p",null,[t("code",null,"with_transforms")],-1)),e[64]||(e[64]=t("p",null,"This op enforces the provided transforms on the parameter memref.",-1)),s(o,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[62]||(e[62]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/ae1305b8319e22605cf74769766756f7b3030a72/src/mlir/Dialects/MosaicGPU.jl#L673-L677",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})])])}const P=n(u,[["render",L]]);export{A as __pageData,P as default};
