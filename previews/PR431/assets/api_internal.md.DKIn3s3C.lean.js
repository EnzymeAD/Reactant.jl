import{_ as r,c as l,j as t,a,G as s,a2 as i,B as o,o as c}from"./chunks/framework.DjkImPyO.js";const j=JSON.parse('{"title":"Internal API","description":"","frontmatter":{},"headers":[],"relativePath":"api/internal.md","filePath":"api/internal.md","lastUpdated":null}'),d={name:"api/internal.md"},p={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"};function h(b,e,g,m,f,k){const n=o("Badge");return c(),l("div",null,[e[6]||(e[6]=t("h1",{id:"Internal-API",tabindex:"-1"},[a("Internal API "),t("a",{class:"header-anchor",href:"#Internal-API","aria-label":'Permalink to "Internal API {#Internal-API}"'},"â€‹")],-1)),e[7]||(e[7]=t("p",null,"These functions are not part of the public API and are subject to change at any time.",-1)),t("details",p,[t("summary",null,[e[0]||(e[0]=t("a",{id:"Reactant.REDUB_ARGUMENTS_NAME",href:"#Reactant.REDUB_ARGUMENTS_NAME"},[t("span",{class:"jlbinding"},"Reactant.REDUB_ARGUMENTS_NAME")],-1)),e[1]||(e[1]=a()),s(n,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[2]||(e[2]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reactant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REDUB_ARGUMENTS_NAME</span></span></code></pre></div><p>The variable name bound to <code>call_with_reactant</code>&#39;s tuple of arguments in its <code>@generated</code> method definition.</p><p>This binding can be used to manually reference/destructure <code>call_with_reactants</code> arguments</p><p>This is required because user arguments could have a name which clashes with whatever name we choose for our argument. Thus we gensym to create it.</p><p>This originates from <a href="https://github.com/JuliaLabs/Cassette.jl/blob/c29b237c1ec0deda3a1037ec519eebe216952bfe/src/overdub.jl#L154" target="_blank" rel="noreferrer">https://github.com/JuliaLabs/Cassette.jl/blob/c29b237c1ec0deda3a1037ec519eebe216952bfe/src/overdub.jl#L154</a></p><p><a href="https://github.com/EnzymeAD/Reactant.jl/blob/349c8634d6ca2d68351adc77b7459ae312b98539/src/utils.jl#L17-L29" target="_blank" rel="noreferrer">source</a></p>',6))]),t("details",u,[t("summary",null,[e[3]||(e[3]=t("a",{id:"Reactant.within_reactant_interpreter",href:"#Reactant.within_reactant_interpreter"},[t("span",{class:"jlbinding"},"Reactant.within_reactant_interpreter")],-1)),e[4]||(e[4]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[5]||(e[5]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within_reactant_interpreter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns <code>true</code> if we are currently inside the ReactantInterpreter.</p><p><a href="https://github.com/EnzymeAD/Reactant.jl/blob/349c8634d6ca2d68351adc77b7459ae312b98539/src/Overlay.jl#L7-L11" target="_blank" rel="noreferrer">source</a></p>',3))])])}const _=r(d,[["render",h]]);export{j as __pageData,_ as default};
