import{_ as o,C as i,c as r,o as c,j as t,a as l,G as n,w as s,al as p}from"./chunks/framework.wiNZQdbw.js";const x=JSON.parse('{"title":"EnzymeXLA Dialect","description":"","frontmatter":{},"headers":[],"relativePath":"api/dialects/enzymexla.md","filePath":"api/dialects/enzymexla.md","lastUpdated":null}'),d={name:"api/dialects/enzymexla.md"},m={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"};function R(y,e,f,g,h,I){const a=i("Badge");return c(),r("div",null,[e[9]||(e[9]=t("h1",{id:"EnzymeXLA-Dialect",tabindex:"-1"},[l("EnzymeXLA Dialect "),t("a",{class:"header-anchor",href:"#EnzymeXLA-Dialect","aria-label":'Permalink to "EnzymeXLA Dialect {#EnzymeXLA-Dialect}"'},"â€‹")],-1)),t("details",m,[t("summary",null,[e[0]||(e[0]=t("a",{id:"Reactant.MLIR.Dialects.enzymexla.gpu_wrapper-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.enzymexla.gpu_wrapper-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.enzymexla.gpu_wrapper")],-1)),e[1]||(e[1]=l()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[3]||(e[3]=t("p",null,[t("code",null,"gpu_wrapper")],-1)),e[4]||(e[4]=t("p",null,"The optional arguments to this operation are suggestions about what block dimensions this gpu kernel should have - usually taken from kernel launch params",-1)),n(a,{type:"info",class:"source-link",text:"source"},{default:s(()=>e[2]||(e[2]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/0d32f64acdb62d2dd2bf4e575ac109ee27af761e/src/mlir/Dialects/EnzymeXLA.jl#L194-L200",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),t("details",u,[t("summary",null,[e[5]||(e[5]=t("a",{id:"Reactant.MLIR.Dialects.enzymexla.memcpy-Tuple{Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.enzymexla.memcpy-Tuple{Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[t("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.enzymexla.memcpy")],-1)),e[6]||(e[6]=l()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[8]||(e[8]=p('<p><code>memcpy</code></p><p>The <code>gpu.memcpy</code> operation copies the content of one memref to another.</p><p>The op does not execute before all async dependencies have finished executing.</p><p>If the <code>async</code> keyword is present, the op is executed asynchronously (i.e. it does not block until the execution has finished on the device). In that case, it returns a !gpu.async.token.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%token = gpu.memcpy async [%dep] %dst, %src : memref&lt;?xf32, 1&gt;, memref&lt;?xf32&gt;</span></span></code></pre></div>',6)),n(a,{type:"info",class:"source-link",text:"source"},{default:s(()=>e[7]||(e[7]=[t("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/0d32f64acdb62d2dd2bf4e575ac109ee27af761e/src/mlir/Dialects/EnzymeXLA.jl#L377-L394",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[7]})])])}const L=o(d,[["render",R]]);export{x as __pageData,L as default};
