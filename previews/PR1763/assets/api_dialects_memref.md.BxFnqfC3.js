import{_ as o,C as p,c as r,o as c,j as s,a as n,al as l,G as t,w as i}from"./chunks/framework.CSMik11j.js";const Q=JSON.parse('{"title":"MemRef Dialect","description":"","frontmatter":{},"headers":[],"relativePath":"api/dialects/memref.md","filePath":"api/dialects/memref.md","lastUpdated":null}'),d={name:"api/dialects/memref.md"},m={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"};function B(U,e,G,$,H,J){const a=p("Badge");return c(),r("div",null,[e[130]||(e[130]=s("h1",{id:"MemRef-Dialect",tabindex:"-1"},[n("MemRef Dialect "),s("a",{class:"header-anchor",href:"#MemRef-Dialect","aria-label":'Permalink to "MemRef Dialect {#MemRef-Dialect}"'},"â€‹")],-1)),e[131]||(e[131]=s("p",null,[n("Refer to the "),s("a",{href:"https://mlir.llvm.org/docs/Dialects/MemRef/",target:"_blank",rel:"noreferrer"},"official documentation"),n(" for more details.")],-1)),s("details",m,[s("summary",null,[e[0]||(e[0]=s("a",{id:"Reactant.MLIR.Dialects.memref.alloc-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.alloc-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.alloc")],-1)),e[1]||(e[1]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[3]||(e[3]=l(`<p><code>alloc</code></p><p>The <code>alloc</code> operation allocates a region of memory, as specified by its memref type.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloc() : memref&lt;8x64xf32, 1&gt;</span></span></code></pre></div><p>The optional list of dimension operands are bound to the dynamic dimensions specified in its memref type. In the example below, the ssa value &#39;%d&#39; is bound to the second dimension of the memref (which is dynamic).</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloc(%d) : memref&lt;8x?xf32, 1&gt;</span></span></code></pre></div><p>The optional list of symbol operands are bound to the symbols of the memrefs affine map. In the example below, the ssa value &#39;%s&#39; is bound to the symbol &#39;s0&#39; in the affine map specified in the allocs memref type.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloc()[%s] : memref&lt;8x64xf32,</span></span>
<span class="line"><span>                          affine_map&lt;(d0, d1)[s0] -&gt; ((d0 + s0), d1)&gt;, 1&gt;</span></span></code></pre></div><p>This operation returns a single ssa value of memref type, which can be used by subsequent load and store operations.</p><p>The optional <code>alignment</code> attribute may be specified to ensure that the region of memory that will be indexed is aligned at the specified byte boundary.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloc()[%s] {alignment = 8} :</span></span>
<span class="line"><span>  memref&lt;8x64xf32, affine_map&lt;(d0, d1)[s0] -&gt; ((d0 + s0), d1)&gt;, 1&gt;</span></span></code></pre></div>`,11)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[2]||(e[2]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L263-L303",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",f,[s("summary",null,[e[4]||(e[4]=s("a",{id:"Reactant.MLIR.Dialects.memref.alloca-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.alloca-Tuple{Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.alloca")],-1)),e[5]||(e[5]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[7]||(e[7]=l(`<p><code>alloca</code></p><p>The <code>alloca</code> operation allocates memory on the stack, to be automatically released when control transfers back from the region of its closest surrounding operation with an <a href="./../Traits/#automaticallocationscope"><code>AutomaticAllocationScope</code></a> trait. The amount of memory allocated is specified by its memref and additional operands. For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloca() : memref&lt;8x64xf32&gt;</span></span></code></pre></div><p>The optional list of dimension operands are bound to the dynamic dimensions specified in its memref type. In the example below, the SSA value &#39;%d&#39; is bound to the second dimension of the memref (which is dynamic).</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloca(%d) : memref&lt;8x?xf32&gt;</span></span></code></pre></div><p>The optional list of symbol operands are bound to the symbols of the memref&#39;s affine map. In the example below, the SSA value &#39;%s&#39; is bound to the symbol &#39;s0&#39; in the affine map specified in the allocs memref type.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloca()[%s] : memref&lt;8x64xf32,</span></span>
<span class="line"><span>                           affine_map&lt;(d0, d1)[s0] -&gt; ((d0 + s0), d1)&gt;&gt;</span></span></code></pre></div><p>This operation returns a single SSA value of memref type, which can be used by subsequent load and store operations. An optional alignment attribute, if specified, guarantees alignment at least to that boundary. If not specified, an alignment on any convenient boundary compatible with the type will be chosen.</p>`,8)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[6]||(e[6]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L331-L367",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",u,[s("summary",null,[e[8]||(e[8]=s("a",{id:"Reactant.MLIR.Dialects.memref.alloca_scope-Tuple{}",href:"#Reactant.MLIR.Dialects.memref.alloca_scope-Tuple{}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.alloca_scope")],-1)),e[9]||(e[9]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=l(`<p><code>alloca_scope</code></p><p>The <code>memref.alloca_scope</code> operation represents an explicitly-delimited scope for the alloca allocations. Any <code>memref.alloca</code> operations that are used within this scope are going to be cleaned up automatically once the control-flow exits the nested region. For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>memref.alloca_scope {</span></span>
<span class="line"><span>  %myalloca = memref.alloca(): memref&lt;4x3xf32&gt;</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Here, <code>%myalloca</code> memref is valid within the explicitly delimited scope and is automatically deallocated at the end of the given region. Conceptually, <code>memref.alloca_scope</code> is a passthrough operation with <code>AutomaticAllocationScope</code> that spans the body of the region within the operation.</p><p><code>memref.alloca_scope</code> may also return results that are defined in the nested region. To return a value, one should use <code>memref.alloca_scope.return</code> operation:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%result = memref.alloca_scope {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  memref.alloca_scope.return %value</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>If <code>memref.alloca_scope</code> returns no value, the <code>memref.alloca_scope.return</code> can be left out, and will be inserted implicitly.</p>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[10]||(e[10]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L395-L428",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",h,[s("summary",null,[e[12]||(e[12]=s("a",{id:"Reactant.MLIR.Dialects.memref.alloca_scope_return-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.alloca_scope_return-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.alloca_scope_return")],-1)),e[13]||(e[13]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[15]||(e[15]=l('<p><code>alloca_scope_return</code></p><p><code>memref.alloca_scope.return</code> operation returns zero or more SSA values from the region within <code>memref.alloca_scope</code>. If no values are returned, the return operation may be omitted. Otherwise, it has to be present to indicate which values are going to be returned. For example:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>memref.alloca_scope.return %value</span></span></code></pre></div>',3)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[14]||(e[14]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L448-L459",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[e[16]||(e[16]=s("a",{id:"Reactant.MLIR.Dialects.memref.assume_alignment-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.assume_alignment-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.assume_alignment")],-1)),e[17]||(e[17]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[19]||(e[19]=s("p",null,[s("code",null,"assume_alignment")],-1)),e[20]||(e[20]=s("p",null,[n("The "),s("code",null,"assume_alignment"),n(" operation takes a memref and an integer alignment value. It returns a new SSA value of the same memref type, but associated with the assumption that the underlying buffer is aligned to the given alignment.")],-1)),e[21]||(e[21]=s("p",null,"If the buffer isn't aligned to the given alignment, its result is poison. This operation doesn't affect the semantics of a program where the alignment assumption holds true. It is intended for optimization purposes, allowing the compiler to generate more efficient code based on the alignment assumption. The optimization is best-effort.",-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[18]||(e[18]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L16-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",b,[s("summary",null,[e[22]||(e[22]=s("a",{id:"Reactant.MLIR.Dialects.memref.atomic_rmw-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.atomic_rmw-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.atomic_rmw")],-1)),e[23]||(e[23]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[25]||(e[25]=l('<p><code>atomic_rmw</code></p><p>The <code>memref.atomic_rmw</code> operation provides a way to perform a read-modify-write sequence that is free from data races. The kind enumeration specifies the modification to perform. The value operand represents the new value to be applied during the modification. The memref operand represents the buffer that the read and write will be performed against, as accessed by the specified indices. The arity of the indices is the rank of the memref. The result represents the latest value that was stored.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%x = memref.atomic_rmw &quot;addf&quot; %value, %I[%i] : (f32, memref&lt;10xf32&gt;) -&gt; f32</span></span></code></pre></div>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[24]||(e[24]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L52-L68",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[e[26]||(e[26]=s("a",{id:"Reactant.MLIR.Dialects.memref.atomic_yield-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.atomic_yield-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.atomic_yield")],-1)),e[27]||(e[27]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[29]||(e[29]=s("p",null,[s("code",null,"atomic_yield")],-1)),e[30]||(e[30]=s("p",null,'"memref.atomic_yield" yields an SSA value from a GenericAtomicRMWOp region.',-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[28]||(e[28]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L96-L101",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",R,[s("summary",null,[e[31]||(e[31]=s("a",{id:"Reactant.MLIR.Dialects.memref.cast-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.cast-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.cast")],-1)),e[32]||(e[32]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[34]||(e[34]=l(`<p><code>cast</code></p><p>The <code>memref.cast</code> operation converts a memref from one type to an equivalent type with a compatible shape. The source and destination types are compatible if:</p><p>a. Both are ranked memref types with the same element type, address space, and rank and:</p><ol><li><p>Both have the same layout or both have compatible strided layouts.</p></li><li><p>The individual sizes (resp. offset and strides in the case of strided memrefs) may convert constant dimensions to dynamic dimensions and vice-versa.</p></li></ol><p>If the cast converts any dimensions from an unknown to a known size, then it acts as an assertion that fails at runtime if the dynamic dimensions disagree with resultant destination size.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Assert that the input dynamic shape matches the destination static shape.</span></span>
<span class="line"><span>%2 = memref.cast %1 : memref&lt;?x?xf32&gt; to memref&lt;4x4xf32&gt;</span></span>
<span class="line"><span>// Erase static shape information, replacing it with dynamic information.</span></span>
<span class="line"><span>%3 = memref.cast %1 : memref&lt;4xf32&gt; to memref&lt;?xf32&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// The same holds true for offsets and strides.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Assert that the input dynamic shape matches the destination static stride.</span></span>
<span class="line"><span>%4 = memref.cast %1 : memref&lt;12x4xf32, strided&lt;[?, ?], offset: ?&gt;&gt; to</span></span>
<span class="line"><span>                      memref&lt;12x4xf32, strided&lt;[4, 1], offset: 5&gt;&gt;</span></span>
<span class="line"><span>// Erase static offset and stride information, replacing it with</span></span>
<span class="line"><span>// dynamic information.</span></span>
<span class="line"><span>%5 = memref.cast %1 : memref&lt;12x4xf32, strided&lt;[4, 1], offset: 5&gt;&gt; to</span></span>
<span class="line"><span>                      memref&lt;12x4xf32, strided&lt;[?, ?], offset: ?&gt;&gt;</span></span></code></pre></div><p>b. Either or both memref types are unranked with the same element type, and address space.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cast to concrete shape.</span></span>
<span class="line"><span>    %4 = memref.cast %1 : memref&lt;*xf32&gt; to memref&lt;4x?xf32&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Erase rank information.</span></span>
<span class="line"><span>    %5 = memref.cast %1 : memref&lt;4x?xf32&gt; to memref&lt;*xf32&gt;</span></span></code></pre></div>`,10)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[33]||(e[33]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L479-L528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",v,[s("summary",null,[e[35]||(e[35]=s("a",{id:"Reactant.MLIR.Dialects.memref.collapse_shape-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.collapse_shape-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.collapse_shape")],-1)),e[36]||(e[36]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[38]||(e[38]=l(`<p><code>collapse_shape</code></p><p>The <code>memref.collapse_shape</code> op produces a new view with a smaller rank whose sizes are a reassociation of the original <code>view</code>. The operation is limited to such reassociations, where subsequent, contiguous dimensions are collapsed into a single dimension. Such reassociations never require additional allocs or copies.</p><p>Collapsing non-contiguous dimensions is undefined behavior. When a group of dimensions can be statically proven to be non-contiguous, collapses of such groups are rejected in the verifier on a best-effort basis. In the general case, collapses of dynamically-sized dims with dynamic strides cannot be proven to be contiguous or non-contiguous due to limitations in the memref type.</p><p>A reassociation is defined as a continuous grouping of dimensions and is represented with an array of DenseI64ArrayAttr attribute.</p><p>Note: Only the dimensions within a reassociation group must be contiguous. The remaining dimensions may be non-contiguous.</p><p>The result memref type can be zero-ranked if the source memref type is statically shaped with all dimensions being unit extent. In such a case, the reassociation indices must be empty.</p><p>Examples:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Dimension collapse (i, j) -&gt; i&#39; and k -&gt; k&#39;</span></span>
<span class="line"><span>%1 = memref.collapse_shape %0 [[0, 1], [2]] :</span></span>
<span class="line"><span>    memref&lt;?x?x?xf32, stride_spec&gt; into memref&lt;?x?xf32, stride_spec_2&gt;</span></span></code></pre></div><p>For simplicity, this op may not be used to cast dynamicity of dimension sizes and/or strides. I.e., a result dimension must be dynamic if and only if at least one dimension in the corresponding reassociation group is dynamic. Similarly, the stride of a result dimension must be dynamic if and only if the corresponding start dimension in the source type is dynamic.</p><p>Note: This op currently assumes that the inner strides are of the source/result layout map are the faster-varying ones.</p>`,10)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[37]||(e[37]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L548-L590",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",x,[s("summary",null,[e[39]||(e[39]=s("a",{id:"Reactant.MLIR.Dialects.memref.copy-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.copy-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.copy")],-1)),e[40]||(e[40]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[42]||(e[42]=l('<p><code>copy</code></p><p>Copies the data from the source to the destination memref.</p><p>Usage:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>memref.copy %arg0, %arg1 : memref&lt;?xf32&gt; to memref&lt;?xf32&gt;</span></span></code></pre></div><p>Source and destination are expected to have the same element type and shape. Otherwise, the result is undefined. They may have different layouts.</p>',5)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[41]||(e[41]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L121-L134",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[e[43]||(e[43]=s("a",{id:"Reactant.MLIR.Dialects.memref.dealloc-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.dealloc-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.dealloc")],-1)),e[44]||(e[44]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[46]||(e[46]=l(`<p><code>dealloc</code></p><p>The <code>dealloc</code> operation frees the region of memory referenced by a memref which was originally created by the <code>alloc</code> operation. The <code>dealloc</code> operation should not be called on memrefs which alias an alloc&#39;d memref (e.g. memrefs returned by <code>view</code> operations).</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.alloc() : memref&lt;8x64xf32, affine_map&lt;(d0, d1) -&gt; (d0, d1), 1&gt;&gt;</span></span>
<span class="line"><span>memref.dealloc %0 : memref&lt;8x64xf32,  affine_map&lt;(d0, d1) -&gt; (d0, d1), 1&gt;&gt;</span></span></code></pre></div>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[45]||(e[45]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L610-L624",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",I,[s("summary",null,[e[47]||(e[47]=s("a",{id:"Reactant.MLIR.Dialects.memref.dim-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.dim-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.dim")],-1)),e[48]||(e[48]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[50]||(e[50]=l(`<p><code>dim</code></p><p>The <code>dim</code> operation takes a memref and a dimension operand of type <code>index</code>. It returns the size of the requested dimension of the given memref. If the dimension index is out of bounds the behavior is undefined.</p><p>The specified memref type is that of the first operand.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Always returns 4, can be constant folded:</span></span>
<span class="line"><span>%c0 = arith.constant 0 : index</span></span>
<span class="line"><span>%x = memref.dim %A, %c0 : memref&lt;4 x ? x f32&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Returns the dynamic dimension of %A.</span></span>
<span class="line"><span>%c1 = arith.constant 1 : index</span></span>
<span class="line"><span>%y = memref.dim %A, %c1 : memref&lt;4 x ? x f32&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Equivalent generic form:</span></span>
<span class="line"><span>%x = &quot;memref.dim&quot;(%A, %c0) : (memref&lt;4 x ? x f32&gt;, index) -&gt; index</span></span>
<span class="line"><span>%y = &quot;memref.dim&quot;(%A, %c1) : (memref&lt;4 x ? x f32&gt;, index) -&gt; index</span></span></code></pre></div>`,5)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[49]||(e[49]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L644-L668",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",T,[s("summary",null,[e[51]||(e[51]=s("a",{id:"Reactant.MLIR.Dialects.memref.dma_start-Tuple{Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.dma_start-Tuple{Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.dma_start")],-1)),e[52]||(e[52]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[54]||(e[54]=l('<p><code>dma_start</code></p><p><strong>Syntax</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>operation ::= `memref.dma_start` ssa-use`[`ssa-use-list`]` `,`</span></span>\n<span class="line"><span>               ssa-use`[`ssa-use-list`]` `,` ssa-use `,`</span></span>\n<span class="line"><span>               ssa-use`[`ssa-use-list`]` (`,` ssa-use `,` ssa-use)?</span></span>\n<span class="line"><span>              `:` memref-type `,` memref-type `,` memref-type</span></span></code></pre></div><p>DmaStartOp starts a non-blocking DMA operation that transfers data from a source memref to a destination memref. The source and destination memref need not be of the same dimensionality, but need to have the same elemental type. The operands include the source and destination memref&#39;s each followed by its indices, size of the data transfer in terms of the number of elements (of the elemental type of the memref), a tag memref with its indices, and optionally at the end, a stride and a number_of_elements_per_stride arguments. The tag location is used by a DmaWaitOp to check for completion. The indices of the source memref, destination memref, and the tag memref have the same restrictions as any load/store. The optional stride arguments should be of &#39;index&#39; type, and specify a stride for the slower memory space (memory space with a lower memory space id), transferring chunks of number_of_elements_per_stride every stride until %num_elements are transferred. Either both or no stride arguments should be specified. If the source and destination locations overlap the behavior of this operation is not defined.</p><p>For example, a DmaStartOp operation that transfers 256 elements of a memref &#39;%src&#39; in memory space 0 at indices [%i, %j] to memref &#39;%dst&#39; in memory space 1 at indices [%k, %l], would be specified as follows:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%num_elements = arith.constant 256</span></span>\n<span class="line"><span>%idx = arith.constant 0 : index</span></span>\n<span class="line"><span>%tag = memref.alloc() : memref&lt;1 x i32, affine_map&lt;(d0) -&gt; (d0)&gt;, 4&gt;</span></span>\n<span class="line"><span>dma_start %src[%i, %j], %dst[%k, %l], %num_elements, %tag[%idx] :</span></span>\n<span class="line"><span>  memref&lt;40 x 128 x f32&gt;, affine_map&lt;(d0) -&gt; (d0)&gt;, 0&gt;,</span></span>\n<span class="line"><span>  memref&lt;2 x 1024 x f32&gt;, affine_map&lt;(d0) -&gt; (d0)&gt;, 1&gt;,</span></span>\n<span class="line"><span>  memref&lt;1 x i32&gt;, affine_map&lt;(d0) -&gt; (d0)&gt;, 2&gt;</span></span></code></pre></div><p>If %stride and %num_elt_per_stride are specified, the DMA is expected to transfer %num_elt_per_stride elements every %stride elements apart from memory space 0 until %num_elements are transferred.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dma_start %src[%i, %j], %dst[%k, %l], %num_elements, %tag[%idx], %stride,</span></span>\n<span class="line"><span>          %num_elt_per_stride :</span></span></code></pre></div><ul><li>TODO: add additional operands to allow source and destination striding, and</li></ul><p>multiple stride levels.</p><ul><li>TODO: Consider replacing src/dst memref indices with view memrefs.</li></ul>',11)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[53]||(e[53]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L691-L746",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",k,[s("summary",null,[e[55]||(e[55]=s("a",{id:"Reactant.MLIR.Dialects.memref.dma_wait-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.dma_wait-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.dma_wait")],-1)),e[56]||(e[56]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[58]||(e[58]=s("p",null,[s("code",null,"dma_wait")],-1)),e[59]||(e[59]=s("p",null,"DmaWaitOp blocks until the completion of a DMA operation associated with the tag element '%tag[%index]'. %tag is a memref, and %index has to be an index with the same restrictions as any load/store index. %num_elements is the number of elements associated with the DMA operation.",-1)),e[60]||(e[60]=s("p",null,[s("strong",null,"Example")],-1)),e[61]||(e[61]=s("p",null,[s("code",null,"mlir dma_start %src[%i, %j], %dst[%k, %l], %num_elements, %tag[%index] : memref<2048 x f32>, affine_map<(d0) -> (d0)>, 0>, memref<256 x f32>, affine_map<(d0) -> (d0)>, 1> memref<1 x i32>, affine_map<(d0) -> (d0)>, 2> ... ... dma_wait %tag[%index], %num_elements : memref<1 x i32, affine_map<(d0) -> (d0)>, 2>")],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[57]||(e[57]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L766-L785",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",M,[s("summary",null,[e[62]||(e[62]=s("a",{id:"Reactant.MLIR.Dialects.memref.expand_shape-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.expand_shape-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.expand_shape")],-1)),e[63]||(e[63]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[65]||(e[65]=l(`<p><code>expand_shape</code></p><p>The <code>memref.expand_shape</code> op produces a new view with a higher rank whose sizes are a reassociation of the original <code>view</code>. The operation is limited to such reassociations, where a dimension is expanded into one or multiple contiguous dimensions. Such reassociations never require additional allocs or copies.</p><p>A reassociation is defined as a grouping of dimensions and is represented with an array of DenseI64ArrayAttr attributes.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%r = memref.expand_shape %0 [[0, 1], [2]] output_shape [%sz0, %sz1, 32]</span></span>
<span class="line"><span>    : memref&lt;?x32xf32&gt; into memref&lt;?x?x32xf32&gt;</span></span></code></pre></div><p>If an op can be statically proven to be invalid (e.g, an expansion from <code>memref&lt;10xf32&gt;</code> to <code>memref&lt;2x6xf32&gt;</code>), it is rejected by the verifier. If it cannot statically be proven invalid (e.g., the full example above; it is unclear whether the first source dimension is divisible by 5), the op is accepted by the verifier. However, if the op is in fact invalid at runtime, the behavior is undefined.</p><p>The source memref can be zero-ranked. In that case, the reassociation indices must be empty and the result shape may only consist of unit dimensions.</p><p>For simplicity, this op may not be used to cast dynamicity of dimension sizes and/or strides. I.e., if and only if a source dimension is dynamic, there must be a dynamic result dimension in the corresponding reassociation group. Same for strides.</p><p>The representation for the output shape supports a partially-static specification via attributes specified through the <code>static_output_shape</code> argument. A special sentinel value <code>ShapedType::kDynamic</code> encodes that the corresponding entry has a dynamic value. There must be exactly as many SSA inputs in <code>output_shape</code> as there are <code>ShapedType::kDynamic</code> entries in <code>static_output_shape</code>.</p><p>Note: This op currently assumes that the inner strides are of the source/result layout map are the faster-varying ones.</p>`,10)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[64]||(e[64]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L807-L851",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",L,[s("summary",null,[e[66]||(e[66]=s("a",{id:"Reactant.MLIR.Dialects.memref.extract_aligned_pointer_as_index-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.extract_aligned_pointer_as_index-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.extract_aligned_pointer_as_index")],-1)),e[67]||(e[67]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[69]||(e[69]=l(`<p><code>extract_aligned_pointer_as_index</code></p><p>Extracts the underlying aligned pointer as an index.</p><p>This operation is useful for lowering to lower-level dialects while still avoiding the need to define a pointer type in higher-level dialects such as the memref dialect.</p><p>This operation is intended solely as step during lowering, it has no side effects. A reverse operation that creates a memref from an index interpreted as a pointer is explicitly discouraged.</p><p><strong>Example</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  %0 = memref.extract_aligned_pointer_as_index %arg : memref&lt;4x4xf32&gt; -&gt; index</span></span>
<span class="line"><span>  %1 = arith.index_cast %0 : index to i64</span></span>
<span class="line"><span>  %2 = llvm.inttoptr %1 : i64 to !llvm.ptr</span></span>
<span class="line"><span>  call @foo(%2) : (!llvm.ptr) -&gt;()</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[68]||(e[68]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L881-L902",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",w,[s("summary",null,[e[70]||(e[70]=s("a",{id:"Reactant.MLIR.Dialects.memref.extract_strided_metadata-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.extract_strided_metadata-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.extract_strided_metadata")],-1)),e[71]||(e[71]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[73]||(e[73]=l(`<p><code>extract_strided_metadata</code></p><p>Extracts a base buffer, offset and strides. This op allows additional layers of transformations and foldings to be added as lowering progresses from higher-level dialect to lower-level dialects such as the LLVM dialect.</p><p>The op requires a strided memref source operand. If the source operand is not a strided memref, then verification fails.</p><p>This operation is also useful for completeness to the existing memref.dim op. While accessing strides, offsets and the base pointer independently is not available, this is useful for composing with its natural complement op: <code>memref.reinterpret_cast</code>.</p><p>Intended Use Cases:</p><p>The main use case is to expose the logic for manipulate memref metadata at a higher level than the LLVM dialect. This makes lowering more progressive and brings the following benefits:</p><ul><li><p>not all users of MLIR want to lower to LLVM and the information to e.g. lower to library callsâ€“-like libxsmmâ€“-or to SPIR-V was not available.</p></li><li><p>foldings and canonicalizations can happen at a higher level in MLIR: before this op existed, lowering to LLVM would create large amounts of LLVMIR. Even when LLVM does a good job at folding the low-level IR from a performance perspective, it is unnecessarily opaque and inefficient to send unkempt IR to LLVM.</p></li></ul><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  %base, %offset, %sizes:2, %strides:2 =</span></span>
<span class="line"><span>    memref.extract_strided_metadata %memref :</span></span>
<span class="line"><span>      memref&lt;10x?xf32&gt;, index, index, index, index, index</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // After folding, the type of %m2 can be memref&lt;10x?xf32&gt; and further</span></span>
<span class="line"><span>  // folded to %memref.</span></span>
<span class="line"><span>  %m2 = memref.reinterpret_cast %base to</span></span>
<span class="line"><span>      offset: [%offset],</span></span>
<span class="line"><span>      sizes: [%sizes#0, %sizes#1],</span></span>
<span class="line"><span>      strides: [%strides#0, %strides#1]</span></span>
<span class="line"><span>    : memref&lt;f32&gt; to memref&lt;?x?xf32, offset: ?, strides: [?, ?]&gt;</span></span></code></pre></div>`,9)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[72]||(e[72]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L925-L968",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",j,[s("summary",null,[e[74]||(e[74]=s("a",{id:"Reactant.MLIR.Dialects.memref.generic_atomic_rmw-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.generic_atomic_rmw-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.generic_atomic_rmw")],-1)),e[75]||(e[75]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[77]||(e[77]=l(`<p><code>generic_atomic_rmw</code></p><p>The <code>memref.generic_atomic_rmw</code> operation provides a way to perform a read-modify-write sequence that is free from data races. The memref operand represents the buffer that the read and write will be performed against, as accessed by the specified indices. The arity of the indices is the rank of the memref. The result represents the latest value that was stored. The region contains the code for the modification itself. The entry block has a single argument that represents the value stored in <code>memref[indices]</code> before the write is performed. No side-effecting ops are allowed in the body of <code>GenericAtomicRMWOp</code>.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%x = memref.generic_atomic_rmw %I[%i] : memref&lt;10xf32&gt; {</span></span>
<span class="line"><span>  ^bb0(%current_value : f32):</span></span>
<span class="line"><span>    %c1 = arith.constant 1.0 : f32</span></span>
<span class="line"><span>    %inc = arith.addf %c1, %current_value : f32</span></span>
<span class="line"><span>    memref.atomic_yield %inc : f32</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[76]||(e[76]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L154-L177",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",V,[s("summary",null,[e[78]||(e[78]=s("a",{id:"Reactant.MLIR.Dialects.memref.get_global-Tuple{}",href:"#Reactant.MLIR.Dialects.memref.get_global-Tuple{}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.get_global")],-1)),e[79]||(e[79]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[81]||(e[81]=l('<p><code>get_global</code></p><p>The <code>memref.get_global</code> operation retrieves the memref pointing to a named global variable. If the global variable is marked constant, writing to the result memref (such as through a <code>memref.store</code> operation) is undefined.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%x = memref.get_global @foo : memref&lt;2xf32&gt;</span></span></code></pre></div>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[80]||(e[80]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L999-L1012",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",D,[s("summary",null,[e[82]||(e[82]=s("a",{id:"Reactant.MLIR.Dialects.memref.global_-Tuple{}",href:"#Reactant.MLIR.Dialects.memref.global_-Tuple{}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.global_")],-1)),e[83]||(e[83]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[85]||(e[85]=l(`<p><code>global_</code></p><p>The <code>memref.global</code> operation declares or defines a named global memref variable. The backing memory for the variable is allocated statically and is described by the type of the variable (which should be a statically shaped memref type). The operation is a declaration if no <code>initial_value</code> is specified, else it is a definition. The <code>initial_value</code> can either be a unit attribute to represent a definition of an uninitialized global variable, or an elements attribute to represent the definition of a global variable with an initial value. The global variable can also be marked constant using the <code>constant</code> unit attribute. Writing to such constant global variables is undefined.</p><p>The global variable can be accessed by using the <code>memref.get_global</code> to retrieve the memref for the global variable. Note that the memref for such global variable itself is immutable (i.e., memref.get_global for a given global variable will always return the same memref descriptor).</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Private variable with an initial value.</span></span>
<span class="line"><span>memref.global &quot;private&quot; @x : memref&lt;2xf32&gt; = dense&lt;0.0,2.0&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Private variable with an initial value and an alignment (power of 2).</span></span>
<span class="line"><span>memref.global &quot;private&quot; @x : memref&lt;2xf32&gt; = dense&lt;0.0,2.0&gt; {alignment = 64}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Declaration of an external variable.</span></span>
<span class="line"><span>memref.global &quot;private&quot; @y : memref&lt;4xi32&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Uninitialized externally visible variable.</span></span>
<span class="line"><span>memref.global @z : memref&lt;3xf16&gt; = uninitialized</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Externally visible constant variable.</span></span>
<span class="line"><span>memref.global constant @c : memref&lt;2xi32&gt; = dense&lt;1, 4&gt;</span></span></code></pre></div>`,5)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[84]||(e[84]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1032-L1069",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",C,[s("summary",null,[e[86]||(e[86]=s("a",{id:"Reactant.MLIR.Dialects.memref.load-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.load-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.load")],-1)),e[87]||(e[87]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[89]||(e[89]=l('<p><code>load</code></p><p>The <code>load</code> op reads an element from a memref at the specified indices.</p><p>The number of indices must match the rank of the memref. The indices must be in-bounds: <code>0 &lt;= idx &lt; dim_size</code>.</p><p>Lowerings of <code>memref.load</code> may emit attributes, e.g. <code>inbouds</code> + <code>nuw</code> when converting to LLVM&#39;s <code>llvm.getelementptr</code>, that would cause undefined behavior if indices are out of bounds or if computing the offset in the memref would cause signed overflow of the <code>index</code> type.</p><p>The single result of <code>memref.load</code> is a value with the same type as the element type of the memref.</p><p>A set <code>nontemporal</code> attribute indicates that this load is not expected to be reused in the cache. For details, refer to the <a href="https://llvm.org/docs/LangRef.html#load-instruction" target="_blank" rel="noreferrer">LLVM load instruction</a>.</p><p>An optional <code>alignment</code> attribute allows to specify the byte alignment of the load operation. It must be a positive power of 2. The operation must access memory at an address aligned to this boundary. Violations may lead to architecture-specific faults or performance penalties. A value of 0 indicates no specific alignment requirement.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.load %A[%a, %b] : memref&lt;8x?xi32, #layout, memspace0&gt;</span></span></code></pre></div>',9)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[88]||(e[88]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L203-L233",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",A,[s("summary",null,[e[90]||(e[90]=s("a",{id:"Reactant.MLIR.Dialects.memref.memory_space_cast-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.memory_space_cast-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.memory_space_cast")],-1)),e[91]||(e[91]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[93]||(e[93]=l(`<p><code>memory_space_cast</code></p><p>This operation casts memref values between memory spaces. The input and result will be memrefs of the same types and shape that alias the same underlying memory, though, for some casts on some targets, the underlying values of the pointer stored in the memref may be affected by the cast.</p><p>The input and result must have the same shape, element type, rank, and layout.</p><p>If the source and target address spaces are the same, this operation is a noop.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Cast a GPU private memory attribution into a generic pointer</span></span>
<span class="line"><span>%2 = memref.memory_space_cast %1 : memref&lt;?xf32, 5&gt; to memref&lt;?xf32&gt;</span></span>
<span class="line"><span>// Cast a generic pointer to workgroup-local memory</span></span>
<span class="line"><span>%4 = memref.memory_space_cast %3 : memref&lt;5x4xi32&gt; to memref&lt;5x34xi32, 3&gt;</span></span>
<span class="line"><span>// Cast between two non-default memory spaces</span></span>
<span class="line"><span>%6 = memref.memory_space_cast %5</span></span>
<span class="line"><span>  : memref&lt;*xmemref&lt;?xf32&gt;, 5&gt; to memref&lt;*xmemref&lt;?xf32&gt;, 3&gt;</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[92]||(e[92]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1105-L1129",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",S,[s("summary",null,[e[94]||(e[94]=s("a",{id:"Reactant.MLIR.Dialects.memref.prefetch-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.prefetch-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.prefetch")],-1)),e[95]||(e[95]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[97]||(e[97]=l('<p><code>prefetch</code></p><p>The &quot;prefetch&quot; op prefetches data from a memref location described with subscript indices similar to memref.load, and with three attributes: a read/write specifier, a locality hint, and a cache type specifier as shown below:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>memref.prefetch %0[%i, %j], read, locality&lt;3&gt;, data : memref&lt;400x400xi32&gt;</span></span></code></pre></div><p>The read/write specifier is either &#39;read&#39; or &#39;write&#39;, the locality hint ranges from locality&lt;0&gt; (no locality) to locality&lt;3&gt; (extremely local keep in cache). The cache type specifier is either &#39;data&#39; or &#39;instr&#39; and specifies whether the prefetch is performed on data cache or on instruction cache.</p>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[96]||(e[96]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1149-L1166",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",z,[s("summary",null,[e[98]||(e[98]=s("a",{id:"Reactant.MLIR.Dialects.memref.rank-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.rank-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.rank")],-1)),e[99]||(e[99]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[101]||(e[101]=l(`<p><code>rank</code></p><p>The <code>memref.rank</code> operation takes a memref operand and returns its rank.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.rank %arg0 : memref&lt;*xf32&gt;</span></span>
<span class="line"><span>%1 = memref.rank %arg1 : memref&lt;?x?xf32&gt;</span></span></code></pre></div>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[100]||(e[100]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1197-L1208",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",E,[s("summary",null,[e[102]||(e[102]=s("a",{id:"Reactant.MLIR.Dialects.memref.realloc",href:"#Reactant.MLIR.Dialects.memref.realloc"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.realloc")],-1)),e[103]||(e[103]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[105]||(e[105]=l(`<p><code>realloc</code></p><p>The <code>realloc</code> operation changes the size of a memory region. The memory region is specified by a 1D source memref and the size of the new memory region is specified by a 1D result memref type and an optional dynamic Value of <code>Index</code> type. The source and the result memref must be in the same memory space and have the same element type.</p><p>The operation may move the memory region to a new location. In this case, the content of the memory block is preserved up to the lesser of the new and old sizes. If the new size if larger, the value of the extended memory is undefined. This is consistent with the ISO C realloc.</p><p>The operation returns an SSA value for the memref.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%0 = memref.realloc %src : memref&lt;64xf32&gt; to memref&lt;124xf32&gt;</span></span></code></pre></div><p>The source memref may have a dynamic shape, in which case, the compiler will generate code to extract its size from the runtime data structure for the memref.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%1 = memref.realloc %src : memref&lt;?xf32&gt; to memref&lt;124xf32&gt;</span></span></code></pre></div><p>If the result memref has a dynamic shape, a result dimension operand is needed to spefify its dynamic dimension. In the example below, the ssa value &#39;%d&#39; specifies the unknown dimension of the result memref.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%2 = memref.realloc %src(%d) : memref&lt;?xf32&gt; to memref&lt;?xf32&gt;</span></span></code></pre></div><p>An optional <code>alignment</code> attribute may be specified to ensure that the region of memory that will be indexed is aligned at the specified byte boundary. This is consistent with the fact that memref.alloc supports such an optional alignment attribute. Note that in ISO C standard, neither alloc nor realloc supports alignment, though there is aligned_alloc but not aligned_realloc.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%3 = memref.realloc %src {alignment = 8} : memref&lt;64xf32&gt; to memref&lt;124xf32&gt;</span></span></code></pre></div><p>Referencing the memref through the old SSA value after realloc is undefined behavior.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%new = memref.realloc %old : memref&lt;64xf32&gt; to memref&lt;124xf32&gt;</span></span>
<span class="line"><span>%4 = memref.load %new[%index]</span><span>   // ok</span></span>
<span class="line"><span>%5 = memref.load %old[%index]</span><span>   // undefined behavior</span></span></code></pre></div>`,14)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[104]||(e[104]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1229-L1286",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",P,[s("summary",null,[e[106]||(e[106]=s("a",{id:"Reactant.MLIR.Dialects.memref.reinterpret_cast-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.reinterpret_cast-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.reinterpret_cast")],-1)),e[107]||(e[107]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[109]||(e[109]=l(`<p><code>reinterpret_cast</code></p><p>Modify offset, sizes and strides of an unranked/ranked memref.</p><p>Example 1:</p><p>Consecutive <code>reinterpret_cast</code> operations on memref&#39;s with static dimensions.</p><p>We distinguish between <em>underlying memory</em> â€” the sequence of elements as they appear in the contiguous memory of the memref â€” and the <em>strided memref</em>, which refers to the underlying memory interpreted according to specified offsets, sizes, and strides.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%result1 = memref.reinterpret_cast %arg0 to</span></span>
<span class="line"><span>  offset: [9],</span></span>
<span class="line"><span>  sizes: [4, 4],</span></span>
<span class="line"><span>  strides: [16, 2]</span></span>
<span class="line"><span>: memref&lt;8x8xf32, strided&lt;[8, 1], offset: 0&gt;&gt; to</span></span>
<span class="line"><span>  memref&lt;4x4xf32, strided&lt;[16, 2], offset: 9&gt;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%result2 = memref.reinterpret_cast %result1 to</span></span>
<span class="line"><span>  offset: [0],</span></span>
<span class="line"><span>  sizes: [2, 2],</span></span>
<span class="line"><span>  strides: [4, 2]</span></span>
<span class="line"><span>: memref&lt;4x4xf32, strided&lt;[16, 2], offset: 9&gt;&gt; to</span></span>
<span class="line"><span>  memref&lt;2x2xf32, strided&lt;[4, 2], offset: 0&gt;&gt;</span></span></code></pre></div><p>The underlying memory of <code>%arg0</code> consists of a linear sequence of integers from 1 to 64. Its memref has the following 8x8 elements:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[1,  2,  3,  4,  5,  6,  7,  8],</span></span>
<span class="line"><span>[9,  10, 11, 12, 13, 14, 15, 16],</span></span>
<span class="line"><span>[17, 18, 19, 20, 21, 22, 23, 24],</span></span>
<span class="line"><span>[25, 26, 27, 28, 29, 30, 31, 32],</span></span>
<span class="line"><span>[33, 34, 35, 36, 37, 38, 39, 40],</span></span>
<span class="line"><span>[41, 42, 43, 44, 45, 46, 47, 48],</span></span>
<span class="line"><span>[49, 50, 51, 52, 53, 54, 55, 56],</span></span>
<span class="line"><span>[57, 58, 59, 60, 61, 62, 63, 64]]</span></span></code></pre></div><p>Following the first <code>reinterpret_cast</code>, the strided memref elements of <code>%result1</code> are:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[10, 12, 14, 16],</span></span>
<span class="line"><span>[26, 28, 30, 32],</span></span>
<span class="line"><span>[42, 44, 46, 48],</span></span>
<span class="line"><span>[58, 60, 62, 64]]</span></span></code></pre></div><p>Note: The offset and strides are relative to the underlying memory of <code>%arg0</code>.</p><p>The second <code>reinterpret_cast</code> results in the following strided memref for <code>%result2</code>:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[1, 3],</span></span>
<span class="line"><span>[5, 7]]</span></span></code></pre></div><p>Notice that it does not matter if you use %result1 or %arg0 as a source for the second <code>reinterpret_cast</code> operation. Only the underlying memory pointers will be reused.</p><p>The offset and stride are relative to the base underlying memory of the memref, starting at 1, not at 10 as seen in the output of <code>%result1</code>. This behavior contrasts with the <code>subview</code> operator, where values are relative to the strided memref (refer to <code>subview</code> examples). Consequently, the second <code>reinterpret_cast</code> behaves as if <code>%arg0</code> were passed directly as its argument.</p><p>Example 2:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>memref.reinterpret_cast %ranked to</span></span>
<span class="line"><span>  offset: [0],</span></span>
<span class="line"><span>  sizes: [%size0, 10],</span></span>
<span class="line"><span>  strides: [1, %stride1]</span></span>
<span class="line"><span>: memref&lt;?x?xf32&gt; to memref&lt;?x10xf32, strided&lt;[1, ?], offset: 0&gt;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>memref.reinterpret_cast %unranked to</span></span>
<span class="line"><span>  offset: [%offset],</span></span>
<span class="line"><span>  sizes: [%size0, %size1],</span></span>
<span class="line"><span>  strides: [%stride0, %stride1]</span></span>
<span class="line"><span>: memref&lt;*xf32&gt; to memref&lt;?x?xf32, strided&lt;[?, ?], offset: ?&gt;&gt;</span></span></code></pre></div><p>This operation creates a new memref descriptor using the base of the source and applying the input arguments to the other metadata. In other words:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%dst = memref.reinterpret_cast %src to</span></span>
<span class="line"><span>  offset: [%offset],</span></span>
<span class="line"><span>  sizes: [%sizes],</span></span>
<span class="line"><span>  strides: [%strides]</span></span></code></pre></div><p>means that <code>%dst</code>&#39;s descriptor will be:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%dst.base = %src.base</span></span>
<span class="line"><span>%dst.aligned = %src.aligned</span></span>
<span class="line"><span>%dst.offset = %offset</span></span>
<span class="line"><span>%dst.sizes = %sizes</span></span>
<span class="line"><span>%dst.strides = %strides</span></span></code></pre></div>`,21)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[108]||(e[108]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1314-L1423",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",q,[s("summary",null,[e[110]||(e[110]=s("a",{id:"Reactant.MLIR.Dialects.memref.reshape-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.reshape-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.reshape")],-1)),e[111]||(e[111]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[113]||(e[113]=l(`<p><code>reshape</code></p><p>The <code>reshape</code> operation converts a memref from one type to an equivalent type with a provided shape. The data is never copied or modified. The source and destination types are compatible if both have the same element type, same number of elements, address space and identity layout map. The following combinations are possible:</p><p>a. Source type is ranked or unranked. Shape argument has static size. Result type is ranked.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Reshape statically-shaped memref.</span></span>
<span class="line"><span>%dst = memref.reshape %src(%shape)</span></span>
<span class="line"><span>         : (memref&lt;4x1xf32&gt;, memref&lt;1xi32&gt;) to memref&lt;4xf32&gt;</span></span>
<span class="line"><span>%dst0 = memref.reshape %src(%shape0)</span></span>
<span class="line"><span>         : (memref&lt;4x1xf32&gt;, memref&lt;2xi32&gt;) to memref&lt;2x2xf32&gt;</span></span>
<span class="line"><span>// Flatten unranked memref.</span></span>
<span class="line"><span>%dst = memref.reshape %src(%shape)</span></span>
<span class="line"><span>         : (memref&lt;*xf32&gt;, memref&lt;1xi32&gt;) to memref&lt;?xf32&gt;</span></span></code></pre></div><p>b. Source type is ranked or unranked. Shape argument has dynamic size. Result type is unranked.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Reshape dynamically-shaped 1D memref.</span></span>
<span class="line"><span>%dst = memref.reshape %src(%shape)</span></span>
<span class="line"><span>         : (memref&lt;?xf32&gt;, memref&lt;?xi32&gt;) to memref&lt;*xf32&gt;</span></span>
<span class="line"><span>// Reshape unranked memref.</span></span>
<span class="line"><span>%dst = memref.reshape %src(%shape)</span></span>
<span class="line"><span>         : (memref&lt;*xf32&gt;, memref&lt;?xi32&gt;) to memref&lt;*xf32&gt;</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[112]||(e[112]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1461-L1495",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",O,[s("summary",null,[e[114]||(e[114]=s("a",{id:"Reactant.MLIR.Dialects.memref.store-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.store-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.store")],-1)),e[115]||(e[115]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[117]||(e[117]=l('<p><code>store</code></p><p>The <code>store</code> op stores an element into a memref at the specified indices.</p><p>The number of indices must match the rank of the memref. The indices must be in-bounds: <code>0 &lt;= idx &lt; dim_size</code>.</p><p>Lowerings of <code>memref.store</code> may emit attributes, e.g. <code>inbouds</code> + <code>nuw</code> when converting to LLVM&#39;s <code>llvm.getelementptr</code>, that would cause undefined behavior if indices are out of bounds or if computing the offset in the memref would cause signed overflow of the <code>index</code> type.</p><p>A set <code>nontemporal</code> attribute indicates that this store is not expected to be reused in the cache. For details, refer to the <a href="https://llvm.org/docs/LangRef.html#store-instruction" target="_blank" rel="noreferrer">LLVM store instruction</a>.</p><p>An optional <code>alignment</code> attribute allows to specify the byte alignment of the store operation. It must be a positive power of 2. The operation must access memory at an address aligned to this boundary. Violations may lead to architecture-specific faults or performance penalties. A value of 0 indicates no specific alignment requirement.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>memref.store %val, %A[%a, %b] : memref&lt;8x?xi32, #layout, memspace0&gt;</span></span></code></pre></div>',8)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[116]||(e[116]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1515-L1542",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",N,[s("summary",null,[e[118]||(e[118]=s("a",{id:"Reactant.MLIR.Dialects.memref.subview-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.subview-Tuple{Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.subview")],-1)),e[119]||(e[119]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[121]||(e[121]=l(`<p><code>subview</code></p><p>The <code>subview</code> operation converts a memref type to a memref type which represents a reduced-size view of the original memref as specified by the operation&#39;s offsets, sizes and strides arguments.</p><p>The <code>subview</code> operation supports the following arguments:</p><ul><li><p>source: the &quot;base&quot; memref on which to create a &quot;view&quot; memref.</p></li><li><p>offsets: memref-rank number of offsets into the &quot;base&quot; memref at which to create the &quot;view&quot; memref.</p></li><li><p>sizes: memref-rank number of sizes which specify the sizes of the result &quot;view&quot; memref type.</p></li><li><p>strides: memref-rank number of strides that compose multiplicatively with the base memref strides in each dimension.</p></li></ul><p>The representation based on offsets, sizes and strides support a partially-static specification via attributes specified through the <code>static_offsets</code>, <code>static_sizes</code> and <code>static_strides</code> arguments. A special sentinel value <code>ShapedType::kDynamic</code> encodes that the corresponding entry has a dynamic value.</p><p>A <code>subview</code> operation may additionally reduce the rank of the resulting view by removing dimensions that are statically known to be of size 1.</p><p>In the absence of rank reductions, the resulting memref type is computed as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>result_sizes[i] = size_operands[i]</span></span>
<span class="line"><span>result_strides[i] = src_strides[i] * stride_operands[i]</span></span>
<span class="line"><span>result_offset = src_offset + dot_product(offset_operands, src_strides)</span></span></code></pre></div><p>The offset, size and stride operands must be in-bounds with respect to the source memref. When possible, the static operation verifier will detect out-of-bounds subviews. Subviews that cannot be confirmed to be in-bounds or out-of-bounds based on compile-time information are valid. However, performing an out-of-bounds subview at runtime is undefined behavior.</p><p>Example 1:</p><p>Consecutive <code>subview</code> operations on memref&#39;s with static dimensions.</p><p>We distinguish between <em>underlying memory</em> â€” the sequence of elements as they appear in the contiguous memory of the memref â€” and the <em>strided memref</em>, which refers to the underlying memory interpreted according to specified offsets, sizes, and strides.</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%result1 = memref.subview %arg0[1, 1][4, 4][2, 2]</span></span>
<span class="line"><span>: memref&lt;8x8xf32, strided&lt;[8, 1], offset: 0&gt;&gt; to</span></span>
<span class="line"><span>  memref&lt;4x4xf32, strided&lt;[16, 2], offset: 9&gt;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%result2 = memref.subview %result1[1, 1][2, 2][2, 2]</span></span>
<span class="line"><span>: memref&lt;4x4xf32, strided&lt;[16, 2], offset: 9&gt;&gt; to</span></span>
<span class="line"><span>  memref&lt;2x2xf32, strided&lt;[32, 4], offset: 27&gt;&gt;</span></span></code></pre></div><p>The underlying memory of <code>%arg0</code> consists of a linear sequence of integers from 1 to 64. Its memref has the following 8x8 elements:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[1,  2,  3,  4,  5,  6,  7,  8],</span></span>
<span class="line"><span>[9,  10, 11, 12, 13, 14, 15, 16],</span></span>
<span class="line"><span>[17, 18, 19, 20, 21, 22, 23, 24],</span></span>
<span class="line"><span>[25, 26, 27, 28, 29, 30, 31, 32],</span></span>
<span class="line"><span>[33, 34, 35, 36, 37, 38, 39, 40],</span></span>
<span class="line"><span>[41, 42, 43, 44, 45, 46, 47, 48],</span></span>
<span class="line"><span>[49, 50, 51, 52, 53, 54, 55, 56],</span></span>
<span class="line"><span>[57, 58, 59, 60, 61, 62, 63, 64]]</span></span></code></pre></div><p>Following the first <code>subview</code>, the strided memref elements of <code>%result1</code> are:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[10, 12, 14, 16],</span></span>
<span class="line"><span>[26, 28, 30, 32],</span></span>
<span class="line"><span>[42, 44, 46, 48],</span></span>
<span class="line"><span>[58, 60, 62, 64]]</span></span></code></pre></div><p>Note: The offset and strides are relative to the strided memref of <code>%arg0</code> (compare to the corresponding <code>reinterpret_cast</code> example).</p><p>The second <code>subview</code> results in the following strided memref for <code>%result2</code>:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[28, 32],</span></span>
<span class="line"><span>[60, 64]]</span></span></code></pre></div><p>Unlike the <code>reinterpret_cast</code>, the values are relative to the strided memref of the input (<code>%result1</code> in this case) and not its underlying memory.</p><p>Example 2:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Subview of static memref with strided layout at static offsets, sizes</span></span>
<span class="line"><span>// and strides.</span></span>
<span class="line"><span>%1 = memref.subview %0[4, 2][8, 2][3, 2]</span></span>
<span class="line"><span>    : memref&lt;64x4xf32, strided&lt;[7, 9], offset: 91&gt;&gt; to</span></span>
<span class="line"><span>      memref&lt;8x2xf32, strided&lt;[21, 18], offset: 137&gt;&gt;</span></span></code></pre></div><p>Example 3:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Subview of static memref with identity layout at dynamic offsets, sizes</span></span>
<span class="line"><span>// and strides.</span></span>
<span class="line"><span>%1 = memref.subview %0[%off0, %off1][%sz0, %sz1][%str0, %str1]</span></span>
<span class="line"><span>    : memref&lt;64x4xf32&gt; to memref&lt;?x?xf32, strided&lt;[?, ?], offset: ?&gt;&gt;</span></span></code></pre></div><p>Example 4:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Subview of dynamic memref with strided layout at dynamic offsets and</span></span>
<span class="line"><span>// strides, but static sizes.</span></span>
<span class="line"><span>%1 = memref.subview %0[%off0, %off1][4, 4][%str0, %str1]</span></span>
<span class="line"><span>    : memref&lt;?x?xf32, strided&lt;[?, ?], offset: ?&gt;&gt; to</span></span>
<span class="line"><span>      memref&lt;4x4xf32, strided&lt;[?, ?], offset: ?&gt;&gt;</span></span></code></pre></div><p>Example 5:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Rank-reducing subviews.</span></span>
<span class="line"><span>%1 = memref.subview %0[0, 0, 0][1, 16, 4][1, 1, 1]</span></span>
<span class="line"><span>    : memref&lt;8x16x4xf32&gt; to memref&lt;16x4xf32&gt;</span></span>
<span class="line"><span>%3 = memref.subview %2[3, 4, 2][1, 6, 3][1, 1, 1]</span></span>
<span class="line"><span>    : memref&lt;8x16x4xf32&gt; to memref&lt;6x3xf32, strided&lt;[4, 1], offset: 210&gt;&gt;</span></span></code></pre></div><p>Example 6:</p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Identity subview. The subview is the full source memref.</span></span>
<span class="line"><span>%1 = memref.subview %0[0, 0, 0] [8, 16, 4] [1, 1, 1]</span></span>
<span class="line"><span>    : memref&lt;8x16x4xf32&gt; to memref&lt;8x16x4xf32&gt;</span></span></code></pre></div>`,31)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[120]||(e[120]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1666-L1810",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",F,[s("summary",null,[e[122]||(e[122]=s("a",{id:"Reactant.MLIR.Dialects.memref.transpose-Tuple{Reactant.MLIR.IR.Value}",href:"#Reactant.MLIR.Dialects.memref.transpose-Tuple{Reactant.MLIR.IR.Value}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.transpose")],-1)),e[123]||(e[123]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[125]||(e[125]=l('<p><code>transpose</code></p><p>The <code>transpose</code> op produces a strided memref whose sizes and strides are a permutation of the original <code>in</code> memref. This is purely a metadata transformation.</p><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%1 = memref.transpose %0 (i, j) -&gt; (j, i) : memref&lt;?x?xf32&gt; to memref&lt;?x?xf32, affine_map&lt;(d0, d1)[s0] -&gt; (d1 * s0 + d0)&gt;&gt;</span></span></code></pre></div>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[124]||(e[124]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1571-L1583",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",W,[s("summary",null,[e[126]||(e[126]=s("a",{id:"Reactant.MLIR.Dialects.memref.view-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}",href:"#Reactant.MLIR.Dialects.memref.view-Tuple{Reactant.MLIR.IR.Value, Reactant.MLIR.IR.Value, Vector{Reactant.MLIR.IR.Value}}"},[s("span",{class:"jlbinding"},"Reactant.MLIR.Dialects.memref.view")],-1)),e[127]||(e[127]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[129]||(e[129]=l(`<p><code>view</code></p><p>The &quot;view&quot; operation extracts an N-D contiguous memref with empty layout map with arbitrary element type from a 1-D contiguous memref with empty layout map of i8 element type. The ViewOp supports the following arguments:</p><ul><li><p>A single dynamic byte-shift operand must be specified which represents a a shift of the base 1-D memref pointer from which to create the resulting contiguous memref view with identity layout.</p></li><li><p>A dynamic size operand that must be specified for each dynamic dimension in the resulting view memref type.</p></li></ul><p>The &quot;view&quot; operation gives a structured indexing form to a flat 1-D buffer. Unlike &quot;subview&quot; it can perform a type change. The type change behavior requires the op to have special semantics because, e.g. a byte shift of 3 cannot be represented as an offset on f64. For now, a &quot;view&quot; op:</p><ol><li><p>Only takes a contiguous source memref with 0 offset and empty layout.</p></li><li><p>Must specify a byte_shift operand (in the future, a special integer attribute may be added to support the folded case).</p></li><li><p>Returns a contiguous memref with 0 offset and empty layout.</p></li></ol><p><strong>Example</strong></p><div class="language-mlir vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mlir</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Allocate a flat 1D/i8 memref.</span></span>
<span class="line"><span>%0 = memref.alloc() : memref&lt;2048xi8&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ViewOp with dynamic offset and static sizes.</span></span>
<span class="line"><span>%1 = memref.view %0[%offset_1024][] : memref&lt;2048xi8&gt; to memref&lt;64x4xf32&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ViewOp with dynamic offset and two dynamic size.</span></span>
<span class="line"><span>%2 = memref.view %0[%offset_1024][%size0, %size1] :</span></span>
<span class="line"><span>  memref&lt;2048xi8&gt; to memref&lt;?x4x?xf32&gt;</span></span></code></pre></div>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:i(()=>[...e[128]||(e[128]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/a20bf4d9db6e85c28681379e09e2601e4c149d68/src/mlir/Dialects/MemRef.jl#L1603-L1640",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const X=o(d,[["render",B]]);export{Q as __pageData,X as default};
