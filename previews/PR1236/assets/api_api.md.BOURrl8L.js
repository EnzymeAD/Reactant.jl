import{_ as o,C as p,c as r,o as d,j as s,a as t,al as n,G as a,w as l}from"./chunks/framework.CoffTfcw.js";const V=JSON.parse('{"title":"Core Reactant API","description":"","frontmatter":{},"headers":[],"relativePath":"api/api.md","filePath":"api/api.md","lastUpdated":null}'),h={name:"api/api.md"},c={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"};function P(I,i,O,S,B,L){const e=p("Badge");return d(),r("div",null,[i[80]||(i[80]=s("h1",{id:"Core-Reactant-API",tabindex:"-1"},[t("Core Reactant API "),s("a",{class:"header-anchor",href:"#Core-Reactant-API","aria-label":'Permalink to "Core Reactant API {#Core-Reactant-API}"'},"​")],-1)),i[81]||(i[81]=s("h2",{id:"Compile-API",tabindex:"-1"},[t("Compile API "),s("a",{class:"header-anchor",href:"#Compile-API","aria-label":'Permalink to "Compile API {#Compile-API}"'},"​")],-1)),s("details",c,[s("summary",null,[i[0]||(i[0]=s("a",{id:"Reactant.Compiler.@compile",href:"#Reactant.Compiler.@compile"},[s("span",{class:"jlbinding"},"Reactant.Compiler.@compile")],-1)),i[1]||(i[1]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[3]||(i[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optimize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [no_nan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compile the function <code>f</code> with arguments <code>args</code> and return the compiled function.</p><p><strong>Options</strong></p><ul><li><p><code>sync</code>: Reactant computations are asynchronous by default. If <code>true</code>, the computation will be executed synchronously, blocking till the computation is complete. This is recommended when benchmarking.</p></li><li><p><code>compile_options</code>: If provided, then all other compilation options will be ignored. This should be an object of type <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p></li><li><p><code>optimize</code>: This option maps to the <code>optimization_passes</code> field of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>. See the documentation of <code>CompileOptions</code> for more details.</p></li><li><p><code>client</code>: XLA Client used for compilation. If not specified, the default client is used.</p></li></ul><p>For details about other compilation options see the documentation of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p><ul><li><code>serializable</code>: If <code>true</code>, the compiled function will be serializable. This is needed for saving the compiled function to disk and loading it later. Defaults to <code>false</code>.</li></ul><p>See also <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@jit"><code>@jit</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_hlo"><code>@code_hlo</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_mhlo"><code>@code_mhlo</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_xla"><code>@code_xla</code></a>.</p>',7)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Compiler.jl#L2567-L2580",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",k,[s("summary",null,[i[4]||(i[4]=s("a",{id:"Reactant.Compiler.@jit",href:"#Reactant.Compiler.@jit"},[s("span",{class:"jlbinding"},"Reactant.Compiler.@jit")],-1)),i[5]||(i[5]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[7]||(i[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@jit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optimize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [no_nan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Run @compile f(args..) then immediately execute it. Most users should use <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@compile"><code>@compile</code></a> instead to cache the compiled function and execute it later.</p><p><strong>Options</strong></p><ul><li><p><code>sync</code>: Reactant computations are asynchronous by default. If <code>true</code>, the computation will be executed synchronously, blocking till the computation is complete. This is recommended when benchmarking.</p></li><li><p><code>compile_options</code>: If provided, then all other compilation options will be ignored. This should be an object of type <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p></li><li><p><code>optimize</code>: This option maps to the <code>optimization_passes</code> field of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>. See the documentation of <code>CompileOptions</code> for more details.</p></li><li><p><code>client</code>: XLA Client used for compilation. If not specified, the default client is used.</p></li></ul><p>For details about other compilation options see the documentation of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p><p>See also <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@compile"><code>@compile</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_hlo"><code>@code_hlo</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_mhlo"><code>@code_mhlo</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_xla"><code>@code_xla</code></a>.</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Compiler.jl#L2589-L2601",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),i[82]||(i[82]=s("h2",{id:"ReactantCore-API",tabindex:"-1"},[t("ReactantCore API "),s("a",{class:"header-anchor",href:"#ReactantCore-API","aria-label":'Permalink to "ReactantCore API {#ReactantCore-API}"'},"​")],-1)),s("details",g,[s("summary",null,[i[8]||(i[8]=s("a",{id:"ReactantCore.within_compile",href:"#ReactantCore.within_compile"},[s("span",{class:"jlbinding"},"ReactantCore.within_compile")],-1)),i[9]||(i[9]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[11]||(i[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within_compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns true if this function is executed in a Reactant compilation context, otherwise false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/lib/ReactantCore/src/ReactantCore.jl#L41-L45",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",u,[s("summary",null,[i[12]||(i[12]=s("a",{id:"ReactantCore.@trace",href:"#ReactantCore.@trace"},[s("span",{class:"jlbinding"},"ReactantCore.@trace")],-1)),i[13]||(i[13]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[15]||(i[15]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Converts certain expressions like control flow into a Reactant friendly form. Importantly, if no traced value is found inside the expression, then there is no overhead.</p><p><strong>Currently Supported</strong></p><ul><li><p><code>if</code> conditions (with <code>elseif</code> and other niceties) (<code>@trace if ...</code>)</p></li><li><p><code>if</code> statements with a preceeding assignment (<code>@trace a = if ...</code>) (note the positioning of the macro needs to be before the assignment and not before the <code>if</code>)</p></li><li><p><code>for</code> statements with a single induction variable iterating over integers with known <code>step</code></p></li><li><p><code>while</code> statements</p></li></ul><p><strong>Special Considerations</strong></p><ul><li>Apply <code>@trace</code> only at the outermost <code>if</code>. Nested <code>if</code> statements will be automatically expanded into the correct form.</li></ul><p><strong>Extended Help</strong></p><p><strong>Caveats (Deviations from Core Julia Semantics)</strong></p><p><strong>New variables introduced</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@trace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>In the outer scope <code>p</code> is not defined if <code>x ≤ 0</code>. However, for the traced version, it is defined and set to a dummy value.</p><p><strong>Short Circuiting Operations</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@trace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><code>&amp;&amp;</code> and <code>||</code> are short circuiting operations. In the traced version, we replace them with <code>&amp;</code> and <code>|</code> respectively.</p><p><strong>Type-Unstable Branches</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@trace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0f0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>This will not compile since <code>y</code> is a <code>Float32</code> in one branch and a <code>Float64</code> in the other. You need to ensure that all branches have the same type.</p><p>Another example is the following for loop which changes the type of <code>x</code> between iterations.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ConcreteRArray{Int64, 1}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1f0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5f0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10f0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ConcreteRArray{Float32, 1}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><strong>Certain Symbols are Reserved</strong></p><p>Symbols like [😦😃, :nothing, :missing, :Inf, :Inf16, :Inf32, :Inf64, :Base, :Core] are not allowed as variables in <code>@trace</code> expressions. While certain cases might work but these are not guaranteed to work. For example, the following will not work:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    nothing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @trace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><strong>Configuration</strong></p><p>The behavior of loops can be configured with the following configuration options:</p><ul><li><p><code>track_numbers::Union{Bool,Datatype}</code> - whether Julia numbers should be automatically promoted to traced numbers upon entering the loop.</p></li><li><p><code>checkpointing::Bool</code> - whether or not to enable checkpointing when performing reverse mode differentiation (default: <code>false</code>).</p></li><li><p><code>mincut::Bool</code> - whether or not to enable the mincut algorithm when performing reverse mode differentiation (default: <code>false</code>).</p></li></ul>`,25)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/lib/ReactantCore/src/ReactantCore.jl#L49-L145",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),i[83]||(i[83]=s("h2",{id:"Inspect-Generated-HLO",tabindex:"-1"},[t("Inspect Generated HLO "),s("a",{class:"header-anchor",href:"#Inspect-Generated-HLO","aria-label":'Permalink to "Inspect Generated HLO {#Inspect-Generated-HLO}"'},"​")],-1)),s("details",y,[s("summary",null,[i[16]||(i[16]=s("a",{id:"Reactant.Compiler.@code_hlo",href:"#Reactant.Compiler.@code_hlo"},[s("span",{class:"jlbinding"},"Reactant.Compiler.@code_hlo")],-1)),i[17]||(i[17]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[19]||(i[19]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@code_hlo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optimize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [no_nan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Prints the compiled MLIR module for the function <code>f</code> with arguments <code>args</code>.</p><p><strong>Options</strong></p><ul><li><p><code>compile_options</code>: If provided, then all other compilation options will be ignored. This should be an object of type <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p></li><li><p><code>optimize</code>: This option maps to the <code>optimization_passes</code> field of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>. See the documentation of <code>CompileOptions</code> for more details.</p></li><li><p><code>client</code>: XLA Client used for compilation. If not specified, the default client is used.</p></li></ul><p>For details about other compilation options see the documentation of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p><p>See also <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_xla"><code>@code_xla</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_mhlo"><code>@code_mhlo</code></a>.</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[18]||(i[18]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Compiler.jl#L2489-L2499",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),s("details",m,[s("summary",null,[i[20]||(i[20]=s("a",{id:"Reactant.Compiler.@code_mhlo",href:"#Reactant.Compiler.@code_mhlo"},[s("span",{class:"jlbinding"},"Reactant.Compiler.@code_mhlo")],-1)),i[21]||(i[21]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[23]||(i[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@code_mhlo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optimize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [no_nan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Similar to <code>@code_hlo</code>, but runs additional passes to export the stablehlo module to MHLO.</p><p><strong>Options</strong></p><ul><li><p><code>compile_options</code>: If provided, then all other compilation options will be ignored. This should be an object of type <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p></li><li><p><code>optimize</code>: This option maps to the <code>optimization_passes</code> field of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>. See the documentation of <code>CompileOptions</code> for more details.</p></li><li><p><code>client</code>: XLA Client used for compilation. If not specified, the default client is used.</p></li></ul><p>For details about other compilation options see the documentation of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p><p>See also <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_xla"><code>@code_xla</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_hlo"><code>@code_hlo</code></a>.</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[22]||(i[22]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Compiler.jl#L2514-L2524",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),s("details",f,[s("summary",null,[i[24]||(i[24]=s("a",{id:"Reactant.Compiler.@code_xla",href:"#Reactant.Compiler.@code_xla"},[s("span",{class:"jlbinding"},"Reactant.Compiler.@code_xla")],-1)),i[25]||(i[25]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[27]||(i[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@code_xla</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optimize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [no_nan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Similar to <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_hlo"><code>@code_hlo</code></a>, but runs additional XLA passes and exports MLIR to XLA HLO. This is the post optimizations XLA HLO module.</p><p><strong>Options</strong></p><ul><li><p><code>compile_options</code>: If provided, then all other compilation options will be ignored. This should be an object of type <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p></li><li><p><code>optimize</code>: This option maps to the <code>optimization_passes</code> field of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>. See the documentation of <code>CompileOptions</code> for more details.</p></li><li><p><code>client</code>: XLA Client used for compilation. If not specified, the default client is used.</p></li></ul><p>For details about other compilation options see the documentation of <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p><p>See also <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_mhlo"><code>@code_mhlo</code></a>, <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@code_hlo"><code>@code_hlo</code></a>.</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[26]||(i[26]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Compiler.jl#L2539-L2550",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),i[84]||(i[84]=s("h2",{id:"Compile-Options",tabindex:"-1"},[t("Compile Options "),s("a",{class:"header-anchor",href:"#Compile-Options","aria-label":'Permalink to "Compile Options {#Compile-Options}"'},"​")],-1)),s("details",b,[s("summary",null,[i[28]||(i[28]=s("a",{id:"Reactant.CompileOptions",href:"#Reactant.CompileOptions"},[s("span",{class:"jlbinding"},"Reactant.CompileOptions")],-1)),i[29]||(i[29]=t()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompileOptions</span></span></code></pre></div><p>Fine-grained control over the compilation options for the Reactant compiler.</p><p><strong>Controlling Optimization Passes</strong></p><ul><li><p><code>optimization_passes</code>: Optimizations passes to run on the traced MLIR code. Valid types of values are:</p><ul><li><p>Bool (true/false): whether to run the optimization passes or not. Defaults to <code>true</code>.</p></li><li><p>String: a custom string with the passes to run. The string should be a comma-separated list of MLIR passes. For example, <code>&quot;canonicalize,enzyme-hlo-opt&quot;</code>.</p></li><li><p>Symbol: a predefined set of passes to run. Valid options are:</p><ol><li><p><code>:all</code>: Default set of optimization passes. The exact set of passes are not fixed and may change in future versions of Reactant. It is recommended to use this option for most users.</p></li><li><p><code>:none</code>: No optimization passes will be run.</p></li><li><p>Other predefined options are: <code>:before_kernel</code>, <code>:before_jit</code>, <code>:before_raise</code>, <code>:before_enzyme</code>, <code>:after_enzyme</code>, <code>:just_batch</code>, <code>:canonicalize</code>, <code>:only_enzyme</code>.</p></li></ol></li></ul></li><li><p><code>no_nan</code>: If <code>true</code>, the optimization passes will assume that the function does not produce NaN values. This can lead to more aggressive optimizations <strong>(and potentially incorrect results if the function does produce NaN values)</strong>.</p></li><li><p><code>all_finite</code>: If <code>true</code>, the optimization passes will assume that the function does not produce Inf or -Inf values. This can lead to more aggressive optimizations <strong>(and potentially incorrect results if the function does produce Inf or -Inf values)</strong>.</p></li><li><p><code>transpose_propagate</code>: If <code>:up</code>, <code>stablehlo.transpose</code> operations will be propagated up the computation graph. If <code>:down</code>, they will be propagated down. Defaults to <code>:up</code>.</p></li><li><p><code>reshape_propagate</code>: If <code>:up</code>, <code>stablehlo.reshape</code> operations will be propagated up the computation graph. If <code>:down</code>, they will be propagated down. Defaults to <code>:up</code>.</p></li><li><p><code>max_constant_threshold</code>: If the number of elements in a constant is greater than this threshold (for a non-splatted constant), we will throw an error.</p></li><li><p><code>inline</code>: If <code>true</code>, all functions will be inlined. This is <code>true</code> by default.</p></li></ul><p><strong>Raising Options</strong></p><ul><li><p><code>raise</code>: If <code>true</code>, the function will be compiled with the raising pass, which raises CUDA and KernelAbstractions kernels to HLO. Defaults to <code>false</code>, but is automatically activated if the inputs are sharded.</p></li><li><p><code>raise_first</code>: If <code>true</code>, the raising pass will be run before the optimization passes. Defaults to <code>false</code>.</p></li></ul><p><strong>Dialect Specific Options</strong></p><ul><li><code>legalize_chlo_to_stablehlo</code>: If <code>true</code>, <code>chlo</code> dialect ops will be converted to <code>stablehlo</code> ops. This is <code>false</code> by default.</li></ul><p><strong>Backend Specific Options</strong></p><p><strong>Only for CUDA backend</strong></p><ul><li><code>cudnn_hlo_optimize</code>: Run cuDNN specific HLO optimizations. This is only relevant for GPU backends and is <code>false</code> by default. <strong>Experimental and not heavily tested.</strong></li></ul><p><strong>Sharding Options</strong></p><ul><li><p><code>shardy_passes</code>: Defaults to <code>:to_mhlo_shardings</code>. Other options are:</p><ul><li><p><code>:none</code>: No sharding passes will be run. Shardy + MHLO shardings are handled by XLA.</p></li><li><p><code>:post_sdy_propagation</code>: Runs the Shardy propagation passes. MHLO shardings are handled by XLA.</p></li><li><p><a href="/Reactant.jl/previews/PR1236/api/api#Reactant.ShardyPropagationOptions"><code>ShardyPropagationOptions</code></a>: Custom sharding propagation options. MHLO shardings are handled by XLA.</p></li><li><p><code>:to_mhlo_shardings</code>: Runs the Shardy propagation passes and then exports the shardings to MHLO. All passes are run via MLIR pass pipeline and don&#39;t involve XLA.</p></li></ul></li><li><p><code>optimize_then_pad</code>: If <code>true</code>, the function will be optimized before padding (for non-divisible sharding axes) is applied. Defaults to <code>true</code>. <em>(Only for Sharded Inputs)</em></p></li><li><p><code>optimize_communications</code>: If <code>true</code>, additional passes for optimizing communication in sharded computations will be run. Defaults to <code>true</code>. <em>(Only for Sharded Inputs)</em></p></li></ul><p><strong>Julia Codegen Options</strong></p><ul><li><p><code>donated_args</code>: If <code>:auto</code>, the function will automatically donate the arguments that are not preserved in the function body. If <code>:none</code>, no arguments will be donated. Defaults to <code>:auto</code>.</p></li><li><p><code>assert_nonallocating</code>: If <code>true</code>, we make sure that no new buffers are returned by the function. Any buffer returned must be donated from the inputs. Defaults to <code>false</code>.</p></li><li><p><code>sync</code>: Reactant computations are asynchronous by default. If <code>true</code>, the computation will be executed synchronously, blocking till the computation is complete. This is recommended when benchmarking.</p></li></ul><p><strong>Extended Help</strong></p><p><strong>Private Options</strong></p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>These options are not part of the public API and are subject to change without any notice or deprecation cycle.</p></div><ul><li><p><code>disable_scatter_gather_optimization_passes</code>: Disables the scatter-gather optimization passes. This is <code>false</code> by default.</p></li><li><p><code>disable_pad_optimization_passes</code>: Disables the pad optimization passes. This is <code>false</code> by default.</p></li></ul>',19)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/CompileOptions.jl#L64-L158",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),s("details",E,[s("summary",null,[i[32]||(i[32]=s("a",{id:"Reactant.DefaultXLACompileOptions",href:"#Reactant.DefaultXLACompileOptions"},[s("span",{class:"jlbinding"},"Reactant.DefaultXLACompileOptions")],-1)),i[33]||(i[33]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[35]||(i[35]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DefaultXLACompileOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    donated_args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sync</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, optimize_then_pad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, assert_nonallocating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Runs specific Enzyme-JAX passes to ensure that the generated code is compatible with XLA compilation. For the documentation of the allowed kwargs see <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a>.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This is mostly a benchmarking option, and the default <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.CompileOptions"><code>CompileOptions</code></a> is almost certainly a better option.</p></div>`,3)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[34]||(i[34]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/CompileOptions.jl#L299-L311",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),i[85]||(i[85]=s("h3",{id:"Sharding-Specific-Options",tabindex:"-1"},[t("Sharding Specific Options "),s("a",{class:"header-anchor",href:"#Sharding-Specific-Options","aria-label":'Permalink to "Sharding Specific Options {#Sharding-Specific-Options}"'},"​")],-1)),s("details",C,[s("summary",null,[i[36]||(i[36]=s("a",{id:"Reactant.OptimizeCommunicationOptions",href:"#Reactant.OptimizeCommunicationOptions"},[s("span",{class:"jlbinding"},"Reactant.OptimizeCommunicationOptions")],-1)),i[37]||(i[37]=t()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[39]||(i[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OptimizeCommunicationOptions</span></span></code></pre></div><p>Fine-grained control over the optimization passes that rewrite ops to minimize collective communication.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[38]||(i[38]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/CompileOptions.jl#L2-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),s("details",_,[s("summary",null,[i[40]||(i[40]=s("a",{id:"Reactant.ShardyPropagationOptions",href:"#Reactant.ShardyPropagationOptions"},[s("span",{class:"jlbinding"},"Reactant.ShardyPropagationOptions")],-1)),i[41]||(i[41]=t()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[43]||(i[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ShardyPropagationOptions</span></span></code></pre></div><p>Fine-grained control over the sharding propagation pipeline. For more information on sharding propagation, see the <a href="https://openxla.org/shardy/sdy_propagation_passes" target="_blank" rel="noreferrer">Shardy Docs</a>.</p><p><strong>Options</strong></p><ul><li><p><code>keep_sharding_rules::Bool</code>: whether to keep existing and created op sharding rules.</p></li><li><p><code>conservative_propagation::Bool</code>: whether to disallow split axes and non-divisible sharding axes during propagation.</p></li><li><p><code>debug_sharding_origins::Bool</code>: whether to save information about the origin of a sharding on the MLIR module. These would be the shardings on the function inputs, outputs, sharding constraints and manual computations before propagation.</p></li><li><p><code>debug_propagation_edge_sharding::Bool</code>: whether to save information about the edge source of a sharding on the MLIR module. These are what operand/result introduced a sharding on some op result.</p></li><li><p><code>skip_convert_to_reshard::Bool</code></p></li><li><p><code>skip_inline::Bool</code></p></li><li><p><code>enable_insert_explicit_collectives::Bool</code>: whether to insert explicit collectives for sharding propagation. This is useful for debugging and checking the location of the communication ops.</p></li></ul>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[42]||(i[42]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/CompileOptions.jl#L30-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),i[86]||(i[86]=s("h2",{id:"Tracing-customization",tabindex:"-1"},[t("Tracing customization "),s("a",{class:"header-anchor",href:"#Tracing-customization","aria-label":'Permalink to "Tracing customization {#Tracing-customization}"'},"​")],-1)),s("details",F,[s("summary",null,[i[44]||(i[44]=s("a",{id:"Reactant.@skip_rewrite_func",href:"#Reactant.@skip_rewrite_func"},[s("span",{class:"jlbinding"},"Reactant.@skip_rewrite_func")],-1)),i[45]||(i[45]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[47]||(i[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@skip_rewrite_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f</span></span></code></pre></div><p>Mark function <code>f</code> so that Reactant&#39;s IR rewrite mechanism will skip it. This can improve compilation time if it&#39;s safe to assume that no call inside <code>f</code> will need a <code>@reactant_overlay</code> method.</p><div class="tip custom-block"><p class="custom-block-title">Info</p><p>Note that this marks the whole function, not a specific method with a type signature.</p></div><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The macro call should be inside the <code>__init__</code> function. If you want to mark it for precompilation, you must add the macro call in the global scope too.</p></div><p>See also: <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.@skip_rewrite_type"><code>@skip_rewrite_type</code></a></p>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[46]||(i[46]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/utils.jl#L140-L157",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),s("details",v,[s("summary",null,[i[48]||(i[48]=s("a",{id:"Reactant.@skip_rewrite_type",href:"#Reactant.@skip_rewrite_type"},[s("span",{class:"jlbinding"},"Reactant.@skip_rewrite_type")],-1)),i[49]||(i[49]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[51]||(i[51]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@skip_rewrite_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyStruct</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@skip_rewrite_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Mark the construct function of <code>MyStruct</code> so that Reactant&#39;s IR rewrite mechanism will skip it. It does the same as <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.@skip_rewrite_func"><code>@skip_rewrite_func</code></a> but for type constructors.</p><p>If you want to mark the set of constructors over it&#39;s type parameters or over its abstract type, you should use then the <code>Type{&lt;:MyStruct}</code> syntax.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The macro call should be inside the <code>__init__</code> function. If you want to mark it for precompilation, you must add the macro call in the global scope too.</p></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[50]||(i[50]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/utils.jl#L179-L194",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),i[87]||(i[87]=s("h2",{id:"Profile-XLA",tabindex:"-1"},[t("Profile XLA "),s("a",{class:"header-anchor",href:"#Profile-XLA","aria-label":'Permalink to "Profile XLA {#Profile-XLA}"'},"​")],-1)),i[88]||(i[88]=s("p",null,[t("Reactant can hook into XLA's profiler to generate compilation and execution traces. See the "),s("a",{href:"/Reactant.jl/previews/PR1236/tutorials/profiling#profiling"},"profiling tutorial"),t(" for more details.")],-1)),s("details",A,[s("summary",null,[i[52]||(i[52]=s("a",{id:"Reactant.Profiler.with_profiler",href:"#Reactant.Profiler.with_profiler"},[s("span",{class:"jlbinding"},"Reactant.Profiler.with_profiler")],-1)),i[53]||(i[53]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[55]||(i[55]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with_profiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, trace_output_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; trace_device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trace_host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, create_perfetto_link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Runs the provided function under a profiler for XLA (similar to <a href="https://jax.readthedocs.io/en/latest/profiling.html" target="_blank" rel="noreferrer">JAX&#39;s profiler</a>). The traces will be exported in the provided folder and can be seen using tools like <a href="https://ui.perfetto.dev" target="_blank" rel="noreferrer">perfetto.dev</a>. It will return the return values from the function. The <code>create_perfetto_link</code> parameter can be used to automatically generate a perfetto url to visualize the trace.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiled_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> with_profiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sync</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with_profiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./traces/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    compiled_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>When profiling compiled functions make sure to <a href="/Reactant.jl/previews/PR1236/api/api#Reactant.Compiler.@compile"><code>Reactant.Compiler.@compile</code></a> with the <code>sync=true</code> option so that the compiled execution is captured by the profiler.</p></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[54]||(i[54]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Profiler.jl#L6-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),s("details",R,[s("summary",null,[i[56]||(i[56]=s("a",{id:"Reactant.Profiler.annotate",href:"#Reactant.Profiler.annotate"},[s("span",{class:"jlbinding"},"Reactant.Profiler.annotate")],-1)),i[57]||(i[57]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[59]||(i[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, name, [level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TRACE_ME_LEVEL_CRITICAL])</span></span></code></pre></div><p>Generate an annotation in the current trace.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[58]||(i[58]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Profiler.jl#L70-L74",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),s("details",j,[s("summary",null,[i[60]||(i[60]=s("a",{id:"Reactant.Profiler.@annotate",href:"#Reactant.Profiler.@annotate"},[s("span",{class:"jlbinding"},"Reactant.Profiler.@annotate")],-1)),i[61]||(i[61]=t()),a(e,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[63]||(i[63]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, c)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The created function will generate an annotation in the captured XLA profiles.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[62]||(i[62]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Profiler.jl#L86-L92",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),i[89]||(i[89]=s("h2",{id:"Devices",tabindex:"-1"},[t("Devices "),s("a",{class:"header-anchor",href:"#Devices","aria-label":'Permalink to "Devices {#Devices}"'},"​")],-1)),s("details",D,[s("summary",null,[i[64]||(i[64]=s("a",{id:"Reactant.devices",href:"#Reactant.devices"},[s("span",{class:"jlbinding"},"Reactant.devices")],-1)),i[65]||(i[65]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[67]||(i[67]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XLA.AbstractClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XLA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default_backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Return a list of devices available for the given client.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[66]||(i[66]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Devices.jl#L1-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),s("details",T,[s("summary",null,[i[68]||(i[68]=s("a",{id:"Reactant.addressable_devices",href:"#Reactant.addressable_devices"},[s("span",{class:"jlbinding"},"Reactant.addressable_devices")],-1)),i[69]||(i[69]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[71]||(i[71]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addressable_devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addressable_devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XLA.AbstractClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XLA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default_backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Return a list of addressable devices available for the given client.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[70]||(i[70]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Devices.jl#L11-L16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),i[90]||(i[90]=s("h2",{id:"Differentiation-Specific-API",tabindex:"-1"},[t("Differentiation Specific API "),s("a",{class:"header-anchor",href:"#Differentiation-Specific-API","aria-label":'Permalink to "Differentiation Specific API {#Differentiation-Specific-API}"'},"​")],-1)),s("details",w,[s("summary",null,[i[72]||(i[72]=s("a",{id:"Reactant.ignore_derivatives",href:"#Reactant.ignore_derivatives"},[s("span",{class:"jlbinding"},"Reactant.ignore_derivatives")],-1)),i[73]||(i[73]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[75]||(i[75]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ignore_derivatives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Prevents the flow of gradients (and higher-order derivatives) by creating a new value that is detached from the original value. This is an identity operation on the primal. This can be applied on a nested structure of arrays and we will apply the operation on each of the leaves.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[74]||(i[74]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/src/Enzyme.jl#L543-L550",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),i[91]||(i[91]=s("h2",{id:"Internal-utils",tabindex:"-1"},[t("Internal utils "),s("a",{class:"header-anchor",href:"#Internal-utils","aria-label":'Permalink to "Internal utils {#Internal-utils}"'},"​")],-1)),s("details",x,[s("summary",null,[i[76]||(i[76]=s("a",{id:"ReactantCore.materialize_traced_array",href:"#ReactantCore.materialize_traced_array"},[s("span",{class:"jlbinding"},"ReactantCore.materialize_traced_array")],-1)),i[77]||(i[77]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[79]||(i[79]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">materialize_traced_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AbstractArray{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TracedRNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TracedRArray</span></span></code></pre></div><p>Given an AbstractArray{TracedRNumber}, return or create an equivalent TracedRArray.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[78]||(i[78]=[s("a",{href:"https://github.com/EnzymeAD/Reactant.jl/blob/c79e8e03c36cbb542414515256cafd4b4f9c5b35/lib/ReactantCore/src/ReactantCore.jl#L632-L637",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})])])}const N=o(h,[["render",P]]);export{V as __pageData,N as default};
